{"version":3,"sources":["state/context.ts","reportWebVitals.ts","utils/styles.ts","components/NavBar/styles.ts","state/chatStore.ts","components/Clock/styles.ts","utils/time.ts","components/Clock/Clock.tsx","components/Loader/Loader.tsx","components/Chat/styles.ts","components/Message/styles.ts","utils/const.ts","utils/routes.ts","components/Message/Message.tsx","components/Emoji/styles.ts","components/Emoji/Emoji.tsx","components/Chat/Chat.tsx","components/BasicJoinForm/styles.ts","components/BasicJoinForm/BasicJoinForm.tsx","components/Login/styles.ts","components/Registration/styles.ts","components/JoinOptions/styles.ts","components/JoinOptions/JoinOptions.tsx","components/Login/Login.tsx","components/Registration/Registration.tsx","components/NavBar/NavBar.tsx","http/instance.ts","service/AuthService.ts","state/meStore.ts","components/AppRoute/AppRoute.tsx","components/App/App.tsx","index.tsx"],"names":["MyContext","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","title","fontFamily","fontSize","useStyles","makeStyles","display","gridTemplateRows","justifyItems","textTransform","onlineCounter","color","React","defaultValue","MESSAGE_ENUM","timeRoot","whiteSpace","getTime","date","getTwoDig","time","string","toString","length","hour","getHours","min","getMinutes","sec","getSeconds","timeConverter","UNIX_timestamp","a","Date","year","getFullYear","month","getMonth","getDate","Clock","props","children","clocRef","useState","setTime","styles","useEffect","clearId","setTimeout","clearInterval","ref","className","Loader","Container","Grid","container","alignItems","justifyContent","style","height","window","innerHeight","CircularProgress","messagesRoot","maxHeight","messages","width","backgroundColor","overflowY","newMessageRoot","position","rowGap","sendButton","textField","mainBlock","minWidth","margin","borderRadius","maxWidth","padding","info","name","copy","cursor","opacity","top","ROUTES","ChatStore","messageValue","isLoading","isConnected","connectionCounter","makeAutoObservable","this","deep","value","count","Message","observer","isMe","message","useContext","chat","event","CONNECTION","setConnectionCounter","marginLeft","marginRight","paddingRight","direction","MESSAGE","justifySelf","borderBottom","toUpperCase","body","onClick","navigator","clipboard","writeText","right","left","emojiRoot","zIndex","picker","Emoji","frameWidth","isShowEmoji","setIsShowEmoji","classNames","onBlur","native","groupNames","smileys_people","disableAutoFocus","onEmojiClick","emojiObject","setMessageValue","emoji","skinTone","SKIN_TONE_MEDIUM_DARK","Button","Chat","me","socket","chatRef","useRef","formik","useFormik","initialValues","onSubmit","values","trim","id","now","email","send","JSON","stringify","sendMessage","messagesLength","current","scrollTo","scrollHeight","scrollToBottom","handleSubmit","map","mes","TextField","label","variant","autoComplete","onChange","e","currentTarget","clientWidth","type","classes","outlined","root","marginTop","alert","BasicJoinForm","submitButtonText","isRegistration","showAlert","onCloseAlert","password","console","log","onChatDisabler","Box","Grow","in","Alert","onClose","severity","transformOrigin","timeout","gap","autoFocus","handleChange","inputProps","form","disabled","gridTemplateColumns","columnGap","button","publicRoutes","path","JOIN_ROUTE","Component","item","to","REGISTRATION_ROUTE","LOGIN_ROUTE","login","timeOutId","setShowAlert","username","registration","onShowAlert","useCallback","clearTimeout","NavBar","CHAT_ROUTE","clockRef","isAuthorized","isLoginPage","useLocation","pathname","includes","emptyBoxWidth","offsetWidth","onLogout","logout","AppBar","elevation","baseURL","instance","axios","create","interceptors","request","use","config","headers","Authorization","localStorage","getItem","response","error","originalRequest","status","_isRetry","post","withCredentials","setItem","data","accessToken","AuthService","delete","MeStore","setMe","user","setAuthData","warn","refresh","AppRoute","component","exact","App","setSocket","connect","setLoading","WebSocket","onmessage","messageEvent","setMessages","parse","onopen","setConnected","onclose","onerror","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fe51f34.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nlet defaultValue: any;\r\nexport let MyContext: React.Context<any>;\r\nMyContext = React.createContext (defaultValue);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const title = {\r\n        fontFamily:'monospace',\r\n        fontSize:'2rem'\r\n}\r\n","import { makeStyles } from '@mui/styles';\r\nimport {title} from \"../../utils/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n    title: {\r\n        display:\"grid\",\r\n        gridTemplateRows:'1fr 1fr',\r\n        justifyItems:\"center\",\r\n        '&>div:first-child':{\r\n            ...title,\r\n            textTransform:\"uppercase\",\r\n        }\r\n\r\n    },\r\n    onlineCounter:{\r\n        color:\"grey\"\r\n    },\r\n});","import {makeAutoObservable} from \"mobx\";\r\n\r\n\r\nexport enum MESSAGE_ENUM {\r\n    MESSAGE = 'message',\r\n    QUIT = 'quit',\r\n    CONNECTION = 'connection'\r\n}\r\n\r\n\r\nexport interface IMessage {\r\n    event: MESSAGE_ENUM;\r\n    id: string;\r\n    name: string;\r\n    body: string;\r\n    connectionCounter: number;\r\n}\r\n\r\n\r\ninterface IChat {\r\n    messages: IMessage[];\r\n    messageValue: string;\r\n    isLoading: boolean;\r\n    isConnected: boolean;\r\n    connectionCounter?: number;\r\n    setConnected: (isConnected: boolean) => void;\r\n    setLoading: (isLoading: boolean) => void;\r\n    setMessageValue: (value: string) => void;\r\n    setMessages: (messages: any) => void;\r\n}\r\n\r\nclass ChatStore implements IChat {\r\n    messages = [] as IMessage[];\r\n    messageValue = '';\r\n    isLoading = false;\r\n    isConnected = false;\r\n    connectionCounter = 0;\r\n\r\n    constructor() {\r\n        makeAutoObservable ( this, {}, {deep: true} );\r\n    }\r\n\r\n\r\n    setConnected(isConnected: boolean) {\r\n        this.isConnected = isConnected;\r\n    };\r\n\r\n    setLoading(isLoading: boolean) {\r\n        this.isLoading = isLoading;\r\n    };\r\n\r\n    setMessageValue(value: string) {\r\n        this.messageValue = value;\r\n    };\r\n\r\n    setMessages(messages: any) {\r\n        this.messages =  [...this.messages,...messages, ];\r\n\r\n    };\r\n\r\n    setConnectionCounter(count: number) {\r\n        this.connectionCounter = count;\r\n    };\r\n}\r\n\r\nexport default ChatStore;","import { makeStyles } from '@mui/styles';\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    timeRoot:{\r\n       fontSize:'2rem',\r\n        fontFamily:\"monospace\",\r\n        color:'gray',\r\n        whiteSpace:'nowrap'\r\n    },\r\n});","\r\n\r\n\r\nexport const getTime = (date:Date) => {\r\n    const getTwoDig = (time:number) => {\r\n        const string = time.toString()\r\n        return string.length > 1 ? string : `0${string}`\r\n    }\r\n    const hour = getTwoDig(date.getHours())\r\n    const min = getTwoDig(date.getMinutes())\r\n    const sec = getTwoDig(date.getSeconds())\r\n    return `${ hour }: ${min }: ${ sec }`\r\n}\r\n\r\nconst timeFromUnix = (date:number) => {\r\n    return new Date(date * 1000)\r\n}\r\n\r\nexport const getDate = (date:number) => {\r\n    const fullDate = timeFromUnix(date)\r\n    const year = fullDate.getFullYear()\r\n    const month = fullDate.getMonth()\r\n    const day = fullDate.getDay()\r\n    return `${ year }: ${month }: ${ day }`\r\n}\r\nexport const timeConverter = (UNIX_timestamp:number) => {\r\n    // weird\r\n    const a = new Date(UNIX_timestamp / 1000);\r\n    const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n    const year = a.getFullYear();\r\n    const month = months[a.getMonth()];\r\n    const date = a.getDate();\r\n    const hour = a.getHours();\r\n    const min = a.getMinutes();\r\n    const sec = a.getSeconds();\r\n    const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\r\n    return time;\r\n}","import * as React from 'react';\r\nimport {LegacyRef, useEffect, useRef, useState} from 'react';\r\nimport {useStyles} from './styles'\r\nimport {getTime} from \"../../utils/time\";\r\n\r\n\r\ninterface IProps {\r\n clocRef?:React.Ref<HTMLDivElement> | null\r\n}\r\n\r\nexport const Clock: React.FC<IProps> = (props) => {\r\n    const {children,clocRef} = props;\r\n    const [time, setTime] = useState ( new Date () );\r\n    const styles = useStyles();\r\n\r\n\r\n    useEffect ( () => {\r\n        const clearId = setTimeout ( () => setTime ( new Date () ), 5000 );\r\n        return () => clearInterval ( clearId );\r\n    }, [time] );\r\n\r\n    return (\r\n        <div ref={clocRef} className={styles.timeRoot}>\r\n            { getTime(time)}\r\n        </div>\r\n    );\r\n};","// @flow\r\nimport {CircularProgress, Container, Grid} from '@mui/material';\r\nimport * as React from 'react';\r\n\r\n\r\ntype Props = {\r\n\r\n};\r\nexport const Loader = (props: Props) => {\r\n    return (\r\n        <Container>\r\n            <Grid container alignItems={\"center\"} justifyContent={\"center\"} style={{height: window.innerHeight-30}}>\r\n                    <CircularProgress color=\"primary\" />\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};","import {makeStyles} from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n    messagesRoot: {\r\n        maxHeight: window.innerHeight - 30\r\n    },\r\n    messages: {\r\n        width: '100%',\r\n        height: '70vh',\r\n        backgroundColor: '#354765',\r\n        overflowY: 'auto'\r\n    },\r\n    newMessageRoot: {\r\n        position: 'relative',\r\n        width: '100%',\r\n        rowGap: 20,\r\n        color: '#ffffff'\r\n    },\r\n    sendButton:{\r\n        backgroundColor: '#354765',\r\n        color: '#ffffff',\r\n        width:'20%',\r\n        height:56,\r\n        '&:hover':{\r\n            backgroundColor: '#7094d2',\r\n            color: '#354765',\r\n        }\r\n    },\r\n    textField:{\r\n        width:'80%'\r\n    }\r\n})","import { makeStyles } from '@mui/styles';\r\nimport {MOBIL} from \"../../utils/const\";\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    mainBlock:{\r\n        minWidth: '40vw',\r\n        margin: 10,\r\n        borderRadius: '4%',\r\n        maxWidth: '60%',\r\n        width: 'fit-content',\r\n        padding: 15,\r\n        display: 'grid',\r\n        justifyContent:'flexStart',\r\n        rowGap: 20,\r\n        fontFamily: 'serif',\r\n        position:'relative'\r\n    },\r\n    info: {\r\n        color:'#afbed2',\r\n        margin:'20px 30px'\r\n    },\r\n    name:{\r\n        display:'block',\r\n        maxWidth:'max-content'\r\n    },\r\n    copy:{\r\n        cursor:\"pointer\",\r\n        position:\"absolute\",\r\n        opacity:0.7,\r\n        top:8\r\n\r\n    },\r\n    date:{\r\n        fontSize:'0.7em'\r\n    },\r\n    [`@media (max-width:${MOBIL}px)`]: {\r\n        mainBlock:{\r\n            minWidth: '70vw',\r\n            fontSize: '1.4em'\r\n        },\r\n    }\r\n});","export const MOBIL = 520;","import {Chat} from \"../components/Chat/Chat\";\r\nimport {Login} from \"../components/Login/Login\";\r\nimport {Registration} from \"../components/Registration/Registration\";\r\nimport {JoinOptions} from \"../components/JoinOptions/JoinOptions\";\r\n\r\nexport enum ROUTES {\r\n    LOGIN_ROUTE = '/login',\r\n    CHAT_ROUTE = '/chat',\r\n    REGISTRATION_ROUTE = '/registration',\r\n    JOIN_ROUTE = '/join',\r\n}\r\n\r\nexport const publicRoutes = [\r\n\r\n    {\r\n        path: ROUTES.JOIN_ROUTE,\r\n        Component: JoinOptions,\r\n    },\r\n    {\r\n        path: ROUTES.LOGIN_ROUTE,\r\n        Component: Login,\r\n    },\r\n    {\r\n        path: ROUTES.REGISTRATION_ROUTE,\r\n        Component: Registration,\r\n    },\r\n];\r\n\r\nexport const privateRoutes = [\r\n    {\r\n        path: ROUTES.CHAT_ROUTE,\r\n        Component: Chat,\r\n    },\r\n];\r\n\r\n","import * as React from 'react';\r\nimport {useContext} from 'react';\r\nimport {Grid} from \"@mui/material\";\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport {useStyles} from \"./styles\";\r\nimport {MESSAGE_ENUM} from \"../../state/chatStore\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {timeConverter} from \"../../utils/time\";\r\nimport {MyContext} from \"../../state/context\";\r\n\r\n\r\ntype Props = {\r\n    isMe: boolean;\r\n    message: any;\r\n};\r\nexport const Message: React.FC<Props> = observer((props) => {\r\n    const {isMe, message} = props;\r\n    const [chat,me, socket] = useContext ( MyContext );\r\n    const styles = useStyles ();\r\n    const onCopy = () =>  navigator.clipboard.writeText(message.body)\r\n    if (message.event === MESSAGE_ENUM.CONNECTION) {\r\n        chat.setConnectionCounter(message.connectionCounter);\r\n    }\r\n    const style = {\r\n        backgroundColor: isMe ? '#3a64a8' : '#536f9b',\r\n        color:  isMe ? '#f6dbaa' :'#eee4cc',\r\n        marginLeft: isMe ? 'auto' : '10%',\r\n        marginRight: isMe ? '10%' : 0,\r\n        paddingRight:10\r\n\r\n    };\r\n\r\n    return (\r\n        <Grid direction={ \"column\" } container>\r\n            { message.event === MESSAGE_ENUM.MESSAGE\r\n                ? <div className={styles.mainBlock} style={ style }>\r\n                    <h3 className={styles.name}\r\n                        style={\r\n                            {justifySelf:`${!isMe && 'flex-end'}`,borderBottom:`2px solid ${isMe ? '#f6dbaa' :'#eee4cc' }`}\r\n                        }>\r\n                        { message.name?.toUpperCase() }\r\n                    </h3>\r\n                    <span>{ message.body }</span>\r\n                    <span className={styles.date}>{ timeConverter(message.date * 1000)  }</span>\r\n                    <div onClick={onCopy} style={isMe ? {right:2} : {left:6}\r\n                    } title={'скопировать сообщение'} className={styles.copy}>\r\n                        <ContentCopyIcon/>\r\n                    </div>\r\n            </div>\r\n                : message.event === MESSAGE_ENUM.CONNECTION ?\r\n                    <span className={ styles.info }>{ message.name } подключился к чату.. .</span>\r\n                    : <span className={ styles.info }>{ message.name } вышел из чата.. .</span> }\r\n        </Grid>\r\n    );\r\n});","import {makeStyles} from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n    emojiRoot: {\r\n        position: \"absolute\",\r\n        zIndex: 1,\r\n        top: 10,\r\n\r\n    },\r\n\r\n    picker:{\r\n        top:-350\r\n    },\r\n\r\n})","import * as React from 'react';\r\nimport {useContext, useState} from 'react';\r\nimport classNames from \"classnames\";\r\nimport Picker, {SKIN_TONE_MEDIUM_DARK} from \"emoji-picker-react\";\r\nimport {Button} from \"@mui/material\";\r\nimport EmojiEmotionsIcon from \"@mui/icons-material/EmojiEmotions\";\r\nimport {useStyles} from \"./styles\";\r\nimport {MyContext} from \"../../state/context\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\n\r\n\r\ninterface IProps  {\r\n    frameWidth?:number\r\n}\r\n\r\nexport const Emoji: React.FC<IProps> = observer((props) => {\r\n    const {children,frameWidth = 0} = props;\r\n    const [chat,me,socket] = useContext ( MyContext );\r\n    const styles = useStyles ();\r\n    const [isShowEmoji, setIsShowEmoji] = useState ( false );\r\n    const showImoji = () => setIsShowEmoji ( true );\r\n    const hideImoji = () => setIsShowEmoji ( false );\r\n    const onEmojiClick = (event: any, emojiObject: any) => {\r\n        chat.setMessageValue ( emojiObject.emoji ) ;\r\n    };\r\n    return (\r\n        <div style={{right:`${frameWidth * 0.2}px`}} className={ classNames ( styles.emojiRoot, {[styles.picker]: isShowEmoji} ) }\r\n             onBlur={ hideImoji }>\r\n            { isShowEmoji\r\n                ? <Picker native groupNames={ {smileys_people: \"PEOPLE\"} } disableAutoFocus={ true }\r\n                          onEmojiClick={ onEmojiClick } skinTone={ SKIN_TONE_MEDIUM_DARK }/>\r\n                : <Button onClick={ showImoji }><EmojiEmotionsIcon/></Button> }\r\n        </div>\r\n    );\r\n});","import * as React from 'react';\r\nimport {useContext, useEffect, useRef, useState} from 'react';\r\nimport {Button, Container, Grid, TextField} from '@mui/material';\r\nimport {Loader} from \"../Loader/Loader\";\r\nimport {useStyles} from \"./styles\";\r\nimport {Message} from \"../Message/Message\";\r\nimport {Emoji} from \"../Emoji/Emoji\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {IMessage} from '../../state/chatStore';\r\nimport {MyContext} from \"../../state/context\";\r\nimport {useFormik} from 'formik';\r\nimport MeStore from \"../../state/meStore\";\r\n\r\n\r\ntype Props = {}\r\n\r\n\r\nexport const Chat: React.FC<Props> = observer ( ((props) => {\r\n    const [chat,me, socket] = useContext ( MyContext );\r\n    const chatRef = useRef<HTMLDivElement> ( null );\r\n    const styles = useStyles ();\r\n    const sendMessage = () => {\r\n        if (!chat.messageValue.trim ()) return;\r\n        const message = {\r\n            event: 'message',\r\n            id: Date.now ().toString (),\r\n            name: me.me.email,\r\n            body: chat.messageValue,\r\n        };\r\n        socket?.send ( JSON.stringify ( message ) );\r\n        chat.setMessageValue ( '' );\r\n    };\r\n\r\n    const formik = useFormik ( {\r\n        initialValues: {\r\n            message: 'введите сообщение',\r\n        },\r\n        onSubmit: (values) => sendMessage (),\r\n    } );\r\n\r\n    const messagesArray = chat.messages;\r\n    const messagesLength = messagesArray.length;\r\n\r\n    const scrollToBottom = () => {\r\n        chatRef.current?.scrollTo ( 0, chatRef.current.scrollHeight );\r\n    };\r\n\r\n    useEffect ( () => {\r\n        scrollToBottom ();\r\n    } );\r\n\r\n    if (chat.isLoading) return <Loader/>;\r\n    return (\r\n        <Container>\r\n            <form onSubmit={ formik.handleSubmit }>\r\n                <Grid container className={ styles.messagesRoot } alignItems={ \"center\" }>\r\n                    <Grid ref={ chatRef } className={ styles.messages }>\r\n                        { messagesLength && chat.messages.map ( (mes: IMessage) => {\r\n                            const isMe = me.me.email === mes.name;\r\n                            return <Message key={ mes.id } isMe={ isMe } message={ mes }/>;\r\n                        } ) }\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid className={ styles.newMessageRoot } container direction={ 'row' } alignItems={ 'flex-end' }>\r\n                    <TextField id={ 'message' } name={ 'message' } label={ 'message' } variant=\"filled\"\r\n                               autoComplete={ 'off' } onChange={ e => chat.setMessageValue ( e.currentTarget.value ) }\r\n                               value={ chat.messageValue } className={ styles.textField }\r\n                    />\r\n                    <Emoji frameWidth={ chatRef.current?.clientWidth }/>\r\n                    <Button type={ 'submit' } variant={ 'outlined' }\r\n                            classes={ {outlined: styles.sendButton} }><strong>send</strong></Button>\r\n\r\n                </Grid>\r\n            </form>\r\n        </Container>\r\n    );\r\n}) );","import {makeStyles} from \"@mui/styles\";\r\n\r\n\r\nexport const useStyles = makeStyles ( {\r\n    root: {\r\n        marginTop: '5%',\r\n        position: 'relative',\r\n\r\n    },\r\n    alert: {\r\n        position: \"absolute\",\r\n        width: 300,\r\n        right:'25%',\r\n        opacity:0.7,\r\n        zIndex: 0,\r\n        top:'5%',\r\n\r\n    },\r\n} );","import {Alert, Box, Button, Grid, Grow, TextField} from '@mui/material';\r\nimport * as React from 'react';\r\nimport {useContext, useState} from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport {MyContext} from \"../../state/context\";\r\nimport {useStyles} from \"./styles\";\r\nimport classNames from \"classnames\";\r\n\r\n\r\nexport const BasicJoinForm: React.FC<IProps> = (props) => {\r\n    const {onSubmit, children, submitButtonText, isRegistration = false,showAlert = false,onCloseAlert} = props;\r\n    const [chat, me, socket] = useContext ( MyContext );\r\n    const styles = useStyles ();\r\n    const formik = useFormik ( {\r\n        initialValues: {\r\n            name: '',\r\n            password: '',\r\n        },\r\n        onSubmit: (values) => {\r\n            try {\r\n                onSubmit && onSubmit ( values.name, values.password );\r\n            } catch (e) {\r\n                console.log ( e );\r\n            }\r\n\r\n        },\r\n    } );\r\n\r\n    const onChatDisabler = (formik.values?.name === '')\r\n        || formik.values.name.trim ().length < 3\r\n        || (formik.values?.password === '')\r\n        || formik.values.password.trim ().length < 3;\r\n\r\n    return (\r\n        <form className={ styles.root }  onSubmit={ formik.handleSubmit }>\r\n            <Box className={styles.alert} >\r\n                <Grow in={showAlert}>{<Alert onClose={onCloseAlert} severity=\"info\">{ isRegistration\r\n                    ? 'Введите имя которое будет использовано для регистрации и отправки сообщений в чате'\r\n                    : 'Введите имя указанное в процессе регистрации' }</Alert>}</Grow>\r\n                {/* Conditionally applies the timeout prop to change the entry speed. */}\r\n                <Grow\r\n                    in={showAlert}\r\n                    style={{ transformOrigin: '0 0 0' }}\r\n                    {...(showAlert ? { timeout: 1000 } : {})}\r\n                >\r\n                    { <Alert severity=\"info\">{ isRegistration\r\n                        ? 'Введите пароль который будет использован для регистрации'\r\n                        : 'Введите пароль указанный в процессе регистрации' }</Alert>}\r\n                </Grow>\r\n            </Box>\r\n            <Grid  container justifyContent={ \"center\" } alignItems={ \"center\" }\r\n                  direction={ 'column' } gap={ 1 }>\r\n                { children }\r\n                    <TextField autoFocus variant=\"filled\"\r\n                               onChange={ formik.handleChange }\r\n                               value={ formik.values.name }\r\n                               id=\"name\" name=\"name\" label=\"name\"\r\n                />\r\n\r\n                    <TextField inputProps={{\r\n                        autoComplete: 'new-password',\r\n                        form: {\r\n                            autoComplete: 'off',\r\n                        },\r\n                    }} variant=\"filled\"\r\n                               onChange={ formik.handleChange }\r\n                               value={ formik.values.password } type=\"password\"\r\n                               id=\"password\" name=\"password\" label=\"password\"\r\n                />\r\n\r\n                <Button type=\"submit\" disabled={ onChatDisabler } color={ 'info' }\r\n                        variant={ 'contained' }>{ submitButtonText }</Button>\r\n            </Grid>\r\n        </form>\r\n    );\r\n};\r\n\r\ninterface IProps {\r\n    onSubmit?: (name: string, password: string) => void;\r\n    onCloseAlert?: () => void;\r\n    submitButtonText: string;\r\n    isRegistration?: boolean;\r\n    showAlert?: boolean;\r\n};\r\n","import {makeStyles} from '@mui/styles';\r\nimport {title} from \"../../utils/styles\";\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    title:{\r\n        ...title,\r\n        textTransform:\"uppercase\",\r\n    }\r\n\r\n});","import {makeStyles} from '@mui/styles';\r\nimport {title} from \"../../utils/styles\";\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    children:{\r\n       display:\"grid\",\r\n        gridTemplateColumns:'1fr 24px',\r\n        columnGap:6,\r\n        cursor:\"pointer\"\r\n    },\r\n    title:{\r\n        ...title,\r\n        textTransform:\"uppercase\",\r\n    }\r\n\r\n});","import {makeStyles} from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n   root: {\r\n      marginTop:'10%',\r\n    },\r\n    button:{\r\n       backgroundColor: '#354765',\r\n    }\r\n\r\n})","import {Button, Grid} from \"@mui/material\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {ROUTES} from \"../../utils/routes\";\r\nimport * as React from \"react\";\r\nimport {useStyles} from \"./styles\";\r\n\r\nexport const JoinOptions:React.FC = () => {\r\n    const styles = useStyles ();\r\n    return (\r\n        <Grid className={styles.root} container justifyContent={\"center\"} direction={\"column\"} alignItems={\"center\"} gap={10}>\r\n            <Grid item><NavLink to={ ROUTES.REGISTRATION_ROUTE }>< Button\r\n                variant={ 'contained' }>Регистрация</Button></NavLink></Grid>\r\n            <Grid item><NavLink to={ ROUTES.LOGIN_ROUTE }>< Button\r\n                variant={ 'contained' }>Вход</Button></NavLink></Grid>\r\n        </Grid>\r\n    )\r\n}","import * as React from 'react';\r\nimport {useContext} from 'react';\r\nimport {MyContext} from \"../../state/context\";\r\nimport {BasicJoinForm} from \"../BasicJoinForm/BasicJoinForm\";\r\nimport {useStyles} from './styles'\r\n\r\n\r\nexport const Login: React.FC = () => {\r\n    const styles = useStyles()\r\n    const [chat, me, socket] = useContext ( MyContext );\r\n\r\n    const onSubmit = (email:string,password:string)=>{\r\n       me.login(email,password)\r\n    }\r\n\r\n    return (\r\n        <BasicJoinForm onSubmit={onSubmit} submitButtonText={\"Войти\"}>\r\n            <div className={styles.title}> Вход </div>\r\n        </BasicJoinForm>\r\n    );\r\n};\r\n\r\n","import * as React from 'react';\r\nimport {useCallback, useContext, useState} from 'react';\r\nimport {BasicJoinForm} from \"../BasicJoinForm/BasicJoinForm\";\r\nimport HelpIcon from \"@mui/icons-material/Help\";\r\nimport {useStyles} from \"./styles\";\r\nimport {MyContext} from \"../../state/context\";\r\n\r\n\r\nexport const Registration: React.FC<Props> = () => {\r\n    const styles = useStyles ();\r\n    const [showAlert, setShowAlert] = useState ( false );\r\n    const [chat, me, socket] = useContext ( MyContext );\r\n    let timeOutId: NodeJS.Timeout;\r\n    const onSubmit = async (username: string, password: string) => {\r\n        await me.registration ( username, password );\r\n    };\r\n\r\n    const onShowAlert = useCallback ( () => {\r\n        setShowAlert ( true );\r\n        timeOutId = setTimeout ( () => {\r\n            setShowAlert ( false );\r\n        }, 5000 );\r\n    }, [] );\r\n    const onCloseAlert = useCallback ( () => {\r\n        setShowAlert ( false );\r\n        clearTimeout ( timeOutId );\r\n    }, [] );\r\n\r\n    return (\r\n        <BasicJoinForm onCloseAlert={ onCloseAlert } showAlert={ showAlert } isRegistration onSubmit={ onSubmit }\r\n                       submitButtonText={ \"Зарегистрироваться\" }>\r\n            <div className={ styles.children } onClick={ showAlert ? onCloseAlert : onShowAlert }>\r\n                <div className={ styles.title }> Регистрация</div>\r\n                <HelpIcon/></div>\r\n        </BasicJoinForm>\r\n    );\r\n};\r\ntype Props = {};\r\n","import * as React from 'react';\r\nimport {LegacyRef, useCallback, useContext, useMemo, useRef} from 'react';\r\nimport {AppBar, Button, Grid, Toolbar} from '@mui/material';\r\nimport {useStyles} from \"./styles\";\r\nimport {MyContext} from \"../../state/context\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Clock} from \"../Clock/Clock\";\r\nimport {NavLink, useLocation} from 'react-router-dom';\r\nimport {ROUTES} from \"../../utils/routes\";\r\n\r\n\r\ntype Props = {};\r\nexport const NavBar: React.FC<Props> = observer ( (props) => {\r\n    const [chat, me, socket] = useContext ( MyContext );\r\n    const {connectionCounter} = chat;\r\n    const styles = useStyles ();\r\n    const clockRef = useRef<HTMLDivElement>(null)\r\n    const isAuthorized = !!me.me.email;\r\n    const isLoginPage = useLocation().pathname.includes(ROUTES.LOGIN_ROUTE);\r\n    const emptyBoxWidth = clockRef?.current?.offsetWidth || 0;\r\n    const onLogout = useCallback(() => me.logout(),[])\r\n    return (\r\n        <AppBar color={ \"transparent\" } variant={ \"outlined\" } elevation={ 0 } position=\"static\">\r\n            <Grid container  item alignItems={\"center\"}  justifyContent={'space-evenly'}>\r\n                <div style={{width:emptyBoxWidth}}/>\r\n                <div className={ styles.title }>\r\n                    <div>{ 'Чат имени Альфредо Гарсии' }</div>\r\n                    { isAuthorized ?\r\n                            <span className={ styles.onlineCounter }>\r\n                                сейчас онлайн: { connectionCounter || 0 } человек\r\n                            </span>\r\n                            : isLoginPage\r\n                                ? <Grid item><NavLink to={ ROUTES.REGISTRATION_ROUTE }>< Button\r\n                                variant={ 'text' }>к регистрации</Button></NavLink></Grid>\r\n                                : <Grid item><NavLink to={ ROUTES.LOGIN_ROUTE }>< Button\r\n                                variant={ 'text' }>к логину</Button></NavLink></Grid>\r\n                    }\r\n\r\n                </div>\r\n                <Clock clocRef={clockRef}/>\r\n                    { isAuthorized && <Button onClick={ onLogout } variant={ 'outlined' }>Logout</Button> }\r\n            </Grid>\r\n        </AppBar>\r\n    );\r\n} );","import axios from \"axios\";\r\nimport {IUser} from \"../service/AuthService\";\r\n\r\n\r\n// const baseURL = 'http://localhost:5000/auth';\r\nconst baseURL = 'https://ws-simple-chat-api.herokuapp.com/auth';\r\n\r\nconst instance = axios.create({baseURL});\r\n\r\ninstance.interceptors.request.use((config)=>{\r\n    if ( config && config.headers) {\r\n        config.headers.Authorization = `Bearer ${ localStorage.getItem ( 'token' ) }`;\r\n        return config\r\n    }\r\n});\r\n\r\ninstance.interceptors.response.use((config)=>{\r\n    return config;\r\n},async (error) => {\r\n    const originalRequest = error.config;\r\n    if (error.response.status === 401 && error.config && !error.config._isRetry) {\r\n        originalRequest._isRetry = true;\r\n        try {\r\n            const response = await axios.post<AuthResponse>(`${baseURL}/refresh`, {withCredentials: true})\r\n            localStorage.setItem('token', response.data.accessToken);\r\n            return instance.request(originalRequest);\r\n        } catch (e) {\r\n            console.log('НЕ АВТОРИЗОВАН')\r\n        }\r\n    }\r\n    throw error;\r\n});\r\n\r\n\r\nexport default instance;\r\n\r\nexport interface AuthResponse {\r\n    accessToken: string;\r\n    refreshToken: string;\r\n    user: IUser;\r\n}","import {AxiosResponse} from \"axios\";\r\nimport instance from \"../http/instance\";\r\n\r\n\r\nexport default class AuthService {\r\n    static async login(email: string, password: string): Promise<AxiosResponse<IAuthResponse>> {\r\n        return instance.post ( '/login', {email, password} );\r\n    }\r\n\r\n    static async registration(email: string, password: string): Promise<AxiosResponse<IAuthResponse>> {\r\n        return instance.post ( '/registration', {email, password} );\r\n    }\r\n\r\n    static async logout(): Promise<void> {\r\n        return instance.delete ( '/logout' );\r\n    }\r\n    static async refresh(): Promise<AxiosResponse<IAuthResponse>> {\r\n        return instance.post ( '/refresh' );\r\n    }\r\n}\r\n\r\nexport interface IAuthResponse {\r\n    accessToken: string;\r\n    refreshToken: string;\r\n    user: IUser;\r\n}\r\n\r\nexport interface IUser {\r\n    email: string;\r\n    id: string;\r\n    isActivated: boolean;\r\n\r\n}","import {makeAutoObservable} from \"mobx\";\r\nimport AuthService, {IAuthResponse, IUser} from \"../service/AuthService\";\r\nimport {AxiosResponse} from \"axios\";\r\n\r\n\r\ninterface IMEStore {\r\n    me: IUser | null;\r\n}\r\n\r\nclass MeStore implements IMEStore {\r\n    me = {} as IUser;\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable ( this, {}, {deep: true} );\r\n    }\r\n\r\n    setMe(item: IUser | null) {\r\n        if (item) {\r\n            this.me = item;\r\n        } else {\r\n            this.me = {} as IUser\r\n        }\r\n    };\r\n\r\n    setAuthData(data: AxiosResponse<IAuthResponse, any>) {\r\n        localStorage.setItem ( 'token', data.data.accessToken );\r\n        this.setMe ( data.data.user );\r\n    }\r\n\r\n    async login(email: string, password: string) {\r\n        try {\r\n            const response = await AuthService.login ( email, password );\r\n            this.setAuthData ( response );\r\n        } catch (e: any) {\r\n            console.warn ( e.response?.data?.message );\r\n        }\r\n    };\r\n\r\n    async registration(email: string, password: string) {\r\n        try {\r\n            const response = await AuthService.registration ( email, password );\r\n            this.setAuthData ( response );\r\n        } catch (e: any) {\r\n            console.warn ( e.response?.data?.message );\r\n        }\r\n    };\r\n\r\n    async refresh() {\r\n        try {\r\n            const response = await AuthService.refresh ();\r\n            localStorage.setItem ( 'token', response.data.accessToken );\r\n            this.setMe ( response.data.user );\r\n        } catch (e: any) {\r\n            console.warn ( e.response?.data?.message );\r\n        }\r\n    };\r\n    async logout() {\r\n        try {\r\n            const response = await AuthService.logout();\r\n            this.setMe ( null );\r\n        } catch (e: any) {\r\n            console.warn ( e.response?.data?.message );\r\n        }\r\n    };\r\n\r\n}\r\n\r\nexport default MeStore;","import {Redirect, Route, Switch} from 'react-router-dom';\r\nimport * as React from \"react\";\r\nimport {privateRoutes, publicRoutes, ROUTES} from \"../../utils/routes\";\r\n\r\n\r\n\r\nconst AppRoute:React.FC = () => {\r\n\r\n    const isAuthorized = false\r\n\r\n    return isAuthorized ?\r\n        <Switch>\r\n            { privateRoutes.map ( ({path, Component}) => {\r\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\r\n            } ) }\r\n            <Redirect to={ROUTES. CHAT_ROUTE }/>\r\n        </Switch>\r\n        :\r\n        <Switch>\r\n            { publicRoutes.map ( ({path, Component}) => {\r\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\r\n            } ) }\r\n            <Redirect to={ ROUTES.JOIN_ROUTE }/>\r\n        </Switch>\r\n}\r\n\r\n\r\nexport default AppRoute;\r\n","import * as React from 'react';\r\nimport {useEffect, useState} from 'react';\r\nimport {NavBar} from \"../NavBar/NavBar\";\r\nimport './App.css';\r\nimport {Loader} from \"../Loader/Loader\";\r\nimport {HashRouter} from 'react-router-dom';\r\nimport ChatStore, {MESSAGE_ENUM} from \"../../state/chatStore\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {MyContext} from '../../state/context';\r\nimport MeStore from \"../../state/meStore\";\r\nimport {Chat} from \"../Chat/Chat\";\r\nimport AppRoute from \"../AppRoute/AppRoute\";\r\n\r\n\r\nconst App: React.FC = observer ( (props) => {\r\n    const [chat] = useState ( () => new ChatStore () );\r\n    const [me] = useState ( () => new MeStore () );\r\n    const [socket, setSocket] = useState<WebSocket | null> ( null );\r\n    const value = React.useMemo ( () => [chat, me, socket], [chat, me, socket] );\r\n\r\n\r\n    const connect = async () => {\r\n        chat.setLoading ( true );\r\n        setSocket ( await new WebSocket ( 'wss://ws-simple-chat-api.herokuapp.com' ) );\r\n        // setSocket ( await new WebSocket ( 'ws://localhost:5000' ) );\r\n    };\r\n\r\n    const isAuthorized = !!me.me.email;\r\n\r\n    useEffect ( () => {\r\n        if (localStorage.getItem ( 'token' )) {\r\n            me.refresh ();\r\n        }\r\n    }, [] );\r\n\r\n  useEffect ( () => {\r\n        if (!socket) {\r\n            connect()\r\n        }\r\n    }, [isAuthorized] );\r\n\r\n    if (socket) {\r\n        socket.onmessage = (messageEvent: MessageEvent) => {\r\n            chat.setMessages ( JSON.parse ( messageEvent.data ) );\r\n        };\r\n        socket.onopen = () => {\r\n            chat.setConnected ( true );\r\n            const message = {\r\n                event: MESSAGE_ENUM.CONNECTION,\r\n                id: me.me.id,\r\n                name: me.me.email,\r\n                body: '',\r\n            };\r\n            socket?.send ( JSON.stringify ( message ) );\r\n            chat.setLoading ( false );\r\n        };\r\n        socket.onmessage = (event: MessageEvent) => {\r\n            const messages = JSON.parse ( event.data );\r\n            chat.setMessages ( messages );\r\n        };\r\n        socket.onclose = () => {\r\n            chat.setConnected ( false );\r\n            const message = {\r\n                event: MESSAGE_ENUM.CONNECTION,\r\n                id: me.me.id,\r\n                name: me.me.email,\r\n                body: '',\r\n            };\r\n            socket.send ( JSON.stringify ( message ) );\r\n        };\r\n        socket.onerror = () => {\r\n            chat.setConnected ( false );\r\n            setTimeout ( () => connect (), 1000 );\r\n        };\r\n    }\r\n    if (chat.isLoading) return <Loader/>;\r\n\r\n\r\n    return (\r\n        <HashRouter>\r\n            <MyContext.Provider value={ value }>\r\n                <NavBar/>\r\n                { isAuthorized ?\r\n                    <Chat/>\r\n                    : <AppRoute/>\r\n                }\r\n            </MyContext.Provider>\r\n        </HashRouter>\r\n    );\r\n} );\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./components/App/App\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}