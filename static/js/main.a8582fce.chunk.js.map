{"version":3,"sources":["utils/const.ts","reportWebVitals.ts","utils/styles.ts","components/NavBar/styles.ts","components/Clock/styles.ts","utils/time.ts","components/Clock/Clock.tsx","components/Loader/Loader.tsx","components/Chat/styles.ts","components/Message/styles.ts","stores/chatStore.ts","http/chatApiInstance.ts","components/App/const.ts","service/AuthService.ts","stores/const.ts","utils/localStorage.ts","stores/meStore.ts","http/funFactApiInstance.ts","service/DayFactService.ts","service/WeatherService.ts","stores/utilityStore.ts","stores/settingsStore.ts","stores/wsStore.ts","stores/rootStore.ts","stores/StoresProvider/StoresProvider.tsx","components/Message/Message.tsx","components/Emoji/styles.ts","components/Emoji/Emoji.tsx","components/Chat/Chat.tsx","components/BasicJoinForm/styles.ts","components/BasicJoinForm/const.ts","components/common/LanguageSelect/LangSelect.tsx","components/common/LanguageSelect/styles.ts","components/common/CountrySelect/CountrySelect.tsx","components/common/CountrySelect/styles.ts","components/common/CitySelect/CitySelect.tsx","components/common/Badge/consts.ts","components/common/CitySelect/styles.ts","utils/hooks/useDebounce.tsx","components/common/LocationSelect/LocationSelect.tsx","components/common/CommonTextFileld/CommonTextField.tsx","components/common/CommonTextFileld/styles.ts","components/BasicJoinForm/BasicJoinForm.tsx","components/BasicJoinForm/validator.tsx","components/Login/styles.ts","components/Registration/styles.ts","components/JoinOptions/styles.ts","components/Profile/styles.ts","components/ProfileData/styles.ts","utils/routes.ts","components/common/Badge/Badge.tsx","components/common/Badge/styles.ts","components/ProfileData/ProfileDataTable.tsx","components/ProfileData/ProfileData.tsx","components/ProfileEdit/styles.ts","components/common/RadioButtons/RadioButtons.tsx","components/common/RadioButtons/styles.ts","components/ProfileEdit/ProfileEditForm.tsx","components/ProfileEdit/ProfileEdit.tsx","components/Profile/Profile.tsx","components/JoinOptions/JoinOptions.tsx","components/Login/Login.tsx","components/Registration/Registration.tsx","components/Weather/styles.ts","components/Weather/Weather.tsx","components/NavBar/NavBar.tsx","utils/selectors/historySelector.ts","components/AppRoute/AppRoute.tsx","i18n/locales.ts","i18n/messages.ts","components/App/App.tsx","components/App/theme/theme.ts","index.tsx"],"names":["SWITCHER","THEME","LS","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","title","fontFamily","fontSize","useStyles","makeStyles","display","gridAutoRows","justifyItems","minHeight","alignItems","textTransform","onlineCounter","color","buttonsWrapper","gridTemplateRows","rowGap","timeRoot","whiteSpace","getTime","date","getTwoDig","time","string","toString","length","hour","getHours","min","getMinutes","sec","getSeconds","timeConverter","UNIX_timestamp","a","Date","year","getFullYear","month","getMonth","getDate","Clock","props","children","useState","setTime","styles","useEffect","clearId","setTimeout","clearTimeout","className","Loader","Container","Grid","container","justifyContent","style","height","window","innerHeight","CircularProgress","messagesRoot","maxHeight","messages","width","backgroundColor","overflowY","newMessageRoot","position","textField","btn","border","weatherData","TABLE_WIDTH","MESSAGE_ENUM","mainBlock","minWidth","margin","borderRadius","maxWidth","padding","info","name","copy","cursor","opacity","top","ChatStore","rootStore","messageValue","isLoading","isConnected","connectionCounter","makeAutoObservable","this","deep","value","count","retryCount","baseURL","chatApiInstance","axios","create","withCredentials","interceptors","request","use","config","headers","Authorization","localStorage","getItem","TOKEN","response","error","originalRequest","status","_isRetry","get","setItem","data","accessToken","LANG","COUNTRY_RU","COUNTRY_EN","COUNTRY_CODE","AuthService","email","password","instance","post","values","country","language","city","delete","ME_ERROR_ENUM","COUNTRY_CODE_RU","COUNTRY_CODE_EN","LANG_OBJ","EN","Object","keys","RU","COUNTRY_OBJ_RU","COUNTRY_OBJ_EN","COUNTRY_CODE_OBJ","getLSData","key","MeStore","me","AUTH","item","toLowerCase","location","user","setMe","path","login","setAuthData","console","warn","message","registration","setError","refresh","logout","getLang","lang","saveLang","dayFactApiInstance","DayFactService","WeatherService","payload","chatInstance","UtilityStore","fact","weather","fetchFact","setFact","contents","fetchWeather","setWeather","SettingsStore","options","theme","LIGHT","weatherWidget","counterWidget","preparedOptions","JSON","stringify","OPTIONS","saveOptions","e","log","WSStore","socket","WebSocket","onclose","startSocket","onerror","onmessage","messageEvent","chatStore","setMessages","parse","onopen","setConnected","event","CONNECTION","id","meStore","body","send","setLoading","RootStore","utilityStore","settingStore","wsStore","StoreContext","createContext","StoreProvider","store","Provider","Message","observer","isMe","useContext","setConnectionCounter","marginLeft","marginRight","paddingRight","direction","MESSAGE","justifySelf","borderBottom","toUpperCase","onClick","navigator","clipboard","writeText","right","left","emojiRoot","zIndex","picker","Emoji","frameWidth","isShowEmoji","setIsShowEmoji","classNames","onBlur","native","groupNames","smileys_people","disableAutoFocus","onEmojiClick","emojiObject","setMessageValue","emoji","skinTone","SKIN_TONE_MEDIUM_DARK","Button","Chat","chatRef","useRef","formik","useFormik","initialValues","onSubmit","trim","now","sendMessage","messagesLength","current","scrollTo","scrollHeight","scrollToBottom","handleSubmit","ref","map","mes","TextField","label","variant","autoComplete","onChange","currentTarget","clientWidth","type","root","marginTop","selectWrapper","alignContent","alert","fieldWrapper","validatorMessage","LANG_FORM_PROP","COUNTRY_FORM_PROP","BY","UA","LANGUAGE","COUNTRY","RU_RU","BY_RU","UA_RU","RU_EN","BY_EN","UA_EN","COUNTRY_ITEMS","COUNTRY_COMPLIMENTARY","withStyles","table","isTable","classes","gap","FormControl","fullWidth","InputLabel","Select","labelId","defaultValue","MenuItem","setValues","currentValue","setCurrentValue","includes","Colors","countryValue","setCity","filteredData","setFilteredData","debouncedValue","delay","setDebouncedValue","handler","useDebounce","getCityList","filter","splice","required","onKeyPress","onCity","LocationSelect","createStyles","inputProps","Box","Grow","in","Alert","severity","BasicJoinForm","withOptions","submitButtonText","showAlert","onCloseAlert","validate","errors","onClose","transformOrigin","timeout","handleChange","form","disabled","isValid","dirty","gridTemplateColumns","columnGap","profileDataRoot","tableRoot","test","ROUTES","Badge","React","forwardRef","statusClass","colorClass","classNameProp","rest","successStyles","fontWeight","lineHeight","WARNING","SUCCESS","SUCCEEDED","INFO","FAILED","memo","ProfileDataTable","isActivated","Table","TableBody","TableRow","TableCell","align","ON","OFF","ProfileData","onEdit","Typography","contentWrapper","paddingBottom","RadioGroup","row","o","FormControlLabel","control","Radio","commonRradioOptions","colorOptions","DART","ProfileEditForm","colorScheme","ProfileEdit","toProfile","setOptions","Profile","isEdit","setIsEdit","toEdit","useCallback","publicRoutes","JOIN_ROUTE","Component","to","REGISTRATION_ROUTE","size","LOGIN_ROUTE","history","useHistory","push","CHAT_ROUTE","timeOutId","setShowAlert","onShowAlert","privateRoutes","PROFILE_ROUTE","description","iconWrapper","icon","Weather","src","Math","ceil","main","temp","feels_like","NavBar","isAuthorized","isLoginPage","pathname","isLJoinPage","isProfilePage","isChatPage","pageSelector","useLocation","toLogout","AppBar","elevation","AppRoute","component","exact","LOCALES","ru","en","App","connect","readSocket","defaultLocale","locale","createTheme","palette","primary","secondary","bg","light","text","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.a8582fce.chunk.js","sourcesContent":["import data from \"./city.list.json\"\n\nexport const MOBIL = 520;\nexport const weatherData = data as IWeatherOption[]\n\nexport const TABLE_WIDTH = 400;\n\ninterface IWeatherOption {\n    \"id\": number,\n    \"name\": string,\n    \"state\": string,\n    \"country\": string,\n    \"coord\": {\n        \"lon\": number,\n        \"lat\": number\n    }\n};\n\nexport enum SWITCHER {\n    ON = 'on',\n    OFF = 'of'\n};\n\nexport enum THEME {\n    LIGHT = 'light',\n    DART = 'dark'\n}\n\nexport enum LS {\n    OPTIONS = \"OPTIONS\",\n    TOKEN = 'token',\n    LANG = 'lang'\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const title = {\n        fontFamily:'monospace',\n        fontSize:'1.75rem'\n}\n","import { makeStyles } from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\nexport const useStyles = makeStyles({\n    title: {\n        display:\"grid\",\n        // gridTemplateRows:'1fr 1fr',\n        gridAutoRows:'auto',\n        justifyItems:\"center\",\n        minHeight:90,\n        alignItems:'center',\n        '&>div:first-child':{\n            ...title,\n            textTransform:\"uppercase\",\n        }\n    },\n    onlineCounter:{\n        color:\"grey\"\n    },\n    buttonsWrapper:{\n        display:'grid',\n        gridTemplateRows: '1fr 1fr',\n        rowGap:'10px'\n    },\n\n});","import { makeStyles } from '@mui/styles';\n\n\nexport const useStyles = makeStyles({\n    timeRoot:{\n       fontSize:'1rem',\n        fontFamily:\"monospace\",\n        color:'gray',\n        whiteSpace:'nowrap'\n    },\n});","\n\n\nexport const getTime = (date:Date) => {\n    const getTwoDig = (time:number) => {\n        const string = time.toString()\n        return string.length > 1 ? string : `0${string}`\n    }\n    const hour = getTwoDig(date.getHours())\n    const min = getTwoDig(date.getMinutes())\n    const sec = getTwoDig(date.getSeconds())\n    return `${ hour }: ${min }: ${ sec }`\n}\n\nconst timeFromUnix = (date:number) => {\n    return new Date(date * 1000)\n}\n\nexport const getDate = (date:number) => {\n    const fullDate = timeFromUnix(date)\n    const year = fullDate.getFullYear()\n    const month = fullDate.getMonth()\n    const day = fullDate.getDay()\n    return `${ year }: ${month }: ${ day }`\n}\nexport const timeConverter = (UNIX_timestamp:number) => {\n    // weird\n    const a = new Date(UNIX_timestamp / 1000);\n    const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    const year = a.getFullYear();\n    const month = months[a.getMonth()];\n    const date = a.getDate();\n    const hour = a.getHours();\n    const min = a.getMinutes();\n    const sec = a.getSeconds();\n    const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\n    return time;\n}","import * as React from 'react';\nimport {LegacyRef, useEffect, useRef, useState} from 'react';\nimport {useStyles} from './styles'\nimport {getTime} from \"../../utils/time\";\n\n\ninterface IProps {\n}\n\nexport const Clock: React.FC<IProps> = (props) => {\n    const {children} = props;\n    const [time, setTime] = useState ( new Date () );\n    const styles = useStyles();\n\n\n    useEffect ( () => {\n        const clearId = setTimeout ( () => setTime ( new Date () ), 1000 );\n        return () => clearTimeout ( clearId );\n    }, [time] );\n\n    return (\n        <div className={styles.timeRoot}>\n            { getTime(time)}\n        </div>\n    );\n};","// @flow\nimport {CircularProgress, Container, Grid} from '@mui/material';\nimport * as React from 'react';\n\n\ntype Props = {\n\n};\nexport const Loader = (props: Props) => {\n    return (\n        <Container>\n            <Grid container alignItems={\"center\"} justifyContent={\"center\"} style={{height: window.innerHeight-30}}>\n                    <CircularProgress color=\"primary\" />\n            </Grid>\n        </Container>\n    );\n};","import {makeStyles} from \"@mui/styles\";\n\nexport const useStyles = makeStyles({\n    messagesRoot: {\n        maxHeight: window.innerHeight - 30\n    },\n    messages: {\n        width: '100%',\n        height: '70vh',\n        backgroundColor: '#354765',\n        overflowY: 'auto'\n    },\n    newMessageRoot: {\n        position: 'relative',\n        width: '100%',\n        rowGap: 20,\n        color: '#ffffff'\n    },\n    textField:{\n        width:'80%'\n    },\n    btn:{\n        \"&.MuiButton-contained\": {\n            backgroundColor: '#3a64a8',\n            border:'none',\n            color: '#ffffff',\n            width:'20%',\n            height:56,\n            '&:hover':{\n                backgroundColor: '#7094d2',\n                color: '#354765',\n            }\n        },\n    }\n})","import { makeStyles } from '@mui/styles';\nimport {MOBIL} from \"../../utils/const\";\n\n\nexport const useStyles = makeStyles({\n    mainBlock:{\n        minWidth: '40vw',\n        margin: 10,\n        borderRadius: '4%',\n        maxWidth: '60%',\n        width: 'fit-content',\n        padding: 15,\n        display: 'grid',\n        justifyContent:'flexStart',\n        rowGap: 20,\n        fontFamily: 'serif',\n        position:'relative'\n    },\n    info: {\n        color:'#afbed2',\n        margin:'20px 30px'\n    },\n    name:{\n        display:'block',\n        maxWidth:'max-content'\n    },\n    copy:{\n        cursor:\"pointer\",\n        position:\"absolute\",\n        opacity:0.7,\n        top:8\n\n    },\n    date:{\n        fontSize:'0.7em'\n    },\n    [`@media (max-width:${MOBIL}px)`]: {\n        mainBlock:{\n            minWidth: '70vw',\n            fontSize: '1.4em'\n        },\n    }\n});","import {makeAutoObservable} from \"mobx\";\nimport {RootStore} from \"./rootStore\";\n\n\nexport enum MESSAGE_ENUM {\n    MESSAGE = 'message',\n    QUIT = 'quit',\n    CONNECTION = 'connection'\n}\n\n\nexport interface IMessage {\n    event: MESSAGE_ENUM;\n    id: string;\n    name: string;\n    body: string;\n    connectionCounter: number;\n}\n\n\ninterface IChat {\n    messages: IMessage[];\n    messageValue: string;\n    isLoading: boolean;\n    isConnected: boolean;\n    connectionCounter?: number;\n    setConnected: (isConnected: boolean) => void;\n    setLoading: (isLoading: boolean) => void;\n    setMessageValue: (value: string) => void;\n    setMessages: (messages: any) => void;\n}\n\nclass ChatStore implements IChat {\n    messages = [] as IMessage[];\n    messageValue = '';\n    isLoading = false;\n    isConnected = false;\n    connectionCounter = 0;\n    rootStore;\n\n    constructor(rootStore:ThisType<RootStore>) {\n        makeAutoObservable(this, { rootStore: false },{deep: true})\n        this.rootStore = rootStore\n    }\n\n\n    setConnected(isConnected: boolean) {\n        this.isConnected = isConnected;\n    };\n\n    setLoading(isLoading: boolean) {\n        this.isLoading = isLoading;\n    };\n\n    setMessageValue(value: string) {\n        this.messageValue = value;\n    };\n\n    setMessages(messages: any) {\n        this.messages =  [...this.messages,...messages, ];\n\n    };\n\n    setConnectionCounter(count: number) {\n        this.connectionCounter = count;\n    };\n}\n\nexport default ChatStore;","import axios from \"axios\";\nimport {IUser} from \"../service/AuthService\";\nimport {LS} from \"../utils/const\";\n\n\nlet retryCount = 0\n// const baseURL = 'http://localhost:5000';\nconst baseURL = 'https://ws-simple-chat-api.herokuapp.com/';\n\nconst chatApiInstance = axios.create({\n    withCredentials: true,\n    baseURL\n});\n\n\nchatApiInstance.interceptors.request.use((config)=>{\n    if ( config && config.headers) {\n        config.headers.Authorization = `Bearer ${ localStorage.getItem ( LS.TOKEN ) }`;\n        return config\n    }\n});\n\nchatApiInstance.interceptors.response.use((config) => {\n    return config;\n}, async (error) => {\n    const originalRequest = error.config;\n    if (error.response.status === 401) {\n        originalRequest._isRetry = true;\n        try {\n            if (retryCount > 2) {\n                return ;\n            }\n            retryCount ++\n            const response = await chatApiInstance.get<AuthResponse>(`${baseURL}/auth/refresh`)\n            localStorage.setItem(LS.TOKEN, response.data.accessToken);\n            return await chatApiInstance.request(originalRequest);\n        } catch (e) {\n            return\n        }\n    }\n    throw error;\n});\n\n\nexport default chatApiInstance;\n\nexport interface AuthResponse {\n    accessToken: string;\n    refreshToken: string;\n    user: IUser;\n}","export enum LANG {\n    EN = 'en',\n    RU = 'ru'\n};\n\nexport enum COUNTRY_RU {\n    UA = 'Украина',\n    RU = 'Россия',\n    BY = 'Белорусия',\n};\nexport enum COUNTRY_EN {\n    UA = 'Ukraine',\n    RU = 'Russia',\n    BY = 'Belarus',\n};\n\nexport enum COUNTRY_CODE {\n    'Украина' = 'ua',\n    'Россия' = 'ru',\n    'Белорусия' = 'by',\n    'Ukraine' = 'ua',\n    'Russia' = 'ru',\n    'Belarus' = 'by',\n};\nexport const COUNTRY_CODE_RU = {\n    ['ua']: 'Украина',\n    ['ru']: 'Россия',\n    ['by']: 'Белорусия',\n};\nexport const COUNTRY_CODE_EN = {\n    ['ua']: 'Ukraine',\n    ['ru']: 'Russia',\n    ['by']: 'Belarus',\n};\n\nexport const COUNTRY_LANG_OBJ = {\n    [LANG.EN]:Object.keys(COUNTRY_EN),\n    [LANG.RU]:Object.keys(COUNTRY_RU),\n}\nexport const LANG_OBJ = Object.create(LANG);\nexport const COUNTRY_OBJ_RU = Object.create(COUNTRY_RU);\nexport const COUNTRY_OBJ_EN = Object.create(COUNTRY_EN);\nexport const COUNTRY_CODE_OBJ = Object.create(COUNTRY_CODE);\n\nexport type CountryCodeType = 'ua' | 'ru' | 'by'\n","import {AxiosResponse} from \"axios\";\nimport instance from \"../http/chatApiInstance\";\nimport {IJoinFormValues} from \"../components/BasicJoinForm/BasicJoinForm\";\nimport {LANG} from \"../components/App/const\";\n\n\nexport default class AuthService {\n    static async login(email: string, password: string): Promise<AxiosResponse<IAuthResponse>> {\n        return instance.post ( 'auth/login', {email, password} );\n    }\n\n    static async registration(values:IJoinFormValues): Promise<AxiosResponse<IAuthResponse>> {\n        const {password,name,country,language,city,email} = values;\n        return instance.post ( 'auth/registration', {email,password,name,country,language,city} );\n    }\n\n    static async logout(): Promise<void> {\n        return instance.delete ( 'auth/logout' );\n    }\n    static async refresh(): Promise<AxiosResponse<IAuthResponse>> {\n        return instance.get ( 'auth/refresh');\n    }\n}\n\nexport interface IAuthResponse {\n    accessToken: string;\n    refreshToken: string;\n    user: IUser;\n}\n\nexport interface IUser {\n    email: string;\n    name: string;\n    language: LANG | null;\n    location:ILocation\n    id: string;\n    isActivated: boolean;\n\n}\n\nexport interface ILocation {country:string ,city:string}","export enum ME_ERROR_ENUM  {\n    AUTH = \"AUTH\",\n}","import {LS} from \"./const\";\n\nexport const getLSData = (key: LS) => {\n    const data = localStorage.getItem(key);\n    if (data) {\n        return data\n    }\n    return ''\n}\n","import {makeAutoObservable, observable} from \"mobx\";\nimport AuthService, {IAuthResponse, IUser} from \"../service/AuthService\";\nimport {AxiosResponse} from \"axios\";\nimport {IJoinFormValues} from \"../components/BasicJoinForm/BasicJoinForm\";\nimport {COUNTRY_CODE_EN, COUNTRY_CODE_RU, CountryCodeType, LANG} from \"../components/App/const\";\nimport {getLSData} from \"../utils/localStorage\";\nimport {LS} from \"../utils/const\";\nimport {ME_ERROR_ENUM} from \"./const\";\nimport {RootStore} from \"./rootStore\";\n\n\ninterface IMEStore {\n    me: IUser | null;\n    error: { [key in ME_ERROR_ENUM]: string };\n}\n\nclass MeStore implements IMEStore {\n\n    me = {\n        language: null,} as IUser;\n    error = {\n        [ME_ERROR_ENUM.AUTH]: ''};\n    rootStore;\n\n\n    constructor(rootStore:ThisType<RootStore>) {\n        makeAutoObservable(this, { rootStore: false },{deep: true})\n        this.rootStore = rootStore\n    }\n\n    setMe(item: IUser | null) {\n        if (item) {\n            this.me = {\n                ...item,\n                language: item.language?.toLowerCase() as LANG,\n                location: {\n                    ...item.location,\n                    country: item.language === 'ru'\n                        ? COUNTRY_CODE_RU[item.location.country as CountryCodeType]\n                        : COUNTRY_CODE_EN[item.location.country as CountryCodeType]\n                }\n            };\n        } else {\n            this.me = {} as IUser\n        }\n    };\n\n    setAuthData(data: AxiosResponse<IAuthResponse, any>) {\n        localStorage.setItem(LS.TOKEN, data.data.accessToken);\n        data.data.user.language && localStorage.setItem(LS.LANG, data.data.user.language.toLowerCase());\n        this.setMe(data.data.user);\n    }\n\n    setError(path: ME_ERROR_ENUM, error: string) {\n        this.error[path] = error;\n    }\n\n    async login(email: string, password: string) {\n        try {\n            const response = await AuthService.login(email, password);\n            this.setAuthData(response);\n        } catch (e: any) {\n            console.warn(e.response?.data?.message);\n        }\n    };\n\n    async registration(values: IJoinFormValues) {\n        const {password, name, country, language, city, email} = values;\n        try {\n            const response = await AuthService.registration({password, email, name, country, language, city});\n            this.setAuthData(response);\n        } catch (e: any) {\n            this.setError(ME_ERROR_ENUM.AUTH,e)\n        }\n    };\n\n    async refresh() {\n        try {\n            const response = await AuthService.refresh();\n            localStorage.setItem('token', response.data.accessToken);\n            this.setMe(response.data.user);\n        } catch (e: any) {\n            console.warn(e.response?.data?.message);\n        }\n    };\n\n    async logout() {\n        try {\n            const response = await AuthService.logout();\n            this.setMe(null);\n            this.getLang()\n        } catch (e: any) {\n            console.warn(e.response?.data?.message);\n        }\n    };\n\n    saveLang(lang: LANG | string) {\n        this.me.language = lang ? lang as LANG : LANG.EN;\n    };\n\n    getLang() {\n        const lang = getLSData(LS.LANG);\n        this.saveLang(lang)\n    };\n\n}\n\nexport default MeStore;","import axios from \"axios\";\n\n\nconst baseURL = 'http://api.fungenerators.com/fact/';\nconst dayFactApiInstance = axios.create({baseURL});\nexport default dayFactApiInstance;\n\n","import {AxiosResponse} from \"axios\";\nimport instance from \"../http/funFactApiInstance\";\n\n\nexport default class DayFactService {\n    static async fetchFact(): Promise<AxiosResponse<IDayFactResponse>> {\n        return instance.get ('random',)\n    }\n\n}\n\ninterface IDayFactResponse {\n    \"success\": {\n        total: number\n    },\n    \"contents\": {\n        fact: string,\n        id: string,\n        category: string,\n        subcategory: string\n    }\n}\n","import {AxiosResponse} from \"axios\";\nimport chatInstance from '../http/chatApiInstance'\nimport {ILocation} from \"./AuthService\";\nimport {LANG} from \"../components/App/const\";\n\n\nexport default class WeatherService {\n    static async fetchWeather(payload:{location: ILocation, language: LANG | null}): Promise<AxiosResponse<IWeatherResponse>> {\n        return chatInstance.post(`/utils/weather`, {\n            ...payload\n        })\n    }\n\n}\n\nexport interface IWeatherResponse {\n    \"coord\": {\n        \"lon\": number,\n        \"lat\": number\n    },\n    \"weather\": [\n        {\n            \"id\": number,\n            \"main\": string,\n            \"description\": string,\n            \"icon\": string\n        }\n    ],\n    \"base\": string,\n    \"main\": {\n        \"temp\": number,\n        \"pressure\": number,\n        \"humidity\": number,\n        \"temp_min\": number,\n        \"temp_max\": number\n        \"feels_like\": number\n    },\n    \"visibility\": number,\n    \"wind\": {\n        \"speed\": number,\n        \"deg\": number\n    },\n    \"clouds\": {\n        \"all\": number\n    },\n    \"dt\": number,\n    \"sys\": {\n        \"type\": number,\n        \"id\": number,\n        \"message\": number,\n        \"country\": string,\n        \"sunrise\": number,\n        \"sunset\": number\n    },\n    \"id\": number,\n    \"name\": string,\n    \"cod\": number\n}\n\n","import {makeAutoObservable} from \"mobx\";\nimport DayFactService from \"../service/DayFactService\";\nimport WeatherService, {IWeatherResponse} from \"../service/WeatherService\";\nimport {ILocation} from \"../service/AuthService\";\nimport {LANG} from \"../components/App/const\";\nimport {RootStore} from \"./rootStore\";\n\n\ninterface IUtilityStore {\n    fact:string\n    weather:IWeatherResponse\n}\n\nclass UtilityStore implements IUtilityStore {\n    fact = '';\n    weather = {} as IWeatherResponse;\n    rootStore;\n\n\n    constructor(rootStore:ThisType<RootStore>) {\n        makeAutoObservable(this, { rootStore: false },{deep: true})\n        this.rootStore = rootStore\n    }\n\n    setFact(item: string) {\n        if (item) {\n            this.fact = item;\n        } else {\n            this.fact = ''\n        }\n    };\n    setWeather(item: IWeatherResponse) {\n        if (item) {\n            this.weather = item;\n        } else {\n            this.weather = {} as IWeatherResponse\n        }\n    };\n\n    async fetchFact() {\n        try {\n            const response = await DayFactService.fetchFact();\n            this.setFact ( response.data.contents.fact );\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n async fetchWeather(payload: { location: ILocation, language: LANG | null }) {\n        try {\n            const response = await WeatherService.fetchWeather(payload);\n            this.setWeather(response.data) ;\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n\n\n}\n\nexport default UtilityStore;","import {makeAutoObservable} from \"mobx\";\nimport {LS, THEME} from \"../utils/const\";\nimport {getLSData} from \"../utils/localStorage\";\nimport {RootStore} from \"./rootStore\";\n\n\nexport interface ISettingsStore {\n    options:IOptions\n}\n\nexport interface IOptions {\n    theme:THEME;\n    weatherWidget: boolean\n    counterWidget: boolean\n}\n\nclass SettingsStore implements ISettingsStore {\n    options = {\n        theme : THEME.LIGHT,\n        weatherWidget : true,\n        counterWidget : true,\n    };\n    rootStore;\n\n\n    constructor(rootStore:ThisType<RootStore>) {\n        makeAutoObservable(this, { rootStore: false },{deep: true})\n        this.rootStore = rootStore\n    }\n\n    saveOptions(options: any) {\n        const preparedOptions = JSON.stringify(options)\n        localStorage.setItem(LS.OPTIONS,preparedOptions);\n    };\n    setOptions(options:IOptions) {\n        if (options) {\n            this.saveOptions(options)\n            this.options = options;\n        } else {\n            this.options = {\n                theme : THEME.LIGHT,\n                weatherWidget : true,\n                counterWidget : true,\n            }\n        }\n    };\n    async getOption() {\n        try {\n            const options = getLSData(LS.OPTIONS);\n            this.saveOptions(options)\n        }\n       catch (e) {\n           console.log(e)\n       }\n    };\n\n}\n\nexport default SettingsStore;","import {action, makeAutoObservable, observable} from \"mobx\";\nimport {RootStore} from \"./rootStore\";\nimport {MESSAGE_ENUM} from \"./chatStore\";\n\n\nexport interface IWSStore {\n    socket: WebSocket | undefined;\n\n}\n\nclass WSStore implements IWSStore {\n\n    socket: WebSocket | undefined;\n    rootStore;\n\n\n    constructor(rootStore: RootStore) {\n        makeAutoObservable(this, {rootStore: false}, )\n        this.rootStore = rootStore\n    }\n\n\n    async startSocket() {\n        this.socket = await new WebSocket(\"wss://ws-simple-chat-api.herokuapp.com\");\n        // this.socket = new WebSocket(\"wss://localhost:5000\" );\n        this.socket.onclose = () => setTimeout(() => this.startSocket(), 1000);\n        this.socket.onerror = () => setTimeout(() => this.startSocket(), 1000);\n    }\n\n    readSocket() {\n        if ( this.socket) {\n            this.socket.onmessage = (messageEvent: MessageEvent) => {\n                this.rootStore.chatStore.setMessages(JSON.parse(messageEvent.data));\n            };\n            this.socket.onopen = () => {\n                this.rootStore.chatStore.setConnected(true);\n                const message = {\n                    event: MESSAGE_ENUM.CONNECTION,\n                    id: this.rootStore.meStore.me.id,\n                    name: this.rootStore.meStore.me.email,\n                    body: this.rootStore.meStore.me.email,\n                };\n                this.socket?.send(JSON.stringify(message));\n                this.rootStore.chatStore.setLoading(false);\n            };\n            this.socket.onmessage = (event: MessageEvent) => {\n                const messages = JSON.parse(event.data);\n                this.rootStore.chatStore.setMessages(messages);\n            };\n            this.socket.onclose = () => {\n                this.rootStore.chatStore.setConnected(false);\n                const message = {\n                    event: MESSAGE_ENUM.CONNECTION,\n                    id: this.rootStore.meStore.me.id,\n                    name: this.rootStore.meStore.me.email,\n                    body: '',\n                };\n                this.socket?.send(JSON.stringify(message));\n            };\n        }\n\n\n    }\n\n}\n\nexport default WSStore;","import ChatStore from \"./chatStore\";\nimport MeStore from \"./meStore\";\nimport UtilityStore from \"./utilityStore\";\nimport SettingsStore from \"./settingsStore\";\nimport WSStore from \"./wsStore\";\n\nexport class RootStore {\n    meStore: MeStore;\n    utilityStore: UtilityStore;\n    settingStore: SettingsStore;\n    chatStore: ChatStore;\n    wsStore: WSStore;\n\n    constructor() {\n        this.meStore = new MeStore(this)\n        this.utilityStore = new UtilityStore(this)\n        this.settingStore = new SettingsStore(this)\n        this.chatStore = new ChatStore(this)\n        this.wsStore = new WSStore(this)\n    }\n}","import React, {FC, createContext, ReactNode, ReactElement} from 'react';\nimport {RootStore} from '../rootStore';\n\nexport const StoreContext = createContext<RootStore>({} as RootStore);\n\nexport type StoreComponent = FC<{\n    children: ReactNode;\n}>;\n\nexport const StoreProvider: StoreComponent = ({children}): ReactElement => {\n    const store = new RootStore()\n    return (\n        <StoreContext.Provider value={store}>{children}</StoreContext.Provider>\n    )\n}","import * as React from 'react';\nimport {useContext} from 'react';\nimport {Grid} from \"@mui/material\";\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport {useStyles} from \"./styles\";\nimport {MESSAGE_ENUM} from \"../../stores/chatStore\";\nimport {observer} from \"mobx-react-lite\";\nimport {timeConverter} from \"../../utils/time\";\nimport {FormattedMessage} from \"react-intl\";\nimport {StoreContext} from \"../../stores/StoresProvider/StoresProvider\";\n\n\ntype Props = {\n    isMe: boolean;\n    message: any;\n};\nexport const Message: React.FC<Props> = observer((props) => {\n    const {isMe, message} = props;\n    const {chatStore} = useContext(StoreContext);\n    const styles = useStyles();\n    const onCopy = () => navigator.clipboard.writeText(message.body)\n    if (message.event === MESSAGE_ENUM.CONNECTION) {\n        chatStore.setConnectionCounter(message.connectionCounter);\n    }\n    const style = {\n        backgroundColor: isMe ? '#3a64a8' : '#536f9b',\n        color: isMe ? '#f6dbaa' : '#eee4cc',\n        marginLeft: isMe ? 'auto' : '10%',\n        marginRight: isMe ? '10%' : 0,\n        paddingRight: 10\n\n    };\n\n    return (\n        <Grid direction={\"column\"} container>\n            {message.event === MESSAGE_ENUM.MESSAGE\n                ? <div className={styles.mainBlock} style={style}>\n                    <h3 className={styles.name}\n                        style={\n                            {\n                                justifySelf: `${!isMe && 'flex-end'}`,\n                                borderBottom: `2px solid ${isMe ? '#f6dbaa' : '#eee4cc'}`\n                            }\n                        }>\n                        {message.name?.toUpperCase()}\n                    </h3>\n                    <span>{message.body}</span>\n                    <span className={styles.date}>{timeConverter(message.date * 1000)}</span>\n                    <div onClick={onCopy} style={isMe ? {right: 2} : {left: 6}\n                    } title={'скопировать сообщение'} className={styles.copy}>\n                        <ContentCopyIcon/>\n                    </div>\n                </div>\n                : message.event === MESSAGE_ENUM.CONNECTION\n                    ? <span className={styles.info}>\n                        {message.name} {'\\u00A0'}\n                        <FormattedMessage id={'chat.message.join'}/>\n                        </span>\n                    : <span className={styles.info}>{message.name}  {'\\u00A0'}\n                        <FormattedMessage id={'chat.message.out'}/>\n                    </span>\n            }\n        </Grid>\n    );\n});","import {makeStyles} from \"@mui/styles\";\n\nexport const useStyles = makeStyles({\n    emojiRoot: {\n        position: \"absolute\",\n        zIndex: 1,\n        top: 10,\n\n    },\n\n    picker:{\n        top:-350\n    },\n\n})","import * as React from 'react';\nimport {useContext, useState} from 'react';\nimport classNames from \"classnames\";\nimport Picker, {SKIN_TONE_MEDIUM_DARK} from \"emoji-picker-react\";\nimport {Button} from \"@mui/material\";\nimport EmojiEmotionsIcon from \"@mui/icons-material/EmojiEmotions\";\nimport {useStyles} from \"./styles\";\nimport {observer} from \"mobx-react-lite\";\nimport {StoreContext} from \"../../stores/StoresProvider/StoresProvider\";\n\n\n\ninterface IProps  {\n    frameWidth?:number\n}\n\nexport const Emoji: React.FC<IProps> = observer((props) => {\n    const {children,frameWidth = 0} = props;\n    const {chatStore} = useContext(StoreContext);\n    const styles = useStyles ();\n    const [isShowEmoji, setIsShowEmoji] = useState ( false );\n    const showImoji = () => setIsShowEmoji ( true );\n    const hideImoji = () => setIsShowEmoji ( false );\n    const onEmojiClick = (event: any, emojiObject: any) => {\n        chatStore.setMessageValue ( emojiObject.emoji ) ;\n    };\n    return (\n        <div style={{right:`${frameWidth * 0.2}px`}} className={ classNames ( styles.emojiRoot, {[styles.picker]: isShowEmoji} ) }\n             onBlur={ hideImoji }>\n            { isShowEmoji\n                ? <Picker native groupNames={ {smileys_people: \"PEOPLE\"} } disableAutoFocus={ true }\n                          onEmojiClick={ onEmojiClick } skinTone={ SKIN_TONE_MEDIUM_DARK }/>\n                : <Button onClick={ showImoji }><EmojiEmotionsIcon/></Button> }\n        </div>\n    );\n});","import * as React from 'react';\nimport {useContext, useEffect, useRef} from 'react';\nimport {Button, Container, Grid, TextField} from '@mui/material';\nimport {Loader} from \"../Loader/Loader\";\nimport {useStyles} from \"./styles\";\nimport {Message} from \"../Message/Message\";\nimport {Emoji} from \"../Emoji/Emoji\";\nimport {observer} from \"mobx-react-lite\";\nimport {IMessage} from '../../stores/chatStore';\nimport {useFormik} from 'formik';\nimport {FormattedMessage} from \"react-intl\";\nimport {StoreContext} from \"../../stores/StoresProvider/StoresProvider\";\nimport {toJS} from \"mobx\";\n\n\ntype Props = {}\n\n\nexport const Chat: React.FC<Props> = observer ( ((props) => {\n    const {chatStore,meStore,wsStore} = useContext ( StoreContext );\n    const chatRef = useRef<HTMLDivElement> ( null );\n    const styles = useStyles ();\n    const sendMessage = () => {\n        if (!chatStore.messageValue.trim ()) return;\n        const message = {\n            event: 'message',\n            id: Date.now ().toString (),\n            name: meStore.me.email,\n            body: chatStore.messageValue,\n        };\n        wsStore.socket?.send ( JSON.stringify ( message ) );\n        chatStore.setMessageValue ( '' );\n    };\n\n    const formik = useFormik ( {\n        initialValues: {\n            message: 'введите сообщение',\n        },\n        onSubmit: (values) => sendMessage (),\n    } );\n\n    const messagesArray = chatStore.messages;\n    const messagesLength = messagesArray.length;\n\n    const scrollToBottom = () => {\n        chatRef.current?.scrollTo ( 0, chatRef.current.scrollHeight );\n    };\n\n    useEffect ( () => {\n        scrollToBottom ();\n    } );\n    if (chatStore.isLoading) return <Loader/>;\n    return (\n        <Container>\n            <form onSubmit={ formik.handleSubmit }>\n                <Grid container className={ styles.messagesRoot } alignItems={ \"center\" }>\n                    <Grid ref={ chatRef } className={ styles.messages }>\n                        { messagesLength && chatStore.messages.map ( (mes: IMessage) => {\n                            const isMe = meStore.me.email === mes.name;\n                            return <Message key={ mes.id } isMe={ isMe } message={ mes }/>;\n                        } ) }\n                    </Grid>\n                </Grid>\n                <Grid className={ styles.newMessageRoot } container direction={ 'row' } alignItems={ 'flex-end' }>\n                    <TextField id={ 'message' } name={ 'message' } label={ <FormattedMessage id={'message.label'}/> } variant=\"filled\"\n                               autoComplete={ 'off' } onChange={ e => chatStore.setMessageValue ( e.currentTarget.value ) }\n                               value={ chatStore.messageValue } className={ styles.textField }\n                    />\n                    <Emoji frameWidth={ chatRef.current?.clientWidth }/>\n                    <Button type={ 'submit' } variant={ \"contained\" } className={styles.btn}>\n                        <strong>\n                        <FormattedMessage id={'button.message.send'}/>\n                        </strong>\n                    </Button>\n                </Grid>\n            </form>\n        </Container>\n    );\n}) );","import {makeStyles} from \"@mui/styles\";\n\n\nexport const useStyles = makeStyles ( {\n    root: {\n        marginTop: '5%',\n        position: 'relative',\n\n    },\n    selectWrapper:{\n        maxWidth:200,\n        alignContent:\"center\"\n    },\n    alert: {\n        position: \"absolute\",\n        width: 300,\n        right:'25%',\n        opacity:0.7,\n        zIndex: 0,\n        top:'5%',\n\n    },\n    fieldWrapper:{\n        position:'relative'\n    },\n    validatorMessage:{\n        position: \"absolute\",\n        top:0,\n        right:'-124px',\n        width:120\n    }\n} );","import {LANG_OBJ, COUNTRY_OBJ_RU, COUNTRY_OBJ_EN, LANG} from \"../App/const\";\n\nexport const LANG_FORM_PROP: ILangForm = {\n    10: LANG_OBJ.RU,\n    20: LANG_OBJ.EN,\n\n}\nexport const COUNTRY_FORM_PROP: ICountryForm = {\n    10: COUNTRY_OBJ_RU.RU,\n    20: COUNTRY_OBJ_RU.BY,\n    30: COUNTRY_OBJ_RU.UA,\n    40: COUNTRY_OBJ_EN.RU,\n    50: COUNTRY_OBJ_EN.BY,\n    60: COUNTRY_OBJ_EN.UA,\n\n}\n\nexport const LANGUAGE = {\n    RU: LANG_FORM_PROP[\"10\"],\n    EN: LANG_FORM_PROP[\"20\"]\n}\nexport const COUNTRY = {\n    RU_RU: COUNTRY_FORM_PROP[\"10\"],\n    BY_RU: COUNTRY_FORM_PROP[\"20\"],\n    UA_RU: COUNTRY_FORM_PROP[\"30\"],\n    RU_EN: COUNTRY_FORM_PROP[\"40\"],\n    BY_EN: COUNTRY_FORM_PROP[\"50\"],\n    UA_EN: COUNTRY_FORM_PROP[\"60\"]\n}\n\n\nexport const COUNTRY_ITEMS:ICountryItems = {\n    [LANG.RU]:[COUNTRY.RU_RU, COUNTRY.UA_RU, COUNTRY.BY_RU],\n    [LANG.EN]:[COUNTRY.RU_EN, COUNTRY.UA_EN, COUNTRY.BY_EN]\n}\nexport const COUNTRY_COMPLIMENTARY = {\n    [COUNTRY.RU_RU]:COUNTRY.RU_EN,\n    [COUNTRY.UA_RU]:COUNTRY.UA_EN,\n    [COUNTRY.BY_RU]:COUNTRY.BY_EN,\n    [COUNTRY.RU_EN]:COUNTRY.RU_RU,\n    [COUNTRY.UA_EN]:COUNTRY.UA_RU,\n    [COUNTRY.BY_EN]:COUNTRY.BY_RU\n}\n\ninterface ILangForm {\n    [propName: number]: typeof LANG_OBJ,\n}\n\ninterface ICountryForm {\n    [propName: number]: typeof COUNTRY_OBJ_RU | typeof COUNTRY_OBJ_EN,\n}\n\ninterface ICountryItems {\n    [propName: string]: LANG[],\n}\n","import * as React from 'react';\nimport {FormControl, Grid, InputLabel, MenuItem, Select, SelectChangeEvent} from \"@mui/material\";\nimport {FormattedMessage} from \"react-intl\";\nimport {LANGUAGE} from \"../../BasicJoinForm/const\";\nimport {LANG} from \"../../App/const\";\nimport styles from \"./styles\";\nimport {ReactNode} from \"react\";\nimport classNames from \"classnames\";\nimport {withStyles, WithStyles} from \"@mui/styles\";\n\n\nconst LangSelect: React.FC<IProps> = (props) => {\n    const {children,onChange,isTable,classes} = props;\n    return (\n        <Grid classes={{root: classNames(classes.root, {[classes.table]: isTable})}}\n              container\n              justifyContent={isTable ? \"space-between\" : \"center\"} alignItems={\"center\"}\n              direction={'row'} gap={2}>\n            {isTable && <FormattedMessage id={'language'}/>}\n            <FormControl fullWidth classes={{root: classes.selectWrapper}}>\n                {!isTable && <InputLabel id=\"select-label\">\n                    <FormattedMessage id={'language'}/>\n                </InputLabel>}\n                <Select\n                    labelId=\"select-label\"\n                    id=\"lang\"\n                    label={!isTable && <FormattedMessage id={'language'}/>}\n                    name=\"lang\"\n                    onChange={onChange}\n                    defaultValue={LANGUAGE.RU}\n                >\n                    <MenuItem value={LANGUAGE.RU}>{LANG.RU}</MenuItem>\n                    <MenuItem value={LANGUAGE.EN}>{LANG.EN}</MenuItem>\n                </Select>\n            </FormControl>\n        </Grid>\n    );\n};\n\nexport default withStyles(styles)(LangSelect);\n\n\ninterface IProps extends WithStyles<typeof styles> {\n    onChange: (event: SelectChangeEvent<unknown>, child: ReactNode) => void;\n    isTable?: boolean;\n}","import {ITheme} from \"../../App/theme/theme\";\nimport {TABLE_WIDTH} from \"../../../utils/const\";\n\n\nexport default (theme:ITheme) => ( {\n    root:{},\n    table:{\n        width: `${TABLE_WIDTH}px !important`\n    },\n    selectWrapper:{\n        maxWidth:200,\n        alignContent:\"center\"\n    },\n} );","import * as React from 'react';\nimport {ReactNode, useEffect, useState} from 'react';\nimport {FormControl, Grid, InputLabel, MenuItem, Select, SelectChangeEvent} from \"@mui/material\";\nimport {FormattedMessage} from \"react-intl\";\nimport styles from \"./styles\";\nimport {LANG} from \"../../App/const\";\nimport {COUNTRY, COUNTRY_COMPLIMENTARY, COUNTRY_ITEMS} from \"../../BasicJoinForm/const\";\nimport classNames from \"classnames\";\nimport {WithStyles, withStyles} from \"@mui/styles\";\n\n\nconst CountrySelect: React.FC<IProps> = (props) => {\n    const {children, onChange, lang, isTable, classes, value} = props;\n    const [values, setValues] = useState(COUNTRY_ITEMS[LANG.EN])\n    const [currentValue, setCurrentValue] = useState(lang === LANG.RU ? COUNTRY.UA_RU : COUNTRY.UA_EN)\n\n\n    useEffect(() => {\n        setValues(COUNTRY_ITEMS[lang])\n    }, [lang])\n\n    useEffect(() => {\n        if (!values.includes(value)) {\n            setCurrentValue(COUNTRY_COMPLIMENTARY[value as any])\n        } else {\n            setCurrentValue(value)\n        }\n    }, [values, value])\n\n\n    return (\n        <Grid classes={{root: classNames(classes.root, {[classes.table]: isTable})}}\n              container\n              justifyContent={isTable ? \"space-between\" : \"center\"} alignItems={\"center\"}\n              direction={'row'} gap={2}>\n\n            {isTable && <FormattedMessage id={'country'}/>}\n\n            <FormControl fullWidth classes={{root: classes.selectWrapper}}>\n                {!isTable && <InputLabel id=\"select-country-label\">\n                    <FormattedMessage id={'country'}/>\n                </InputLabel>}\n                <Select\n                    labelId=\"select-country-label\"\n                    id=\"country\"\n                    label={!isTable && <FormattedMessage id={'country'}/>}\n                    name=\"country\"\n                    value={currentValue}\n                    onChange={onChange}>\n                    {values.map(country => <MenuItem value={country}>{country}</MenuItem>)}\n                </Select>\n\n            </FormControl>\n        </Grid>\n    );\n};\n\nexport default withStyles(styles)(CountrySelect);\n\ninterface IProps extends WithStyles<typeof styles> {\n    onChange: (event: SelectChangeEvent<unknown>, child: ReactNode) => void;\n    lang: any;\n    isTable?: boolean;\n    value: LANG\n}\n","import {TABLE_WIDTH} from \"../../../utils/const\";\nimport {ITheme} from \"../../App/theme/theme\";\n\n\nexport default (theme: ITheme) => ({\n    root: {},\n    table: {\n        width: `${TABLE_WIDTH}px !important`\n    },\n    selectWrapper: {\n        maxWidth: 200,\n        alignContent: \"center\"\n    },\n});","import * as React from 'react';\nimport {ReactNode, useEffect, useState} from 'react';\nimport {FormControl, Grid, InputLabel, MenuItem, Select, SelectChangeEvent} from \"@mui/material\";\nimport {FormattedMessage} from \"react-intl\";\nimport styles from \"./styles\";\nimport useDebounce from \"../../../utils/hooks/useDebounce\";\nimport {COUNTRY_CODE_OBJ} from \"../../App/const\";\nimport {weatherData} from \"../../../utils/const\";\nimport {WithStyles, withStyles} from \"@mui/styles\";\nimport classNames from \"classnames\";\n\n\nconst CitySelect: React.FC<IProps> = (props) => {\n    const {children, onChange, countryValue, isTable, classes,value} = props;\n    const [city, setCity] = useState<string>('')\n    const [filteredData, setFilteredData] = useState<Array<any>>([])\n    const data = [...weatherData]\n\n    const onCity = (value: string) => {\n        setCity(`${city}${value}`)\n    }\n    const debouncedValue = useDebounce(city , 2000)\n    const getCityList = () => {\n        const country = COUNTRY_CODE_OBJ[countryValue]?.toUpperCase() || countryValue;\n        setFilteredData(\n            [...data].filter(item => {\n                if (item.country === country) {\n                    return item.name.toLowerCase().includes((debouncedValue || value).toLowerCase())\n                }\n            }).splice(0, 9))\n        setCity('')\n    }\n\n    useEffect(() => {\n        if (debouncedValue) {\n            getCityList()\n        }\n    }, [debouncedValue, countryValue]);\n\n    useEffect(() => {\n        getCityList()\n\n    }, []);\n\n\n    return (\n        <Grid classes={{root: classNames(classes.root, {[classes.table]: isTable})}}\n              container\n              justifyContent={isTable ? \"space-between\" : \"center\"} alignItems={\"center\"}\n              direction={'row'} gap={2}>\n\n            {isTable && <FormattedMessage id={'city'}/>}\n\n            <FormControl fullWidth classes={{root: classes.selectWrapper}}>\n                {!isTable && <InputLabel id=\"select-city-label\">\n                    {city || < FormattedMessage id={'city'}/>}\n                </InputLabel>}\n                <Select\n                    required\n                    labelId=\"select-city-label\"\n                    id=\"city\"\n                    label={!isTable && <FormattedMessage id={'city'}/>}\n                    name=\"city\"\n                    onChange={onChange}\n                    value={value}\n                    onKeyPress={(event) => onCity(event.key)}\n                >\n                    <MenuItem value=\"\"><em> <FormattedMessage id={'none'}/></em></MenuItem>\n                    {filteredData.map((city, id) => {\n                        return < MenuItem key={city.id} value={city.name}>{city.name}</MenuItem>\n                    })}\n                </Select>\n            </FormControl>\n        </Grid>\n    );\n};\n\nexport default withStyles(styles)(CitySelect)\n\ninterface IProps extends WithStyles<typeof styles> {\n    onChange: (event: SelectChangeEvent<unknown>, child: ReactNode) => void;\n    countryValue: string;\n    isTable?: boolean;\n    value: string;\n}\n","export enum Colors {\n  WARNING = 'warning',\n  SUCCESS = 'success',\n  INFO = 'info',\n  FAILED = 'failed',\n  SUCCEEDED = 'succeeded',\n}\n","import {TABLE_WIDTH} from \"../../../utils/const\";\nimport {ITheme} from \"../../App/theme/theme\";\n\n\nexport default (theme:ITheme) => ( {\n    root:{},\n    table:{\n        width: `${TABLE_WIDTH}px !important`\n    },\n    selectWrapper:{\n        maxWidth:200,\n        alignContent:\"center\"\n    },\n} );","import React, { useState, useEffect } from 'react';\n\n// Наш хук\nexport default function useDebounce(value:any, delay:number) {\n    // Состояние и сеттер для отложенного значения\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Выставить debouncedValue равным value (переданное значение)\n            // после заданной задержки\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Вернуть функцию очистки, которая будет вызываться каждый раз, когда ...\n            // ... useEffect вызван снова. useEffect будет вызван снова, только если ...\n            // ... value будет изменено (смотри ниже массив зависимостей).\n            // Так мы избегаем изменений debouncedValue, если значение value ...\n            // ... поменялось в рамках интервала задержки.\n            // Таймаут очищается и стартует снова.\n            // Что бы сложить это воедино: если пользователь печатает что-то внутри ...\n            // ... нашего приложения в поле поиска, мы не хотим, чтобы debouncedValue...\n            // ... не менялось до тех пор, пока он не прекратит печатать дольше, чем 500ms.\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        // Вызывается снова, только если значение изменится\n        // мы так же можем добавить переменную \"delay\" в массива зависимостей ...\n        // ... если вы собираетесь менять ее динамически.\n        [value]\n    );\n\n    return debouncedValue;\n}","import * as React from 'react';\nimport CountrySelect from \"../CountrySelect\";\nimport CitySelect from \"../CitySelect\";\nimport {SelectChangeEvent} from \"@mui/material\";\nimport {ReactNode} from \"react\";\nimport {LANG} from \"../../App/const\";\n\n\nexport const LocationSelect: React.FC<IProps> = (props) => {\n    const {children, onChange, lang, country, isTable,city} = props;\n    return (\n        <>\n            <CountrySelect value={country} isTable={isTable} lang={lang} onChange={onChange}/>\n            {country && (\n                <CitySelect value={city} isTable={isTable} onChange={onChange} countryValue={country}/>\n            )}\n        </>\n    );\n};\n\n\ninterface IProps {\n    onChange: (event: SelectChangeEvent<unknown>, child: ReactNode) => void;\n    lang: any;\n    country: LANG;\n    city: string;\n    isTable?: boolean;\n}\n","import * as React from 'react';\nimport {ChangeEventHandler} from 'react';\nimport {WithStyles, withStyles} from \"@mui/styles\";\nimport styles from './styles';\nimport {Alert, Box, Grid, Grow, InputBaseComponentProps, StandardTextFieldProps, TextField} from \"@mui/material\";\nimport classNames from \"classnames\";\n\n\nexport const CommonTextField: React.FC<IProps> = (props) => {\n    const {children, classes, onChange, alert, value, isTable, title, id, variant,required,inputProps,type} = props;\n    return (\n        <Grid classes={{root: classNames(classes.root, {[classes.table]: isTable})}}\n              container\n              justifyContent={isTable ? \"space-between\" : \"center\"} alignItems={\"center\"}\n              direction={'row'} gap={2}>\n            {(isTable && title) && title}\n            <TextField variant={variant}\n                       onChange={onChange}\n                       value={value}\n                       inputProps={inputProps}\n                       type={type}\n                       required={required}\n                       id={id} name={id} label={!isTable && title}\n            />\n            {alert && <Box className={classes.validatorMessage}>\n                <Grow in={!!alert}>{\n                    <Alert severity=\"error\">{alert}</Alert>\n                }\n                </Grow>\n            </Box>}\n        </Grid>\n    );\n};\n\nexport default withStyles(styles)(CommonTextField);\n\ninterface IProps extends WithStyles<typeof styles> {\n    isTable?: boolean;\n    onChange: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    value: string;\n    alert?: string\n    title?: React.ReactNode;\n    id: string;\n    variant?: StandardTextFieldProps[\"variant\"]\n    type?: StandardTextFieldProps[\"type\"]\n    required?: boolean;\n    inputProps?:  InputBaseComponentProps | undefined;\n}","import {createStyles} from \"@mui/styles\";\nimport {TABLE_WIDTH} from \"../../../utils/const\";\nimport {ITheme} from \"../../App/theme/theme\";\n\n\nexport default (theme: ITheme) => createStyles({\n    root: {\n        position: \"relative\",\n    },\n    table: {\n        width: `${TABLE_WIDTH}px !important`\n    },\n    validatorMessage: {\n        position: \"absolute\",\n        top: 0,\n        right: '-124px',\n        width: 120\n    }\n});","import {Alert, Box, Button, Grid, Grow} from '@mui/material';\nimport * as React from 'react';\nimport {useContext, useEffect} from 'react';\nimport {useFormik} from \"formik\";\nimport {useStyles} from \"./styles\";\nimport {COUNTRY_CODE_OBJ, LANG} from \"../App/const\";\nimport {LANGUAGE} from \"./const\";\nimport {validate} from \"./validator\";\nimport {LS} from \"../../utils/const\";\nimport {FormattedMessage} from \"react-intl\";\nimport LangSelect from \"../common/LanguageSelect\";\nimport {LocationSelect} from \"../common/LocationSelect\";\nimport CommonTextField from '../common/CommonTextFileld';\nimport {StoreContext} from \"../../stores/StoresProvider/StoresProvider\";\n\n\nexport const BasicJoinForm: React.FC<IProps> = (props) => {\n    const styles = useStyles();\n    const {onSubmit, children, title, withOptions = false, submitButtonText, showAlert = false, onCloseAlert,} = props;\n    const {meStore} = useContext(StoreContext);\n\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n            email: '',\n            password: '',\n            country: '',\n            city: '',\n            lang: LANGUAGE.RU,\n        },\n        validate: (values) => validate(values, withOptions),\n\n        onSubmit: (values) => {\n            const {name, password, city, country, lang, email} = values;\n            try {\n                onSubmit && onSubmit({name, password, city, country: COUNTRY_CODE_OBJ[country], language: lang, email});\n            } catch (e) {\n                console.log(e);\n            }\n\n        },\n    });\n\n    useEffect(() => {\n        localStorage.setItem(LS.LANG, formik.values.lang.toLowerCase());\n        meStore.saveLang(formik.values.lang.toLowerCase())\n    }, [formik.values.lang]);\n\n\n    return (\n        <form className={styles.root} onSubmit={formik.handleSubmit}>\n            <Box className={styles.alert}>\n                <Grow in={showAlert}>{\n                    <Alert onClose={onCloseAlert} severity=\"info\">\n                        <FormattedMessage id={withOptions\n                            ? 'alert.name.sign.in'\n                            : 'alert.name.sign.up'}/>\n                    </Alert>\n                }\n                </Grow>\n                <Grow\n                    in={showAlert}\n                    style={{transformOrigin: '0 0 0'}}\n                    {...(showAlert ? {timeout: 1000} : {})}\n                >\n                    {<Alert severity=\"info\">\n                        <FormattedMessage id={withOptions\n                            ? 'alert.password.sign.in'\n                            : 'alert.password.sign.up'}/>\n                    </Alert>\n                    }\n                </Grow>\n            </Box>\n            <Grid container justifyContent={\"center\"} alignItems={\"center\"}\n                  direction={'column'} gap={2}>\n                {title}\n                {withOptions && (\n                    <LangSelect onChange={formik.handleChange}/>\n                )}\n\n                <CommonTextField id={'email'} title={<FormattedMessage id={'email'}/>} onChange={formik.handleChange}\n                                 alert={formik.errors.email} value={formik.values.email}/>\n                {withOptions && (\n                    <CommonTextField id={'name'} title={<FormattedMessage id={'name'}/>} onChange={formik.handleChange}\n                                     alert={formik.errors.name} value={formik.values.name}/>\n                )}\n\n                <CommonTextField id={'password'} title={<FormattedMessage id={'password'}/>}\n                                 onChange={formik.handleChange}\n                                 inputProps={{\n                                     autoComplete: 'new-password',\n                                     form: {\n                                         autoComplete: 'off',\n                                     },\n                                 }}\n                                 type=\"password\"\n                                 alert={formik.errors.password} value={formik.values.password}/>\n                {withOptions && (\n                    <LocationSelect city={formik.values.city} onChange={formik.handleChange} lang={formik.values.lang}\n                                    country={formik.values.country as LANG}/>\n                )\n                }\n                <Button type=\"submit\" disabled={!formik.isValid || !formik.dirty} color={'info'}\n                        variant={'contained'}>{submitButtonText}</Button>\n                {children && children}\n            </Grid>\n        </form>\n    );\n};\n\ninterface IProps {\n    onSubmit?: (values: IJoinFormValues) => void;\n    onCloseAlert?: () => void;\n    submitButtonText: React.ReactNode | string;\n    withOptions?: boolean;\n    showAlert?: boolean;\n    title?: React.ReactNode\n};\n\nexport interface IJoinFormValues {\n    name: string,\n    email: string,\n    password: string,\n    city?: string,\n    country?: string,\n    language?: any\n}\n","import {validateEmail} from \"../../utils/validator\";\nimport {IJoinFormValues} from \"./BasicJoinForm\";\nimport {FormattedMessage} from \"react-intl\";\nimport * as React from \"react\";\n\nexport const validate = (values:IJoinFormValues,withOptions:boolean) => {\n    const {name, password, city, country, language, email} = values\n    const errors: any = {};\n    if (withOptions && name.length <= 3 ) {\n        errors.name =  <FormattedMessage id={'alert.validation.symbol.three'}/> ;\n    }\n    // if (!validateEmail(email)) {\n    //     errors.email = 'Incorrect';\n    // }\n    if (password.length <= 3) {\n        errors.password =  <FormattedMessage id={'alert.validation.symbol.three'}/> ;\n    }\n    return errors\n\n}","import {makeStyles} from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles({\n    title:{\n        ...title,\n        textTransform:\"uppercase\",\n    }\n\n});","import {makeStyles} from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles({\n    children:{\n       display:\"grid\",\n        gridTemplateColumns:'1fr 24px',\n        columnGap:6,\n        cursor:\"pointer\"\n    },\n    title:{\n        ...title,\n        textTransform:\"uppercase\",\n    }\n\n});","import {makeStyles} from \"@mui/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        marginTop: '4%',\n    },\n    btn: {\n        height: 100,\n        width: 300,\n\n    }\n\n})","import {makeStyles} from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles({\n    title:{\n        ...title,\n        textTransform:\"uppercase\",\n    }\n\n});","import {makeStyles} from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles({\n    profileDataRoot:{\n        margin:'5vh auto',\n        '&>*:last-child':{\n            marginTop:20\n        }\n    },\n    tableRoot:{\n        maxWidth: '500px'\n    },\n    test:{\n        borderRadius:'6px',\n        minWidth:'100px'\n    }\n\n});","import {Chat} from \"../components/Chat/Chat\";\nimport {Login} from \"../components/Login/Login\";\nimport {Registration} from \"../components/Registration/Registration\";\nimport {JoinOptions} from \"../components/JoinOptions/JoinOptions\";\nimport {Profile} from \"../components/Profile/Profile\";\n\n\nexport enum ROUTES {\n    LOGIN_ROUTE = '/login',\n    CHAT_ROUTE = '/chat',\n    REGISTRATION_ROUTE = '/registration',\n    JOIN_ROUTE = '/join',\n    PROFILE_ROUTE = '/profile',\n}\n\nexport const publicRoutes = [\n\n    {\n        path: ROUTES.JOIN_ROUTE,\n        Component: JoinOptions,\n    },\n    {\n        path: ROUTES.LOGIN_ROUTE,\n        Component: Login,\n    },\n    {\n        path: ROUTES.REGISTRATION_ROUTE,\n        Component: Registration,\n    },\n];\n\nexport const privateRoutes = [\n    {\n        path: ROUTES.CHAT_ROUTE,\n        Component: Chat,\n    },\n    {\n        path: ROUTES.PROFILE_ROUTE,\n        Component: Profile,\n    },\n];\n\n","import classNames from 'classnames';\nimport React, {PropsWithChildren, RefAttributes} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Colors} from './consts';\nimport styles from './styles';\nimport {withStyles, WithStyles} from \"@mui/styles\";\n\n\nexport const Badge: React.FC<IProps> = React.forwardRef<HTMLSpanElement, IProps>(\n  (props, ref) => {\n    const {\n      color,\n      classes,\n      className: classNameProp,\n      onClick,\n      children,\n      status,\n      ...rest\n    } = props;\n    let statusClass;\n    if (status && classes[status as Colors]) {\n      statusClass = classes[status as Colors];\n    }\n    let colorClass;\n    if (color && classes) {\n      colorClass = classes[color as Colors];\n    }\n    return (\n      <span\n        {...rest} // rest не убирать, тултип навешивает обработчики\n        ref={ref}\n        onClick={onClick}\n        className={classNames(classes.root, colorClass, statusClass, classNameProp)}>\n        {status ? <FormattedMessage id={`statuses.${status}`} /> : children}\n      </span>\n    );\n  }\n);\n\nexport type Status = string;\n\ntype Color = Colors | Status;\n\ninterface IProps extends PropsWithChildren<any>, WithStyles<typeof styles> {\n  className?: string;\n  color?: Color;\n  onClick?: () => void;\n  status?: Status;\n}\n\nexport default withStyles(styles)(React.memo(Badge));\n","import {Colors} from './consts';\nimport {createStyles} from \"@mui/styles\";\n\nexport default () => {\n  const defaultStyles = {\n    backgroundColor: '#EAEAEA',\n    color: '#878B88',\n  };\n  const warningStyles = {\n    backgroundColor: '#FCEFCD',\n    color: '#B49034',\n  };\n  const successStyles = {\n    backgroundColor: '#CBF5D7',\n    color: '#408453',\n  };\n  const infoStyles = {\n    backgroundColor: '#CED6FD',\n    color: '#2B4DF7',\n  };\n  const failedStyles = {\n    backgroundColor: '#FBE3E9',\n    color: '#D56E87',\n  };\n  return createStyles({\n    root: {\n      ...defaultStyles,\n      display: 'inline',\n      whiteSpace: 'nowrap',\n      fontSize: 10,\n      textTransform: 'uppercase',\n      padding: '4px 10px',\n      fontWeight: 500,\n      borderRadius: 2,\n      lineHeight: 'normal', // не убирать, влияет на высоту бейджа в таблицах\n    },\n    [Colors.WARNING]: warningStyles,\n    [Colors.SUCCESS]: successStyles,\n    [Colors.SUCCEEDED]: successStyles,\n    [Colors.INFO]: infoStyles,\n    [Colors.FAILED]: failedStyles,\n  });\n};\n","import * as React from 'react';\nimport {useStyles} from './styles';\nimport {Table, TableBody, TableCell, TableRow} from \"@mui/material\";\nimport {IUser} from \"../../service/AuthService\";\nimport Badge, {Colors} from \"../common/Badge\";\nimport {IOptions} from '../../stores/settingsStore';\nimport {FormattedMessage} from \"react-intl\";\nimport {SWITCHER} from \"../../utils/const\";\n\ninterface IProfileData extends IUser, IOptions {\n}\n\ninterface IProps {\n    data: IProfileData;\n}\n\n\nexport const ProfileDataTable: React.FC<IProps> = (props) => {\n    const styles = useStyles();\n    const {children, data} = props;\n    const {id, name, language, email, location, isActivated, counterWidget, weatherWidget, theme} = data;\n    return (\n        <Table className={styles.tableRoot} aria-label=\"custom pagination table\">\n            <TableBody>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'name'}/></TableCell>\n                    <TableCell align={'right'}>{name}</TableCell>\n\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'language'}/></TableCell>\n                    <TableCell align={'right'}>{language}</TableCell>\n\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'email'}/></TableCell>\n                    <TableCell align={'right'}>{email}</TableCell>\n\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'country'}/></TableCell>\n                    <TableCell align={'right'}>{location.country}</TableCell>\n\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'widget.online_counter'}/></TableCell>\n                    <TableCell align={'right'}><Badge\n                        color={Colors.SUCCESS}>{counterWidget ? SWITCHER.ON : SWITCHER.OFF}</Badge></TableCell>\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'widget.weather'}/></TableCell>\n                    <TableCell align={'right'}><Badge\n                        color={Colors.SUCCESS}>{weatherWidget ? SWITCHER.ON : SWITCHER.OFF}</Badge></TableCell>\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'color_scheme'}/></TableCell>\n                    <TableCell align={'right'}><Badge color={Colors.INFO}>{theme}</Badge></TableCell>\n                </TableRow>\n            </TableBody>\n        </Table>\n    );\n};","import * as React from 'react';\nimport {useContext} from 'react';\nimport {useStyles} from './styles';\nimport {Button, Grid, Typography} from \"@mui/material\";\nimport {ProfileDataTable} from \"./ProfileDataTable\";\nimport {FormattedMessage} from \"react-intl\";\nimport {StoreContext} from \"../../stores/StoresProvider/StoresProvider\";\n\ninterface IProps {\n    onEdit: ()=>void;\n}\n\n\nexport const ProfileData: React.FC<IProps> = (props) => {\n    const styles = useStyles();\n    const {meStore,settingStore} = useContext(StoreContext);\n    const {children,onEdit} = props;\n    const data = {...meStore.me, ...settingStore.options}\n    return (\n        <Grid classes={{root:styles.profileDataRoot}} container justifyContent={\"center\"} alignItems={\"center\"} direction={\"column\"}>\n            <Typography variant={'h6'} >\n                <FormattedMessage id={'button.profile'}/>\n            </Typography>\n            <ProfileDataTable data={data}/>\n            <Button type=\"submit\" color={'info'} onClick={onEdit}\n                    variant={'contained'}> <FormattedMessage id={'button.edit'}/></Button>\n        </Grid>\n    );\n};","import {makeStyles} from \"@mui/styles\";\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles ( {\n    root: {\n        marginTop: '3%',\n        position: 'relative',\n\n    },\n    selectWrapper:{\n        maxWidth:200,\n        alignContent:\"center\"\n    },\n    contentWrapper:{\n        '&>*:first-child':{\n            ...title,\n            textTransform:\"uppercase\",\n            paddingBottom: 20\n        }\n    }\n} );","import * as React from 'react';\nimport {FormControlLabel, Grid, Radio, RadioGroup, SelectChangeEvent} from \"@mui/material\";\nimport styles from './styles';\nimport {FormattedMessage, useIntl} from \"react-intl\";\nimport classNames from \"classnames\";\nimport {WithStyles, withStyles} from \"@mui/styles\";\nimport {ReactNode} from \"react\";\nimport {THEME} from \"../../../utils/const\";\n\n\ninterface IProps extends WithStyles<typeof styles> {\n    title: string;\n    isTable?: boolean;\n    value: boolean | THEME;\n    options: any[];\n    onChange: (event: SelectChangeEvent<unknown>, child: ReactNode) => void;\n    name: string;\n}\n\nconst RadioButtons: React.FC<IProps> = (props) => {\n    const {children, title, isTable, classes, value, options, onChange,name} = props;\n\n\n    return (\n        <Grid classes={{root: classNames(classes.root, {[classes.table]: isTable})}}\n              container\n              justifyContent={isTable ? \"space-between\" : \"center\"} alignItems={\"center\"}\n              direction={'row'} gap={2}>\n            {title && <FormattedMessage id={title}/>}\n            <RadioGroup name={name}\n                        defaultValue=\"first\"\n                        row\n                        value={value}>\n                {options.map(o => {\n                    return (\n                        <FormControlLabel value={o.value} control={<Radio onChange={onChange}/>} label={o.label}/>\n                    )\n                })}\n            </RadioGroup>\n        </Grid>\n    );\n};\n\nexport default withStyles(styles)(RadioButtons);","import {createStyles} from \"@mui/styles\";\nimport {TABLE_WIDTH} from \"../../../utils/const\";\nimport {ITheme} from \"../../App/theme/theme\";\n\n\nexport default (theme:ITheme) => createStyles ( {\n    root:{},\n    table:{\n        width: `${TABLE_WIDTH}px !important`\n    },\n} );","import * as React from 'react';\nimport {Grid, Typography} from \"@mui/material\";\nimport {FormattedMessage} from \"react-intl\";\nimport {useStyles} from \"./styles\";\nimport LangSelect from \"../common/LanguageSelect\";\nimport {useFormik,} from \"formik\";\nimport {COUNTRY_CODE_OBJ, LANG} from \"../App/const\";\nimport RadioButtons from \"../common/RadioButtons\";\nimport {LocationSelect} from \"../common/LocationSelect\";\nimport CommonTextField from \"../common/CommonTextFileld\";\nimport {THEME} from \"../../utils/const\";\n\n\nconst commonRradioOptions = [\n    {value: true, label: <FormattedMessage id={'yes'}/>},\n    {value: false, label: <FormattedMessage id={'no'}/>},\n]\nconst colorOptions = [\n    {value: THEME.LIGHT, label: <FormattedMessage id={THEME.LIGHT}/>},\n    {value: THEME.DART, label: <FormattedMessage id={THEME.DART}/>},\n]\n\nexport const ProfileEditForm: React.FC<IProps> = (props) => {\n    const {children, onSubmit, initialValues} = props;\n    const styles = useStyles();\n    const formik = useFormik({\n        initialValues,\n        validate: (values) => {\n        },\n\n        onSubmit: (values) => {\n            const {name, city, country, email, language, counterWidget, weatherWidget, colorScheme} = values;\n            try {\n                onSubmit && onSubmit({\n                    name,\n                    city,\n                    country: COUNTRY_CODE_OBJ[country],\n                    language,\n                    email,\n                    counterWidget,\n                    weatherWidget,\n                    colorScheme\n                });\n            } catch (e) {\n                console.log(e);\n            }\n\n        },\n    });\n\n    return (\n        <form id='edit-profile' className={styles.root} onSubmit={formik.handleSubmit}>\n            <Grid classes={{root: styles.contentWrapper}} container justifyContent={\"center\"} alignItems={\"center\"}\n                  direction={'column'} gap={2}>\n                <Typography variant={'h6'}><FormattedMessage id={'settings.changing'}/></Typography>\n                <LangSelect isTable onChange={formik.handleChange}/>\n                <CommonTextField id={'name'} title={<FormattedMessage id={'name'}/>} onChange={formik.handleChange}\n                                 alert={formik.errors.name} value={formik.values.name} isTable/>\n                <CommonTextField id={'email'} title={<FormattedMessage id={'email'}/>} onChange={formik.handleChange}\n                                 alert={formik.errors.email} value={formik.values.email} isTable/>\n                <LocationSelect isTable onChange={formik.handleChange} city={formik.values.city}\n                                lang={formik.values.language}\n                                country={formik.values.country as LANG}/>\n                <RadioButtons onChange={formik.handleChange} options={commonRradioOptions} value={formik.values.weatherWidget}\n                              isTable name=\"weatherWidget\" title='widget.weather'/>\n                <RadioButtons onChange={formik.handleChange} options={commonRradioOptions} value={formik.values.counterWidget}\n                              isTable name=\"counterWidget\" title='widget.online_counter'/>\n                <RadioButtons onChange={formik.handleChange} options={colorOptions} value={formik.values.colorScheme}\n                              isTable name=\"colorScheme\" title='color_scheme'/>\n\n            </Grid>\n        </form>\n    );\n};\n\n\ninterface IProps {\n    onSubmit: (values: EditProfileFormValues) => void;\n    initialValues: EditProfileFormValues\n}\n\nexport interface EditProfileFormValues {\n    name: string,\n    email: string,\n    city: string,\n    country: string,\n    language: LANG | null,\n    weatherWidget: boolean,\n    counterWidget: boolean,\n    colorScheme: THEME,\n}\n","import * as React from 'react';\nimport {useContext} from 'react';\nimport {EditProfileFormValues, ProfileEditForm} from \"./ProfileEditForm\";\nimport {Button, Grid} from \"@mui/material\";\nimport {FormattedMessage} from \"react-intl\";\nimport {StoreContext} from \"../../stores/StoresProvider/StoresProvider\";\n\n\ninterface IProps {\n    toProfile: () => void;\n}\n\nexport const ProfileEdit: React.FC<IProps> = (props) => {\n    const {children, toProfile} = props;\n    const {meStore,settingStore} = useContext(StoreContext);\n\n    const initialValues:EditProfileFormValues = {\n        city: meStore.me.location.city,\n        country: meStore.me.location.country,\n        language: meStore.me.language,\n        email: meStore.me.email,\n        name: meStore.me.name,\n        counterWidget: settingStore.options.counterWidget,\n        weatherWidget: settingStore.options.weatherWidget,\n        colorScheme: settingStore.options.theme,\n    }\n\n\n    const onSubmit = async (values: EditProfileFormValues) => {\n        const {country, language, city, name, email,counterWidget,weatherWidget,colorScheme} = values\n        await settingStore.setOptions({ counterWidget:counterWidget,weatherWidget:weatherWidget,theme:colorScheme});\n    };\n\n    return (\n        <Grid container justifyContent={\"center\"} alignItems={\"center\"}\n              direction={'column'} gap={2}>\n            <ProfileEditForm onSubmit={onSubmit} initialValues={initialValues}/>\n            <Button form='edit-profile' type='submit'  color='info' variant='contained'>\n                <FormattedMessage\n                id=\"button.save.data\"/></Button>\n            <Button onClick={toProfile} color='warning' variant='contained'>\n                <FormattedMessage\n                id=\"button.abort\"/></Button>\n        </Grid>\n    );\n};\n\n","import * as React from 'react';\nimport {useCallback, useState} from 'react';\nimport {useStyles} from \"./styles\";\nimport {observer} from \"mobx-react-lite\";\nimport {ProfileData} from \"../ProfileData/ProfileData\";\nimport {ProfileEdit} from \"../ProfileEdit/ProfileEdit\";\n\n\ninterface IProps {\n\n}\n\nexport const Profile: React.FC<IProps> = observer((props) => {\n    const styles = useStyles();\n    const {children} = props;\n    const [isEdit, setIsEdit] = useState(false)\n    const toEdit = useCallback(()=>setIsEdit(true),[])\n    const toProfile = useCallback(()=>setIsEdit(false),[])\n    return (\n        <div>\n            {!isEdit\n                ? <ProfileData onEdit={toEdit}/>\n               : <>\n                    <ProfileEdit toProfile={toProfile}/>\n                </>}\n        </div>\n    );\n});","import {Button, Grid} from \"@mui/material\";\nimport {NavLink} from \"react-router-dom\";\nimport {ROUTES} from \"../../utils/routes\";\nimport * as React from \"react\";\nimport {useStyles} from \"./styles\";\nimport {FormattedMessage} from \"react-intl\";\n\nexport const JoinOptions: React.FC = () => {\n    const styles = useStyles();\n    return (\n        <Grid className={styles.root} container justifyContent={\"center\"} direction={\"column\"} alignItems={\"center\"}\n              gap={10}>\n            {/*<FanFact text={'test'}/>*/}\n            <Grid item><NavLink to={ROUTES.REGISTRATION_ROUTE}>< Button size={'large'}\n                variant={'contained'} classes={{root: styles.btn}}>\n                <FormattedMessage id={'button.sign.up'}/>\n            </Button>\n            </NavLink></Grid>\n            <Grid item><NavLink to={ROUTES.LOGIN_ROUTE}>< Button size={'large'}\n                variant={'contained'} classes={{root: styles.btn}}>\n                <FormattedMessage id={'button.sign.in'}/>\n            </Button>\n            </NavLink></Grid>\n        </Grid>\n    )\n}","import * as React from 'react';\nimport {useContext} from 'react';\nimport {BasicJoinForm, IJoinFormValues} from \"../BasicJoinForm/BasicJoinForm\";\nimport {useStyles} from './styles'\nimport {FormattedMessage} from \"react-intl\";\nimport {useHistory} from \"react-router-dom\";\nimport {ROUTES} from \"../../utils/routes\";\nimport {ME_ERROR_ENUM} from \"../../stores/const\";\nimport {StoreContext} from \"../../stores/StoresProvider/StoresProvider\";\n\n\nexport const Login: React.FC = () => {\n    const styles = useStyles()\n    const {meStore} = useContext(StoreContext);\n    const history = useHistory()\n\n    const onSubmit = (values:IJoinFormValues) => {\n        const {password,email} = values;\n            meStore.login(email, password)\n                .then(()=> history.push(ROUTES.CHAT_ROUTE))\n    }\n\n    return (\n        <>\n            {meStore.error[ME_ERROR_ENUM.AUTH] && <span>{ meStore.error[ME_ERROR_ENUM.AUTH]}</span>}\n            <BasicJoinForm onSubmit={onSubmit}\n                          submitButtonText={<FormattedMessage id={'button.sign.in'}/>}\n                          title={(\n                              <div className={styles.title}>\n                                  <FormattedMessage id={'button.sign.in'}/>\n                              </div>\n                          )}/>\n\n        </>\n    );\n};\n\n","import * as React from 'react';\nimport {useCallback, useContext, useState} from 'react';\nimport {BasicJoinForm, IJoinFormValues} from \"../BasicJoinForm/BasicJoinForm\";\nimport HelpIcon from \"@mui/icons-material/Help\";\nimport {useStyles} from \"./styles\";\nimport {FormattedMessage} from \"react-intl\";\nimport {ME_ERROR_ENUM} from \"../../stores/const\";\nimport {StoreContext} from \"../../stores/StoresProvider/StoresProvider\";\n\n\nexport const Registration: React.FC<Props> = () => {\n    const styles = useStyles();\n    const [showAlert, setShowAlert] = useState(false);\n    const {meStore} = useContext(StoreContext);\n    let timeOutId: NodeJS.Timeout;\n    const onSubmit = (values:IJoinFormValues) => {\n        const {country,language,city,password,name,email} = values\n        meStore.registration({name,email, password, city, country, language});\n    };\n\n    const onShowAlert = useCallback(() => {\n        setShowAlert(true);\n        timeOutId = setTimeout(() => {\n            setShowAlert(false);\n        }, 4000);\n    }, []);\n    const onCloseAlert = useCallback(() => {\n        setShowAlert(false);\n        clearTimeout(timeOutId);\n    }, []);\n\n    return (\n        <>\n            {<span>{meStore.error[ME_ERROR_ENUM.AUTH] && meStore.error[ME_ERROR_ENUM.AUTH]}</span>}\n            <BasicJoinForm\n            onCloseAlert={onCloseAlert}\n            showAlert={showAlert}\n            onSubmit={onSubmit}\n            submitButtonText={<FormattedMessage id={'button.sign.up'}/>}\n            withOptions\n            title={(\n                <div className={styles.children} onClick={showAlert ? onCloseAlert : onShowAlert}>\n                    <div className={styles.title}>\n                        <FormattedMessage id={'button.sign.up'}/>\n                    </div>\n                    <HelpIcon/>\n                </div>\n            )}/>\n        </>\n    );\n};\ntype Props = {};\n","import {makeStyles} from \"@mui/styles\";\n\n\nexport const useStyles = makeStyles({\n    root: {\n        margin: '10px 0',\n        maxWidth: '15vw'\n    },\n    description: {\n        fontSize: '0.8em',\n        color: \"grey\",\n        '&>div>strong': {\n            fontSize: '1.1em',\n        }\n    },\n    iconWrapper: {\n        position: \"relative\"\n    },\n    icon: {\n        position: 'absolute',\n        width: 60,\n        height: 60,\n        top: -24,\n        right:-24\n    }\n\n});","import * as React from 'react';\nimport {useContext, useEffect} from 'react';\nimport {Grid, Table, TableCell, TableRow} from \"@mui/material\";\nimport {observer} from \"mobx-react-lite\";\nimport {useStyles} from \"./styles\";\nimport {FormattedMessage} from \"react-intl\";\nimport {StoreContext} from \"../../stores/StoresProvider/StoresProvider\";\n\n\ninterface IProps {\n}\n\nexport const Weather: React.FC<IProps> = observer((props) => {\n    const {children} = props;\n    const {meStore,utilityStore} = useContext(StoreContext);\n    const styles = useStyles();\n    useEffect(()=>{\n        utilityStore.fetchWeather({\n            language:meStore.me.language,\n            location:meStore.me.location});\n    },[])\n    return (\n        <Grid container direction={\"column\"} classes={{root:styles.root}}>\n                <Table>\n                    <TableRow >\n                        <TableCell padding={\"checkbox\"}\n                            align={'left'}\n                        >\n                            <span>{utilityStore?.weather?.name}</span>\n                        </TableCell>\n                        <TableCell classes={{root:styles.iconWrapper}} padding={\"checkbox\"}\n                            align={'right'}\n                        >\n                            <img className={styles.icon} src={utilityStore?.weather?.weather && utilityStore?.weather?.weather[0]?.icon}/>\n                        </TableCell>\n                </TableRow>\n                    <TableRow>\n                        <TableCell padding={\"checkbox\"}\n                            align={'left'}\n                        >\n                            <span>\n                                 <FormattedMessage id={'weather.degree.current'}/>\n                            </span>\n                        </TableCell>\n                        <TableCell padding={\"checkbox\"}\n                            align={'right'}\n                        >\n                            <strong>{\n                                Math.ceil(utilityStore?.weather?.main?.temp)\n                            }</strong>\n                        </TableCell>\n                </TableRow>\n                    <TableRow>\n                        <TableCell padding={\"checkbox\"}\n                            align={'left'}\n                        >\n                            <span>\n                                 <FormattedMessage id={'weather.degree.feel'}/>\n                            </span>\n                        </TableCell>\n                        <TableCell padding={\"checkbox\"}\n                            align={'right'}\n                        >\n                            <strong>{\n                                Math.ceil(utilityStore?.weather?.main?.feels_like)\n                            }</strong>\n                        </TableCell>\n                    </TableRow>\n                </Table>\n        </Grid>\n    );\n});","import * as React from 'react';\nimport {useCallback, useContext} from 'react';\nimport {AppBar, Button, Grid} from '@mui/material';\nimport {useStyles} from \"./styles\";\nimport {observer} from \"mobx-react-lite\";\nimport {Clock} from \"../Clock/Clock\";\nimport {NavLink, useLocation} from 'react-router-dom';\nimport {ROUTES} from \"../../utils/routes\";\nimport {Weather} from \"../Weather/Weather\";\nimport {pageSelector} from \"../../utils/selectors/historySelector\";\nimport {FormattedMessage} from 'react-intl'\nimport {StoreContext} from \"../../stores/StoresProvider/StoresProvider\";\n\n\ntype Props = {};\nexport const NavBar: React.FC<Props> = observer((props) => {\n    const {meStore,chatStore} = useContext(StoreContext);\n    const styles = useStyles();\n    const isAuthorized = !!meStore.me.email;\n    const history = useLocation()\n    const {isProfilePage, isChatPage, isLoginPage, isLJoinPage} = pageSelector(history)\n    const toLogout = useCallback(() => meStore.logout(), []);\n\n    return (\n        <AppBar color={\"transparent\"} variant={\"outlined\"} elevation={0} position=\"static\">\n            <Grid container item alignItems={\"center\"} justifyContent={'space-evenly'} paddingBottom={2}>\n                {isAuthorized && <Weather/>}\n                <div className={styles.title}>\n                    <div><FormattedMessage id={'title.app'}/></div>\n                    {isAuthorized ?\n                        <>\n                            <div className={styles.onlineCounter}>\n                               <FormattedMessage id={'title.online_counter'}/>\n                                {'\\u00A0'} {chatStore.connectionCounter || 0}  {'\\u00A0'}\n                                <FormattedMessage id={'people'}/>\n                            </div>\n                            <Clock/>\n                        </>\n                        : !isLJoinPage && (isLoginPage\n                            ? <Grid item>\n                                <NavLink to={ROUTES.REGISTRATION_ROUTE}>< Button\n                                    variant={'text'}> <FormattedMessage id={'button.registration'}/></Button>\n                                </NavLink>\n                            </Grid>\n                            : <Grid item><\n                                NavLink to={ROUTES.LOGIN_ROUTE}>< Button\n                                variant={'text'}> <FormattedMessage id={'button.authorization'}/></Button>\n                            </NavLink>\n                            </Grid>\n                    )}\n\n                </div>\n                {isAuthorized && (\n                    <div className={styles.buttonsWrapper}>\n                        <Button onClick={toLogout} variant={'outlined'}>\n                             <FormattedMessage id={'button.logout'}/>\n                        </Button>\n                        {!isProfilePage &&\n                            <Button variant={'outlined'}>\n                                <NavLink to={`${ROUTES.PROFILE_ROUTE}`}>\n                                     <FormattedMessage id={'button.profile'}/>\n                                </NavLink>\n                            </Button>}\n                        {!isChatPage &&\n                            <Button variant={'outlined'}>\n                                <NavLink to={`${ROUTES.CHAT_ROUTE}`}>\n                                     <FormattedMessage id={'button.chat'}/>\n                                </NavLink>\n                            </Button>}\n                    </div>\n                )}\n\n            </Grid>\n        </AppBar>\n    );\n});","import {ROUTES} from \"../routes\";\n\nexport const pageSelector = (history:any) => {\n    return {\n        isLoginPage : history.pathname.includes ( ROUTES.LOGIN_ROUTE ),\n        isLJoinPage : history.pathname.includes ( ROUTES.JOIN_ROUTE ),\n        isProfilePage : history.pathname.includes ( ROUTES.PROFILE_ROUTE ),\n        isChatPage : history.pathname.includes ( ROUTES.CHAT_ROUTE ),\n    }\n }","import {Redirect, Route, Switch} from 'react-router-dom';\nimport * as React from \"react\";\nimport {useContext} from \"react\";\nimport {privateRoutes, publicRoutes, ROUTES} from \"../../utils/routes\";\nimport {StoreContext} from \"../../stores/StoresProvider/StoresProvider\";\n\n\nconst AppRoute:React.FC = () => {\n    const {meStore} = useContext ( StoreContext );\n    const isAuthorized = !!meStore.me.email;\n\n    return isAuthorized ?\n        <Switch>\n            { privateRoutes.map ( ({path, Component}) => {\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\n            } ) }\n            <Redirect to={ROUTES. CHAT_ROUTE }/>\n        </Switch>\n        :\n        <Switch>\n            { publicRoutes.map ( ({path, Component}) => {\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\n            } ) }\n            <Redirect to={ ROUTES.JOIN_ROUTE }/>\n        </Switch>\n}\n\n\nexport default AppRoute;\n","export const LOCALES = {\n    ENGLISH: 'en',\n    RUSSIAN: 'ru',\n    FRENCH: 'fr',\n    GERMAN: 'de',\n    JAPANESE: 'ja'\n};","import {LOCALES} from \"./locales\";\nimport en from './en.json'\nimport ru from './ru.json'\n\nexport const messages = {\n    [LOCALES.RUSSIAN]: ru,\n    [LOCALES.ENGLISH]: en,\n}","import * as React from 'react';\nimport {useContext, useEffect} from 'react';\nimport {NavBar} from \"../NavBar/NavBar\";\nimport './App.css';\nimport {Loader} from \"../Loader/Loader\";\nimport {observer} from \"mobx-react-lite\";\nimport AppRoute from \"../AppRoute/AppRoute\";\nimport {IntlProvider} from \"react-intl\";\nimport {messages} from \"../../i18n/messages\";\nimport {LOCALES} from \"../../i18n/locales\";\nimport {LS} from \"../../utils/const\";\nimport {LANG} from \"./const\";\nimport {StoreContext} from \"../../stores/StoresProvider/StoresProvider\";\n\n\nconst App: React.FC = observer((props) => {\n    const {chatStore,meStore,wsStore} = useContext(StoreContext)\n    const isAuthorized = !!meStore.me.email;\n    const connect = async () => {\n        chatStore.setLoading(true);\n        await wsStore.startSocket();\n    };\n    useEffect(() => {\n        if (!meStore.me.language) {\n            meStore.getLang()\n        }\n        if (localStorage.getItem(LS.TOKEN)) {\n            meStore.refresh();\n        }\n    }, []);\n\n    useEffect(() => {\n        if (!wsStore.socket && isAuthorized) {\n            connect().then(()=>{\n                wsStore.readSocket()\n            });\n        }\n    }, [isAuthorized,wsStore,chatStore,connect,meStore]);\n\n    if (chatStore.isLoading) return <Loader/>;\n    return (\n        <IntlProvider messages={messages[meStore.me.language || LANG.EN]} defaultLocale={LOCALES.ENGLISH}\n                      locale={meStore.me.language ? meStore.me.language : LANG.EN}>\n                        <NavBar/>\n                        <AppRoute/>\n        </IntlProvider>\n    );\n});\n\nexport default App;","import {createTheme} from \"@mui/material\";\n\n\nexport interface ITheme {\n    palette: {\n        primary: {\n            main: string\n        },\n        secondary: {\n            main: string\n        }\n    },\n    bg: {\n        main: string,\n        light: string\n    },\n    text: {\n        main: string,\n        light: string\n    }\n}\n\nexport default createTheme({\n    palette: {\n        primary: {\n            main: '#3F8AE0'\n        },\n        secondary: {\n            main: '#a24bd3'\n        }\n    },\n    bg: {\n        main: '#fff',\n        light: '#F4F5F7'\n    },\n    text: {\n        main: '#172B4D',\n        light: '#262930'\n    }\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./components/App/App\";\nimport {StoreProvider} from \"./stores/StoresProvider/StoresProvider\";\nimport {HashRouter} from 'react-router-dom';\nimport {ThemeProvider} from '@mui/styles';\nimport theme from \"./components/App/theme/theme\";\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <HashRouter>\n            <ThemeProvider theme={theme}>\n                <StoreProvider>\n                    <App/>\n                </StoreProvider>\n            </ThemeProvider>\n        </HashRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}