{"version":3,"sources":["state/context.ts","reportWebVitals.ts","utils/styles.ts","components/NavBar/styles.ts","utils/const.ts","components/Clock/styles.ts","utils/time.ts","components/Clock/Clock.tsx","components/Loader/Loader.tsx","components/Chat/styles.ts","components/Message/styles.ts","state/chatStore.ts","components/App/const.ts","components/Message/Message.tsx","components/Emoji/styles.ts","components/Emoji/Emoji.tsx","components/Chat/Chat.tsx","components/BasicJoinForm/styles.ts","components/BasicJoinForm/const.ts","components/BasicJoinForm/BasicJoinForm.tsx","components/common/Badge/consts.ts","components/BasicJoinForm/validator.tsx","utils/hooks/useDebounce.tsx","components/Login/styles.ts","components/Registration/styles.ts","components/JoinOptions/styles.ts","components/Profile/styles.ts","components/ProfileData/styles.ts","utils/routes.ts","components/common/Badge/Badge.tsx","components/common/Badge/styles.ts","components/ProfileData/ProfileDataTable.tsx","components/ProfileData/ProfileData.tsx","components/Profile/Profile.tsx","components/JoinOptions/JoinOptions.tsx","components/Login/Login.tsx","components/Registration/Registration.tsx","components/Weather/styles.ts","components/Weather/Weather.tsx","components/NavBar/NavBar.tsx","utils/selectors/historySelector.ts","http/chatApiInstance.ts","service/AuthService.ts","utils/localStorage.ts","state/meStore.ts","components/AppRoute/AppRoute.tsx","http/funFactApiInstance.ts","service/DayFactService.ts","service/WeatherService.ts","state/utilityStore.ts","state/settingsStore.ts","i18n/locales.ts","i18n/messages.ts","components/App/App.tsx","index.tsx"],"names":["MyContext","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","title","fontFamily","fontSize","useStyles","makeStyles","display","gridAutoRows","justifyItems","minHeight","alignItems","textTransform","onlineCounter","color","buttonsWrapper","gridTemplateRows","rowGap","React","defaultValue","SWITCHER","THEME","LS","timeRoot","whiteSpace","getTime","date","getTwoDig","time","string","toString","length","hour","getHours","min","getMinutes","sec","getSeconds","timeConverter","UNIX_timestamp","a","Date","year","getFullYear","month","getMonth","getDate","Clock","props","children","useState","setTime","styles","useEffect","clearId","setTimeout","clearTimeout","className","Loader","Container","Grid","container","justifyContent","style","height","window","innerHeight","CircularProgress","messagesRoot","maxHeight","messages","width","backgroundColor","overflowY","newMessageRoot","position","textField","btn","border","weatherData","MESSAGE_ENUM","mainBlock","minWidth","margin","borderRadius","maxWidth","padding","info","name","copy","cursor","opacity","top","LANG","COUNTRY","COUNTRY_CODE","ChatStore","messageValue","isLoading","isConnected","connectionCounter","makeAutoObservable","this","deep","value","count","Message","observer","isMe","message","useContext","chat","event","CONNECTION","setConnectionCounter","marginLeft","marginRight","paddingRight","direction","MESSAGE","justifySelf","borderBottom","toUpperCase","body","onClick","navigator","clipboard","writeText","right","left","id","emojiRoot","zIndex","picker","Emoji","frameWidth","isShowEmoji","setIsShowEmoji","classNames","onBlur","native","groupNames","smileys_people","disableAutoFocus","onEmojiClick","emojiObject","setMessageValue","emoji","skinTone","SKIN_TONE_MEDIUM_DARK","Button","Chat","me","socket","chatRef","useRef","formik","useFormik","initialValues","onSubmit","values","trim","now","email","send","JSON","stringify","sendMessage","messagesLength","current","scrollTo","scrollHeight","scrollToBottom","handleSubmit","ref","map","mes","TextField","label","variant","autoComplete","onChange","e","currentTarget","clientWidth","type","root","marginTop","selectWrapper","alignContent","alert","fieldWrapper","validatorMessage","LANG_OBJ","Object","create","COUNTRY_OBJ","COUNTRY_CODE_OBJ","LANG_FORM_PROP","RU","EN","COUNTRY_FORM_PROP","BY","UA","LANGUAGE","Colors","BasicJoinForm","withOptions","submitButtonText","showAlert","onCloseAlert","data","city","setCity","filteredData","setFilteredData","password","country","language","validate","errors","console","log","debouncedValue","delay","setDebouncedValue","handler","useDebounce","filter","item","toLowerCase","includes","splice","getCityList","Box","Grow","in","Alert","onClose","severity","transformOrigin","timeout","gap","FormControl","fullWidth","classes","InputLabel","Select","labelId","handleChange","MenuItem","autoFocus","required","inputProps","form","onKeyPress","key","disabled","isValid","dirty","gridTemplateColumns","columnGap","profileDataRoot","tableRoot","test","ROUTES","Badge","forwardRef","statusClass","colorClass","classNameProp","status","rest","withStyles","successStyles","createStyles","fontWeight","lineHeight","WARNING","SUCCESS","SUCCEEDED","INFO","FAILED","memo","ProfileDataTable","location","onlineCounterWidget","isActivated","weatherWidget","theme","Table","TableBody","TableRow","TableCell","align","ProfileData","settings","onEdit","options","Typography","Profile","isEdit","setIsEdit","toEdit","useCallback","toProfile","size","publicRoutes","path","JOIN_ROUTE","Component","to","REGISTRATION_ROUTE","LOGIN_ROUTE","history","useHistory","login","push","CHAT_ROUTE","timeOutId","setShowAlert","registration","onShowAlert","privateRoutes","PROFILE_ROUTE","description","iconWrapper","icon","Weather","utility","fetchWeather","weather","src","Math","ceil","main","temp","feels_like","NavBar","isAuthorized","isLoginPage","pathname","isLJoinPage","isProfilePage","isChatPage","pageSelector","useLocation","toLogout","logout","AppBar","elevation","paddingBottom","baseURL","chatApiInstance","axios","interceptors","request","use","config","headers","Authorization","localStorage","getItem","TOKEN","response","error","originalRequest","_isRetry","post","withCredentials","setItem","accessToken","AuthService","instance","delete","getLSData","MeStore","user","setMe","setAuthData","warn","refresh","getLang","lang","saveLang","AppRoute","component","exact","dayFactApiInstance","DayFactService","get","WeatherService","payload","chatInstance","UtilityStore","fact","fetchFact","setFact","contents","setWeather","SettingsStore","LIGHT","OF","ON","preparedOptions","OPTIONS","saveOptions","LOCALES","ru","en","App","utilityStore","setSocket","connect","setLoading","WebSocket","onmessage","messageEvent","setMessages","parse","onopen","setConnected","onclose","onerror","defaultLocale","locale","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d15679a3.chunk.js","sourcesContent":["import * as React from \"react\";\n\nlet defaultValue: any;\nexport let MyContext: React.Context<any>;\nMyContext = React.createContext (defaultValue);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const title = {\n        fontFamily:'monospace',\n        fontSize:'1.75rem'\n}\n","import { makeStyles } from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\nexport const useStyles = makeStyles({\n    title: {\n        display:\"grid\",\n        // gridTemplateRows:'1fr 1fr',\n        gridAutoRows:'auto',\n        justifyItems:\"center\",\n        minHeight:90,\n        alignItems:'center',\n        '&>div:first-child':{\n            ...title,\n            textTransform:\"uppercase\",\n        }\n    },\n    onlineCounter:{\n        color:\"grey\"\n    },\n    buttonsWrapper:{\n        display:'grid',\n        gridTemplateRows: '1fr 1fr',\n        rowGap:'10px'\n    },\n\n});","import data from \"./city.list.json\"\n\nexport const MOBIL = 520;\nexport const weatherData = data as IWeatherOption[]\n\ninterface IWeatherOption {\n    \"id\": number,\n    \"name\": string,\n    \"state\": string,\n    \"country\": string,\n    \"coord\": {\n        \"lon\": number,\n        \"lat\": number\n    }\n};\n\nexport enum SWITCHER {\n    ON = 'on',\n    OF = 'of'\n};\n\nexport enum THEME {\n    LIGHT = 'light',\n    DART = 'dark'\n}\n\nexport enum LS {\n    OPTIONS = \"OPTIONS\",\n    TOKEN = 'token',\n    LANG = 'lang'\n}","import { makeStyles } from '@mui/styles';\n\n\nexport const useStyles = makeStyles({\n    timeRoot:{\n       fontSize:'1rem',\n        fontFamily:\"monospace\",\n        color:'gray',\n        whiteSpace:'nowrap'\n    },\n});","\n\n\nexport const getTime = (date:Date) => {\n    const getTwoDig = (time:number) => {\n        const string = time.toString()\n        return string.length > 1 ? string : `0${string}`\n    }\n    const hour = getTwoDig(date.getHours())\n    const min = getTwoDig(date.getMinutes())\n    const sec = getTwoDig(date.getSeconds())\n    return `${ hour }: ${min }: ${ sec }`\n}\n\nconst timeFromUnix = (date:number) => {\n    return new Date(date * 1000)\n}\n\nexport const getDate = (date:number) => {\n    const fullDate = timeFromUnix(date)\n    const year = fullDate.getFullYear()\n    const month = fullDate.getMonth()\n    const day = fullDate.getDay()\n    return `${ year }: ${month }: ${ day }`\n}\nexport const timeConverter = (UNIX_timestamp:number) => {\n    // weird\n    const a = new Date(UNIX_timestamp / 1000);\n    const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    const year = a.getFullYear();\n    const month = months[a.getMonth()];\n    const date = a.getDate();\n    const hour = a.getHours();\n    const min = a.getMinutes();\n    const sec = a.getSeconds();\n    const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\n    return time;\n}","import * as React from 'react';\nimport {LegacyRef, useEffect, useRef, useState} from 'react';\nimport {useStyles} from './styles'\nimport {getTime} from \"../../utils/time\";\n\n\ninterface IProps {\n}\n\nexport const Clock: React.FC<IProps> = (props) => {\n    const {children} = props;\n    const [time, setTime] = useState ( new Date () );\n    const styles = useStyles();\n\n\n    useEffect ( () => {\n        const clearId = setTimeout ( () => setTime ( new Date () ), 1000 );\n        return () => clearTimeout ( clearId );\n    }, [time] );\n\n    return (\n        <div className={styles.timeRoot}>\n            { getTime(time)}\n        </div>\n    );\n};","// @flow\nimport {CircularProgress, Container, Grid} from '@mui/material';\nimport * as React from 'react';\n\n\ntype Props = {\n\n};\nexport const Loader = (props: Props) => {\n    return (\n        <Container>\n            <Grid container alignItems={\"center\"} justifyContent={\"center\"} style={{height: window.innerHeight-30}}>\n                    <CircularProgress color=\"primary\" />\n            </Grid>\n        </Container>\n    );\n};","import {makeStyles} from \"@mui/styles\";\n\nexport const useStyles = makeStyles({\n    messagesRoot: {\n        maxHeight: window.innerHeight - 30\n    },\n    messages: {\n        width: '100%',\n        height: '70vh',\n        backgroundColor: '#354765',\n        overflowY: 'auto'\n    },\n    newMessageRoot: {\n        position: 'relative',\n        width: '100%',\n        rowGap: 20,\n        color: '#ffffff'\n    },\n    textField:{\n        width:'80%'\n    },\n    btn:{\n        \"&.MuiButton-contained\": {\n            backgroundColor: '#3a64a8',\n            border:'none',\n            color: '#ffffff',\n            width:'20%',\n            height:56,\n            '&:hover':{\n                backgroundColor: '#7094d2',\n                color: '#354765',\n            }\n        },\n    }\n})","import { makeStyles } from '@mui/styles';\nimport {MOBIL} from \"../../utils/const\";\n\n\nexport const useStyles = makeStyles({\n    mainBlock:{\n        minWidth: '40vw',\n        margin: 10,\n        borderRadius: '4%',\n        maxWidth: '60%',\n        width: 'fit-content',\n        padding: 15,\n        display: 'grid',\n        justifyContent:'flexStart',\n        rowGap: 20,\n        fontFamily: 'serif',\n        position:'relative'\n    },\n    info: {\n        color:'#afbed2',\n        margin:'20px 30px'\n    },\n    name:{\n        display:'block',\n        maxWidth:'max-content'\n    },\n    copy:{\n        cursor:\"pointer\",\n        position:\"absolute\",\n        opacity:0.7,\n        top:8\n\n    },\n    date:{\n        fontSize:'0.7em'\n    },\n    [`@media (max-width:${MOBIL}px)`]: {\n        mainBlock:{\n            minWidth: '70vw',\n            fontSize: '1.4em'\n        },\n    }\n});","import {makeAutoObservable} from \"mobx\";\n\n\nexport enum MESSAGE_ENUM {\n    MESSAGE = 'message',\n    QUIT = 'quit',\n    CONNECTION = 'connection'\n}\n\n\nexport interface IMessage {\n    event: MESSAGE_ENUM;\n    id: string;\n    name: string;\n    body: string;\n    connectionCounter: number;\n}\n\n\ninterface IChat {\n    messages: IMessage[];\n    messageValue: string;\n    isLoading: boolean;\n    isConnected: boolean;\n    connectionCounter?: number;\n    setConnected: (isConnected: boolean) => void;\n    setLoading: (isLoading: boolean) => void;\n    setMessageValue: (value: string) => void;\n    setMessages: (messages: any) => void;\n}\n\nclass ChatStore implements IChat {\n    messages = [] as IMessage[];\n    messageValue = '';\n    isLoading = false;\n    isConnected = false;\n    connectionCounter = 0;\n\n    constructor() {\n        makeAutoObservable ( this, {}, {deep: true} );\n    }\n\n\n    setConnected(isConnected: boolean) {\n        this.isConnected = isConnected;\n    };\n\n    setLoading(isLoading: boolean) {\n        this.isLoading = isLoading;\n    };\n\n    setMessageValue(value: string) {\n        this.messageValue = value;\n    };\n\n    setMessages(messages: any) {\n        this.messages =  [...this.messages,...messages, ];\n\n    };\n\n    setConnectionCounter(count: number) {\n        this.connectionCounter = count;\n    };\n}\n\nexport default ChatStore;","export enum LANG {\n    EN = 'en',\n    RU = 'ru'\n};\n\nexport enum COUNTRY {\n    UA = 'Украина',\n    RU = 'Россия',\n    BY = 'Белорусия',\n};\n\nexport enum COUNTRY_CODE {\n    'Украина' = 'ua',\n    'Россия' = 'ru',\n    'Белорусия' = 'by',\n};\n\nexport const LANG_OBJ = Object.create(LANG);\nexport const COUNTRY_OBJ = Object.create(COUNTRY);\nexport const COUNTRY_CODE_OBJ = Object.create(COUNTRY_CODE);\n","import * as React from 'react';\nimport {useContext} from 'react';\nimport {Grid} from \"@mui/material\";\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport {useStyles} from \"./styles\";\nimport {MESSAGE_ENUM} from \"../../state/chatStore\";\nimport {observer} from \"mobx-react-lite\";\nimport {timeConverter} from \"../../utils/time\";\nimport {MyContext} from \"../../state/context\";\nimport {FormattedMessage} from \"react-intl\";\n\n\ntype Props = {\n    isMe: boolean;\n    message: any;\n};\nexport const Message: React.FC<Props> = observer((props) => {\n    const {isMe, message} = props;\n    const [chat, me, socket] = useContext(MyContext);\n    const styles = useStyles();\n    const onCopy = () => navigator.clipboard.writeText(message.body)\n    if (message.event === MESSAGE_ENUM.CONNECTION) {\n        chat.setConnectionCounter(message.connectionCounter);\n    }\n    const style = {\n        backgroundColor: isMe ? '#3a64a8' : '#536f9b',\n        color: isMe ? '#f6dbaa' : '#eee4cc',\n        marginLeft: isMe ? 'auto' : '10%',\n        marginRight: isMe ? '10%' : 0,\n        paddingRight: 10\n\n    };\n\n    return (\n        <Grid direction={\"column\"} container>\n            {message.event === MESSAGE_ENUM.MESSAGE\n                ? <div className={styles.mainBlock} style={style}>\n                    <h3 className={styles.name}\n                        style={\n                            {\n                                justifySelf: `${!isMe && 'flex-end'}`,\n                                borderBottom: `2px solid ${isMe ? '#f6dbaa' : '#eee4cc'}`\n                            }\n                        }>\n                        {message.name?.toUpperCase()}\n                    </h3>\n                    <span>{message.body}</span>\n                    <span className={styles.date}>{timeConverter(message.date * 1000)}</span>\n                    <div onClick={onCopy} style={isMe ? {right: 2} : {left: 6}\n                    } title={'скопировать сообщение'} className={styles.copy}>\n                        <ContentCopyIcon/>\n                    </div>\n                </div>\n                : message.event === MESSAGE_ENUM.CONNECTION\n                    ? <span className={styles.info}>\n                        {message.name} {'\\u00A0'}\n                        <FormattedMessage id={'chat.message.join'}/>\n                        </span>\n                    : <span className={styles.info}>{message.name}  {'\\u00A0'}\n                        <FormattedMessage id={'chat.message.out'}/>\n                    </span>\n            }\n        </Grid>\n    );\n});","import {makeStyles} from \"@mui/styles\";\n\nexport const useStyles = makeStyles({\n    emojiRoot: {\n        position: \"absolute\",\n        zIndex: 1,\n        top: 10,\n\n    },\n\n    picker:{\n        top:-350\n    },\n\n})","import * as React from 'react';\nimport {useContext, useState} from 'react';\nimport classNames from \"classnames\";\nimport Picker, {SKIN_TONE_MEDIUM_DARK} from \"emoji-picker-react\";\nimport {Button} from \"@mui/material\";\nimport EmojiEmotionsIcon from \"@mui/icons-material/EmojiEmotions\";\nimport {useStyles} from \"./styles\";\nimport {MyContext} from \"../../state/context\";\nimport {observer} from \"mobx-react-lite\";\n\n\n\ninterface IProps  {\n    frameWidth?:number\n}\n\nexport const Emoji: React.FC<IProps> = observer((props) => {\n    const {children,frameWidth = 0} = props;\n    const [chat,me,socket] = useContext ( MyContext );\n    const styles = useStyles ();\n    const [isShowEmoji, setIsShowEmoji] = useState ( false );\n    const showImoji = () => setIsShowEmoji ( true );\n    const hideImoji = () => setIsShowEmoji ( false );\n    const onEmojiClick = (event: any, emojiObject: any) => {\n        chat.setMessageValue ( emojiObject.emoji ) ;\n    };\n    return (\n        <div style={{right:`${frameWidth * 0.2}px`}} className={ classNames ( styles.emojiRoot, {[styles.picker]: isShowEmoji} ) }\n             onBlur={ hideImoji }>\n            { isShowEmoji\n                ? <Picker native groupNames={ {smileys_people: \"PEOPLE\"} } disableAutoFocus={ true }\n                          onEmojiClick={ onEmojiClick } skinTone={ SKIN_TONE_MEDIUM_DARK }/>\n                : <Button onClick={ showImoji }><EmojiEmotionsIcon/></Button> }\n        </div>\n    );\n});","import * as React from 'react';\nimport {useContext, useEffect, useRef, useState} from 'react';\nimport {Button, Container, Grid, TextField} from '@mui/material';\nimport {Loader} from \"../Loader/Loader\";\nimport {useStyles} from \"./styles\";\nimport {Message} from \"../Message/Message\";\nimport {Emoji} from \"../Emoji/Emoji\";\nimport {observer} from \"mobx-react-lite\";\nimport {IMessage} from '../../state/chatStore';\nimport {MyContext} from \"../../state/context\";\nimport {useFormik} from 'formik';\nimport MeStore from \"../../state/meStore\";\nimport {FormattedMessage} from \"react-intl\";\n\n\ntype Props = {}\n\n\nexport const Chat: React.FC<Props> = observer ( ((props) => {\n    const [chat,me, socket] = useContext ( MyContext );\n    const chatRef = useRef<HTMLDivElement> ( null );\n    const styles = useStyles ();\n    const sendMessage = () => {\n        if (!chat.messageValue.trim ()) return;\n        const message = {\n            event: 'message',\n            id: Date.now ().toString (),\n            name: me.me.email,\n            body: chat.messageValue,\n        };\n        socket?.send ( JSON.stringify ( message ) );\n        chat.setMessageValue ( '' );\n    };\n\n    const formik = useFormik ( {\n        initialValues: {\n            message: 'введите сообщение',\n        },\n        onSubmit: (values) => sendMessage (),\n    } );\n\n    const messagesArray = chat.messages;\n    const messagesLength = messagesArray.length;\n\n    const scrollToBottom = () => {\n        chatRef.current?.scrollTo ( 0, chatRef.current.scrollHeight );\n    };\n\n    useEffect ( () => {\n        scrollToBottom ();\n    } );\n\n    if (chat.isLoading) return <Loader/>;\n    return (\n        <Container>\n            <form onSubmit={ formik.handleSubmit }>\n                <Grid container className={ styles.messagesRoot } alignItems={ \"center\" }>\n                    <Grid ref={ chatRef } className={ styles.messages }>\n                        { messagesLength && chat.messages.map ( (mes: IMessage) => {\n                            const isMe = me.me.email === mes.name;\n                            return <Message key={ mes.id } isMe={ isMe } message={ mes }/>;\n                        } ) }\n                    </Grid>\n                </Grid>\n                <Grid className={ styles.newMessageRoot } container direction={ 'row' } alignItems={ 'flex-end' }>\n                    <TextField id={ 'message' } name={ 'message' } label={ 'message' } variant=\"filled\"\n                               autoComplete={ 'off' } onChange={ e => chat.setMessageValue ( e.currentTarget.value ) }\n                               value={ chat.messageValue } className={ styles.textField }\n                    />\n                    <Emoji frameWidth={ chatRef.current?.clientWidth }/>\n                    <Button type={ 'submit' } variant={ \"contained\" } className={styles.btn}>\n                        <strong>\n                        <FormattedMessage id={'button.message.send'}/>\n                        </strong>\n                    </Button>\n                </Grid>\n            </form>\n        </Container>\n    );\n}) );","import {makeStyles} from \"@mui/styles\";\n\n\nexport const useStyles = makeStyles ( {\n    root: {\n        marginTop: '5%',\n        position: 'relative',\n\n    },\n    selectWrapper:{\n        maxWidth:200,\n        alignContent:\"center\"\n    },\n    alert: {\n        position: \"absolute\",\n        width: 300,\n        right:'25%',\n        opacity:0.7,\n        zIndex: 0,\n        top:'5%',\n\n    },\n    fieldWrapper:{\n        position:'relative'\n    },\n    validatorMessage:{\n        position: \"absolute\",\n        top:0,\n        right:'-124px',\n        width:120\n    }\n} );","import {LANG_OBJ,COUNTRY_OBJ} from \"../App/const\";\n\nexport const LANG_FORM_PROP:ILangForm = {\n    10 : LANG_OBJ.RU,\n    20 : LANG_OBJ.EN,\n\n}\nexport const COUNTRY_FORM_PROP:ICountryForm = {\n    10 : COUNTRY_OBJ.RU,\n    20 : COUNTRY_OBJ.BY,\n    30 : COUNTRY_OBJ.UA,\n\n}\n\nexport const LANGUAGE = {\n   RU : LANG_FORM_PROP[\"10\"],\n   EN : LANG_FORM_PROP[\"20\"]\n}\nexport const COUNTRY = {\n   RU : COUNTRY_FORM_PROP[\"10\"],\n   BY : COUNTRY_FORM_PROP[\"20\"],\n   UA : COUNTRY_FORM_PROP[\"30\"]\n}\n\ninterface ILangForm {\n    [propName: number]: typeof LANG_OBJ,\n}\ninterface ICountryForm {\n    [propName: number]: typeof COUNTRY_OBJ,\n}","import {Alert, Box, Button, FormControl, Grid, Grow, InputLabel, MenuItem, Select, TextField} from '@mui/material';\nimport * as React from 'react';\nimport {useContext, useEffect, useState} from 'react';\nimport {useFormik} from \"formik\";\nimport {MyContext} from \"../../state/context\";\nimport {useStyles} from \"./styles\";\nimport {COUNTRY_CODE_OBJ, LANG} from \"../App/const\";\nimport {COUNTRY, LANGUAGE} from \"./const\";\nimport {validate} from \"./validator\";\nimport {weatherData} from \"../../utils/const\";\nimport useDebounce from \"../../utils/hooks/useDebounce\";\nimport {FormattedMessage} from \"react-intl\";\n\n\nexport const BasicJoinForm: React.FC<IProps> = (props) => {\n    const {onSubmit, children, title, withOptions = false, submitButtonText, showAlert = false, onCloseAlert,} = props;\n    const [chat, me, socket] = useContext(MyContext);\n    const data = [...weatherData]\n    const [city, setCity] = useState<string>('')\n    const [filteredData, setFilteredData] = useState<Array<any>>([])\n    const styles = useStyles();\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n            email: '',\n            password: '',\n            country: '',\n            city: 0,\n            language: LANGUAGE.RU,\n        },\n        validate: (values) => validate(values, withOptions),\n\n        onSubmit: (values) => {\n            const {name, password, city, country, language, email} = values;\n            try {\n                onSubmit && onSubmit({name, password, city, country: COUNTRY_CODE_OBJ[country], language, email});\n            } catch (e) {\n                console.log(e);\n            }\n\n        },\n    });\n    const onCity = (value: string) => {\n        setCity(`${city}${value}`)\n    }\n\n    const debouncedValue = useDebounce(city, 2000)\n    const getCityList = () => {\n        const country = COUNTRY_CODE_OBJ[formik.values.country].toUpperCase();\n        setFilteredData(\n            [...data].filter(item => {\n                if (item.country === country) {\n                    return item.name.toLowerCase().includes(debouncedValue.toLowerCase())\n                }\n            }).splice(0, 9))\n        setCity('')\n    }\n\n\n    useEffect(() => {\n        if (debouncedValue) {\n            getCityList()\n        }\n    }, [debouncedValue, formik.values.country]);\n\n    return (\n        <form className={styles.root} onSubmit={formik.handleSubmit}>\n            <Box className={styles.alert}>\n                <Grow in={showAlert}>{\n                    <Alert onClose={onCloseAlert} severity=\"info\"> <FormattedMessage id={withOptions\n                        ? 'alert.name.sign.in'\n                        : 'alert.name.sign.up'}/></Alert>\n                }\n                </Grow>\n                {/* Conditionally applies the timeout prop to change the entry speed. */}\n                <Grow\n                    in={showAlert}\n                    style={{transformOrigin: '0 0 0'}}\n                    {...(showAlert ? {timeout: 1000} : {})}\n                >\n                    {<Alert severity=\"info\">\n                        <FormattedMessage id={withOptions\n                            ? 'alert.password.sign.in'\n                            : 'alert.password.sign.up'}/>\n                    </Alert>\n                    }\n                </Grow>\n            </Box>\n            <Grid container justifyContent={\"center\"} alignItems={\"center\"}\n                  direction={'column'} gap={2}>\n                {title}\n                {withOptions && (\n                    <FormControl fullWidth classes={{root: styles.selectWrapper}}>\n                        <InputLabel id=\"select-label\">\n                            <FormattedMessage id={'language'}/>\n                        </InputLabel>\n                        <Select\n                            labelId=\"select-label\"\n                            id=\"lang\"\n                            label=\"lang\"\n                            name=\"lang\"\n                            onChange={formik.handleChange}\n                            defaultValue={LANGUAGE.RU}\n                        >\n                            <MenuItem value={LANGUAGE.RU}>{LANG.RU}</MenuItem>\n                            <MenuItem value={LANGUAGE.EN}>{LANG.EN}</MenuItem>\n                        </Select>\n                    </FormControl>\n                )}\n                <div className={styles.fieldWrapper}>\n                    <TextField autoFocus variant=\"filled\"\n                               onChange={formik.handleChange}\n                               value={formik.values.email}\n                               required\n                               id=\"email\" name=\"email\" label=\"email\"\n                    />\n                    <Box className={styles.validatorMessage}>\n                        <Grow in={!!formik.errors.email}>{\n                            <Alert severity=\"error\">{formik.errors.email}</Alert>\n                        }\n                        </Grow>\n                    </Box>\n                </div>\n                {withOptions && (\n                    <div className={styles.fieldWrapper}>\n                        <TextField variant=\"filled\"\n                                   onChange={formik.handleChange}\n                                   value={formik.values.name}\n                                   required\n                                   id=\"name\" name=\"name\" label=\"name\"\n                        />\n                        <Box className={styles.validatorMessage}>\n                            <Grow in={!!formik.errors.name}>{\n                                <Alert severity=\"error\">{formik.errors.name}</Alert>\n                            }\n                            </Grow>\n                        </Box>\n                    </div>\n                )}\n\n                <div className={styles.fieldWrapper}>\n                    <TextField inputProps={{\n                        autoComplete: 'new-password',\n                        form: {\n                            autoComplete: 'off',\n                        },\n                    }} variant=\"filled\"\n                               onChange={formik.handleChange}\n                               value={formik.values.password} type=\"password\"\n                               id=\"password\" name=\"password\" label=\"password\"\n                    />\n                    <Box className={styles.validatorMessage}>\n                        <Grow in={!!formik.errors.password}>{\n                            <Alert severity=\"error\">{formik.errors.password}</Alert>\n                        }\n                        </Grow>\n                    </Box>\n                </div>\n                {withOptions && (\n                    <>\n\n                        <FormControl fullWidth classes={{root: styles.selectWrapper}}>\n                            <InputLabel id=\"select-country-label\">\n                                <FormattedMessage id={'country'}/>\n                            </InputLabel>\n                            <Select\n                                labelId=\"select-country-label\"\n                                id=\"country\"\n                                label=\"country\"\n                                name=\"country\"\n                                onChange={formik.handleChange}\n                            >\n                                <MenuItem value={COUNTRY.RU}>{COUNTRY.RU}</MenuItem>\n                                <MenuItem value={COUNTRY.UA}>{COUNTRY.UA}</MenuItem>\n                                <MenuItem value={COUNTRY.BY}>{COUNTRY.BY}</MenuItem>\n                            </Select>\n                        </FormControl>\n\n                        {formik.values.country && (\n                            <FormControl fullWidth classes={{root: styles.selectWrapper}}>\n                                <InputLabel id=\"select-city-label\">\n                                    <FormattedMessage id={'city'}/>\n                                </InputLabel>\n                                <Select\n                                    labelId=\"select-city-label\"\n                                    id=\"city\"\n                                    label=\"city\"\n                                    name=\"city\"\n                                    onChange={formik.handleChange}\n                                    onKeyPress={(event) => onCity(event.key)}\n                                >\n                                    <MenuItem value=\"\"><em>None</em></MenuItem>\n                                    {filteredData.map((city, id) => {\n                                        return < MenuItem key={city.id} value={city.name}>{city.name}</MenuItem>\n                                    })}\n                                </Select>\n                            </FormControl>\n                        )}\n                    </>\n                )\n                }\n                <Button type=\"submit\" disabled={!formik.isValid || !formik.dirty} color={'info'}\n                        variant={'contained'}>{submitButtonText}</Button>\n                {children && children}\n            </Grid>\n        </form>\n    );\n};\n\ninterface IProps {\n    onSubmit?: (values: IJoinFormValues) => void;\n    onCloseAlert?: () => void;\n    submitButtonText: React.ReactNode | string;\n    withOptions?: boolean;\n    showAlert?: boolean;\n    title?: React.ReactNode\n};\n\nexport interface IJoinFormValues {\n    name: string,\n    email: string,\n    password: string,\n    city?: number,\n    country?: string,\n    language?: number\n}\n","export enum Colors {\n  WARNING = 'warning',\n  SUCCESS = 'success',\n  INFO = 'info',\n  FAILED = 'failed',\n  SUCCEEDED = 'succeeded',\n}\n","import {validateEmail} from \"../../utils/validator\";\nimport {IJoinFormValues} from \"./BasicJoinForm\";\n\nexport const validate = (values:IJoinFormValues,withOptions:boolean) => {\n    const {name, password, city, country, language, email} = values\n    const errors: any = {};\n    if (withOptions && name.length <= 3 ) {\n        errors.name = 'Required more 3 symbols';\n    }\n    // if (!validateEmail(email)) {\n    //     errors.email = 'Incorrect';\n    // }\n    if (password.length <= 3) {\n        errors.password = 'Required more 3 symbols';\n    }\n    return errors\n\n}","import React, { useState, useEffect } from 'react';\n\n// Наш хук\nexport default function useDebounce(value:any, delay:number) {\n    // Состояние и сеттер для отложенного значения\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Выставить debouncedValue равным value (переданное значение)\n            // после заданной задержки\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Вернуть функцию очистки, которая будет вызываться каждый раз, когда ...\n            // ... useEffect вызван снова. useEffect будет вызван снова, только если ...\n            // ... value будет изменено (смотри ниже массив зависимостей).\n            // Так мы избегаем изменений debouncedValue, если значение value ...\n            // ... поменялось в рамках интервала задержки.\n            // Таймаут очищается и стартует снова.\n            // Что бы сложить это воедино: если пользователь печатает что-то внутри ...\n            // ... нашего приложения в поле поиска, мы не хотим, чтобы debouncedValue...\n            // ... не менялось до тех пор, пока он не прекратит печатать дольше, чем 500ms.\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        // Вызывается снова, только если значение изменится\n        // мы так же можем добавить переменную \"delay\" в массива зависимостей ...\n        // ... если вы собираетесь менять ее динамически.\n        [value]\n    );\n\n    return debouncedValue;\n}","import {makeStyles} from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles({\n    title:{\n        ...title,\n        textTransform:\"uppercase\",\n    }\n\n});","import {makeStyles} from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles({\n    children:{\n       display:\"grid\",\n        gridTemplateColumns:'1fr 24px',\n        columnGap:6,\n        cursor:\"pointer\"\n    },\n    title:{\n        ...title,\n        textTransform:\"uppercase\",\n    }\n\n});","import {makeStyles} from \"@mui/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        marginTop: '4%',\n    },\n    btn: {\n        height: 100,\n        width: 300,\n\n    }\n\n})","import {makeStyles} from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles({\n    title:{\n        ...title,\n        textTransform:\"uppercase\",\n    }\n\n});","import {makeStyles} from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles({\n    profileDataRoot:{\n        margin:'5vh auto',\n        '&>*:last-child':{\n            marginTop:20\n        }\n    },\n    tableRoot:{\n        maxWidth: '500px'\n    },\n    test:{\n        borderRadius:'6px',\n        minWidth:'100px'\n    }\n\n});","import {Chat} from \"../components/Chat/Chat\";\nimport {Login} from \"../components/Login/Login\";\nimport {Registration} from \"../components/Registration/Registration\";\nimport {JoinOptions} from \"../components/JoinOptions/JoinOptions\";\nimport {Profile} from \"../components/Profile/Profile\";\n\n\nexport enum ROUTES {\n    LOGIN_ROUTE = '/login',\n    CHAT_ROUTE = '/chat',\n    REGISTRATION_ROUTE = '/registration',\n    JOIN_ROUTE = '/join',\n    PROFILE_ROUTE = '/profile',\n}\n\nexport const publicRoutes = [\n\n    {\n        path: ROUTES.JOIN_ROUTE,\n        Component: JoinOptions,\n    },\n    {\n        path: ROUTES.LOGIN_ROUTE,\n        Component: Login,\n    },\n    {\n        path: ROUTES.REGISTRATION_ROUTE,\n        Component: Registration,\n    },\n];\n\nexport const privateRoutes = [\n    {\n        path: ROUTES.CHAT_ROUTE,\n        Component: Chat,\n    },\n    {\n        path: ROUTES.PROFILE_ROUTE,\n        Component: Profile,\n    },\n];\n\n","import classNames from 'classnames';\nimport React, {PropsWithChildren, RefAttributes} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Colors} from './consts';\nimport styles from './styles';\nimport {withStyles, WithStyles} from \"@mui/styles\";\n\n\nexport const Badge: React.FC<IProps> = React.forwardRef<HTMLSpanElement, IProps>(\n  (props, ref) => {\n    const {\n      color,\n      classes,\n      className: classNameProp,\n      onClick,\n      children,\n      status,\n      ...rest\n    } = props;\n    let statusClass;\n    if (status && classes[status as Colors]) {\n      statusClass = classes[status as Colors];\n    }\n    let colorClass;\n    if (color && classes) {\n      colorClass = classes[color as Colors];\n    }\n    return (\n      <span\n        {...rest} // rest не убирать, тултип навешивает обработчики\n        ref={ref}\n        onClick={onClick}\n        className={classNames(classes.root, colorClass, statusClass, classNameProp)}>\n        {status ? <FormattedMessage id={`statuses.${status}`} /> : children}\n      </span>\n    );\n  }\n);\n\nexport type Status = string;\n\ntype Color = Colors | Status;\n\ninterface IProps extends PropsWithChildren<any>, WithStyles<typeof styles> {\n  className?: string;\n  color?: Color;\n  onClick?: () => void;\n  status?: Status;\n}\n\nexport default withStyles(styles)(React.memo(Badge));\n","import {Colors} from './consts';\nimport {createStyles} from \"@mui/styles\";\n\nexport default () => {\n  const defaultStyles = {\n    backgroundColor: '#EAEAEA',\n    color: '#878B88',\n  };\n  const warningStyles = {\n    backgroundColor: '#FCEFCD',\n    color: '#B49034',\n  };\n  const successStyles = {\n    backgroundColor: '#CBF5D7',\n    color: '#408453',\n  };\n  const infoStyles = {\n    backgroundColor: '#CED6FD',\n    color: '#2B4DF7',\n  };\n  const failedStyles = {\n    backgroundColor: '#FBE3E9',\n    color: '#D56E87',\n  };\n  return createStyles({\n    root: {\n      ...defaultStyles,\n      display: 'inline',\n      whiteSpace: 'nowrap',\n      fontSize: 10,\n      textTransform: 'uppercase',\n      padding: '4px 10px',\n      fontWeight: 500,\n      borderRadius: 2,\n      lineHeight: 'normal', // не убирать, влияет на высоту бейджа в таблицах\n    },\n    [Colors.WARNING]: warningStyles,\n    [Colors.SUCCESS]: successStyles,\n    [Colors.SUCCEEDED]: successStyles,\n    [Colors.INFO]: infoStyles,\n    [Colors.FAILED]: failedStyles,\n  });\n};\n","import * as React from 'react';\nimport {useStyles} from './styles';\nimport {Table, TableBody, TableCell, TableRow} from \"@mui/material\";\nimport {IUser} from \"../../service/AuthService\";\nimport Badge, {Colors} from \"../common/Badge\";\nimport {IOptions} from '../../state/settingsStore';\nimport {FormattedMessage} from \"react-intl\";\n\ninterface IProfileData extends IUser,IOptions{\n}\n\ninterface IProps {\n    data: IProfileData;\n}\n\n\nexport const ProfileDataTable: React.FC<IProps> = (props) => {\n    const styles = useStyles();\n    const {children, data} = props;\n    const {id, name, language, email, location, isActivated, onlineCounterWidget,weatherWidget,theme} = data;\n    return (\n        <Table className={styles.tableRoot} aria-label=\"custom pagination table\">\n            <TableBody>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'name'}/></TableCell>\n                    <TableCell align={'right'}>{name}</TableCell>\n\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'language'}/></TableCell>\n                    <TableCell align={'right'}>{language}</TableCell>\n\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'email'}/></TableCell>\n                    <TableCell align={'right'}>{email}</TableCell>\n\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'country'}/></TableCell>\n                    <TableCell align={'right'}>{location.country}</TableCell>\n\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'widget.online_counter'}/></TableCell>\n                    <TableCell align={'right'}><Badge color={Colors.SUCCESS} >{onlineCounterWidget}</Badge></TableCell>\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'widget.weather'}/></TableCell>\n                    <TableCell align={'right'}><Badge color={Colors.SUCCESS} >{weatherWidget}</Badge></TableCell>\n                </TableRow>\n                 <TableRow>\n                    <TableCell> <FormattedMessage id={'color_scheme'}/></TableCell>\n                     <TableCell align={'right'}><Badge color={Colors.INFO} >{theme}</Badge></TableCell>\n                </TableRow>\n            </TableBody>\n        </Table>\n    );\n};","import * as React from 'react';\nimport {useContext} from 'react';\nimport {useStyles} from './styles';\nimport {Button, Grid, Typography} from \"@mui/material\";\nimport {MyContext} from \"../../state/context\";\nimport {ProfileDataTable} from \"./ProfileDataTable\";\nimport {FormattedMessage} from \"react-intl\";\n\ninterface IProps {\n    onEdit: ()=>void;\n}\n\n\nexport const ProfileData: React.FC<IProps> = (props) => {\n    const styles = useStyles();\n    const [chat, me, socket,utility,settings] = useContext ( MyContext );\n    const {children,onEdit} = props;\n    const data = {...me.me, ...settings.options}\n    return (\n        <Grid classes={{root:styles.profileDataRoot}} container justifyContent={\"center\"} alignItems={\"center\"} direction={\"column\"}>\n            <Typography variant={'h6'} >\n                <FormattedMessage id={'button.profile'}/>\n            </Typography>\n            <ProfileDataTable data={data}/>\n            <Button type=\"submit\" color={'info'} onClick={onEdit}\n                    variant={'contained'}> <FormattedMessage id={'button.edit'}/></Button>\n        </Grid>\n    );\n};","import * as React from 'react';\nimport {useCallback, useContext, useState} from 'react';\nimport {BasicJoinForm} from \"../BasicJoinForm/BasicJoinForm\";\nimport {useStyles} from \"./styles\";\nimport {MyContext} from \"../../state/context\";\nimport {observer} from \"mobx-react-lite\";\nimport {IUser} from \"../../service/AuthService\";\nimport {toJS} from \"mobx\";\nimport {Button, Grid} from \"@mui/material\";\nimport {ProfileDataTable} from \"../ProfileData/ProfileDataTable\";\nimport {ProfileData} from \"../ProfileData/ProfileData\";\nimport {FormattedMessage} from \"react-intl\";\n\n\ninterface IProps {\n\n}\n\nexport const Profile: React.FC<IProps> = observer((props) => {\n    const [chat, me, socket] = useContext ( MyContext );\n    const styles = useStyles();\n    const {children} = props;\n    const [isEdit, setIsEdit] = useState(false)\n    const toEdit = useCallback(()=>setIsEdit(true),[])\n    const toProfile = useCallback(()=>setIsEdit(false),[])\n    return (\n        <div>\n            {!isEdit\n                ? <ProfileData onEdit={toEdit}/>\n               : <><BasicJoinForm withOptions submitButtonText={<FormattedMessage id={'button.save.data'}/>} title={(\n                    <div className={styles.title}><FormattedMessage id={'button.profile.edit'}/></div>\n                )}>\n                    < Button onClick={toProfile} size={'large'}\n                             variant={'contained'}>\n                    <FormattedMessage id={'button.profile'}/>\n                </Button>\n            </BasicJoinForm>\n                </>}\n        </div>\n    );\n});","import {Button, Grid} from \"@mui/material\";\nimport {NavLink} from \"react-router-dom\";\nimport {ROUTES} from \"../../utils/routes\";\nimport * as React from \"react\";\nimport {useStyles} from \"./styles\";\nimport {FormattedMessage} from \"react-intl\";\n\nexport const JoinOptions: React.FC = () => {\n    const styles = useStyles();\n    return (\n        <Grid className={styles.root} container justifyContent={\"center\"} direction={\"column\"} alignItems={\"center\"}\n              gap={10}>\n            {/*<FanFact text={'test'}/>*/}\n            <Grid item><NavLink to={ROUTES.REGISTRATION_ROUTE}>< Button size={'large'}\n                variant={'contained'} classes={{root: styles.btn}}>\n                <FormattedMessage id={'button.sign.up'}/>\n            </Button>\n            </NavLink></Grid>\n            <Grid item><NavLink to={ROUTES.LOGIN_ROUTE}>< Button size={'large'}\n                variant={'contained'} classes={{root: styles.btn}}>\n                <FormattedMessage id={'button.sign.in'}/>\n            </Button>\n            </NavLink></Grid>\n        </Grid>\n    )\n}","import * as React from 'react';\nimport {useContext} from 'react';\nimport {MyContext} from \"../../state/context\";\nimport {BasicJoinForm, IJoinFormValues} from \"../BasicJoinForm/BasicJoinForm\";\nimport {useStyles} from './styles'\nimport {FormattedMessage} from \"react-intl\";\nimport {useHistory, useLocation} from \"react-router-dom\";\nimport {ROUTES} from \"../../utils/routes\";\n\n\nexport const Login: React.FC = () => {\n    const styles = useStyles()\n    const [chat, me, socket] = useContext(MyContext);\n    const history = useHistory()\n    const onSubmit = async (values:IJoinFormValues) => {\n        const {password,email} = values;\n        try {\n            me.login(email, password)\n            history.push(ROUTES.CHAT_ROUTE)\n        }\n       catch (e) {\n           console.log(e)\n           history.push(ROUTES.JOIN_ROUTE)\n       }\n    }\n\n    return (\n        <BasicJoinForm onSubmit={onSubmit}\n                       submitButtonText={<FormattedMessage id={'button.sign.in'}/>}\n                       title={(\n            <div className={styles.title}>\n                <FormattedMessage id={'button.sign.in'}/>\n            </div>\n        )}>\n\n        </BasicJoinForm>\n    );\n};\n\n","import * as React from 'react';\nimport {useCallback, useContext, useState} from 'react';\nimport {BasicJoinForm, IJoinFormValues} from \"../BasicJoinForm/BasicJoinForm\";\nimport HelpIcon from \"@mui/icons-material/Help\";\nimport {useStyles} from \"./styles\";\nimport {MyContext} from \"../../state/context\";\nimport {FormattedMessage} from \"react-intl\";\n\n\nexport const Registration: React.FC<Props> = () => {\n    const styles = useStyles();\n    const [showAlert, setShowAlert] = useState(false);\n    const [chat, me, socket] = useContext(MyContext);\n    let timeOutId: NodeJS.Timeout;\n    const onSubmit = async (values:IJoinFormValues) => {\n        const {country,language,city,password,name,email} = values\n        await me.registration({name,email, password, city, country, language});\n    };\n\n    const onShowAlert = useCallback(() => {\n        setShowAlert(true);\n        timeOutId = setTimeout(() => {\n            setShowAlert(false);\n        }, 5000);\n    }, []);\n    const onCloseAlert = useCallback(() => {\n        setShowAlert(false);\n        clearTimeout(timeOutId);\n    }, []);\n\n    return (\n        <BasicJoinForm\n            onCloseAlert={onCloseAlert}\n            showAlert={showAlert}\n            onSubmit={onSubmit}\n            submitButtonText={\"Зарегистрироваться\"}\n            withOptions\n            title={(\n                <div className={styles.children} onClick={showAlert ? onCloseAlert : onShowAlert}>\n                    <div className={styles.title}>\n                        <FormattedMessage id={'button.sign.up'}/>\n                    </div>\n                    <HelpIcon/>\n                </div>\n            )}/>\n    );\n};\ntype Props = {};\n","import {makeStyles} from \"@mui/styles\";\n\n\nexport const useStyles = makeStyles({\n    root: {\n        margin: '10px 0',\n        maxWidth: '15vw'\n    },\n    description: {\n        fontSize: '0.8em',\n        color: \"grey\",\n        '&>div>strong': {\n            fontSize: '1.1em',\n        }\n    },\n    iconWrapper: {\n        position: \"relative\"\n    },\n    icon: {\n        position: 'absolute',\n        width: 60,\n        height: 60,\n        top: -24,\n        right:-24\n    }\n\n});","import * as React from 'react';\nimport {useContext, useEffect} from 'react';\nimport {MyContext} from \"../../state/context\";\nimport {Grid, Table, TableCell, TableRow} from \"@mui/material\";\nimport {observer} from \"mobx-react-lite\";\nimport {useStyles} from \"./styles\";\nimport {FormattedMessage} from \"react-intl\";\n\n\ninterface IProps {\n}\n\nexport const Weather: React.FC<IProps> = observer((props) => {\n    const {children} = props;\n    const [chat, me, socket,utility] = useContext ( MyContext );\n    const styles = useStyles();\n    useEffect(()=>{\n        utility.fetchWeather({\n            language:me.me.language,\n            location:me.me.location});\n    },[])\n    return (\n        <Grid container direction={\"column\"} classes={{root:styles.root}}>\n                <Table>\n                    <TableRow >\n                        <TableCell padding={\"checkbox\"}\n                            align={'left'}\n                        >\n                            <span>{utility?.weather?.name}</span>\n                        </TableCell>\n                        <TableCell classes={{root:styles.iconWrapper}} padding={\"checkbox\"}\n                            align={'right'}\n                        >\n                            <img className={styles.icon} src={utility?.weather?.weather?.icon}/>\n                        </TableCell>\n                </TableRow>\n                    <TableRow>\n                        <TableCell padding={\"checkbox\"}\n                            align={'left'}\n                        >\n                            <span>\n                                 <FormattedMessage id={'weather.degree.current'}/>\n                            </span>\n                        </TableCell>\n                        <TableCell padding={\"checkbox\"}\n                            align={'right'}\n                        >\n                            <strong>{\n                                Math.ceil(utility?.weather?.main?.temp)\n                            }</strong>\n                        </TableCell>\n                </TableRow>\n                    <TableRow>\n                        <TableCell padding={\"checkbox\"}\n                            align={'left'}\n                        >\n                            <span>\n                                 <FormattedMessage id={'weather.degree.feel'}/>\n                            </span>\n                        </TableCell>\n                        <TableCell padding={\"checkbox\"}\n                            align={'right'}\n                        >\n                            <strong>{\n                                Math.ceil(utility?.weather?.main?.feels_like)\n                            }</strong>\n                        </TableCell>\n                    </TableRow>\n                </Table>\n        </Grid>\n    );\n});","import * as React from 'react';\nimport {useCallback, useContext, useRef} from 'react';\nimport {AppBar, Button, Grid, Link} from '@mui/material';\nimport {useStyles} from \"./styles\";\nimport {MyContext} from \"../../state/context\";\nimport {observer} from \"mobx-react-lite\";\nimport {Clock} from \"../Clock/Clock\";\nimport {NavLink, useLocation} from 'react-router-dom';\nimport {ROUTES} from \"../../utils/routes\";\nimport {Weather} from \"../Weather/Weather\";\nimport {pageSelector} from \"../../utils/selectors/historySelector\";\nimport {FormattedDate, FormattedNumber, FormattedPlural, FormattedMessage} from 'react-intl'\n\n\ntype Props = {};\nexport const NavBar: React.FC<Props> = observer((props) => {\n    const [chat, me, socket] = useContext(MyContext);\n    const {connectionCounter} = chat;\n    const styles = useStyles();\n    const clockRef = useRef<HTMLDivElement>(null);\n    const isAuthorized = !!me.me.email;\n    const history = useLocation()\n    const {isProfilePage, isChatPage, isLoginPage, isLJoinPage} = pageSelector(history)\n    const toLogout = useCallback(() => me.logout(), []);\n\n    return (\n        <AppBar color={\"transparent\"} variant={\"outlined\"} elevation={0} position=\"static\">\n            <Grid container item alignItems={\"center\"} justifyContent={'space-evenly'} paddingBottom={2}>\n                {isAuthorized && <Weather/>}\n                <div className={styles.title}>\n                    <div><FormattedMessage id={'title.app'}/></div>\n                    {isAuthorized ?\n                        <>\n                            <div className={styles.onlineCounter}>\n                               <FormattedMessage id={'title.online_counter'}/>\n                                {'\\u00A0'} {connectionCounter || 0}  {'\\u00A0'}\n                                <FormattedMessage id={'people'}/>\n                            </div>\n                            <Clock/>\n                        </>\n                        : !isLJoinPage && (isLoginPage\n                            ? <Grid item>\n                                <NavLink to={ROUTES.REGISTRATION_ROUTE}>< Button\n                                    variant={'text'}> <FormattedMessage id={'button.registration'}/></Button>\n                                </NavLink>\n                            </Grid>\n                            : <Grid item><\n                                NavLink to={ROUTES.LOGIN_ROUTE}>< Button\n                                variant={'text'}> <FormattedMessage id={'button.authorization'}/></Button>\n                            </NavLink>\n                            </Grid>\n                    )}\n\n                </div>\n                {isAuthorized && (\n                    <div className={styles.buttonsWrapper}>\n                        <Button onClick={toLogout} variant={'outlined'}>\n                             <FormattedMessage id={'button.logout'}/>\n                        </Button>\n                        {!isProfilePage &&\n                            <Button variant={'outlined'}>\n                                <NavLink to={`${ROUTES.PROFILE_ROUTE}`}>\n                                     <FormattedMessage id={'button.profile'}/>\n                                </NavLink>\n                            </Button>}\n                        {!isChatPage &&\n                            <Button variant={'outlined'}>\n                                <NavLink to={`${ROUTES.CHAT_ROUTE}`}>\n                                     <FormattedMessage id={'button.chat'}/>\n                                </NavLink>\n                            </Button>}\n                    </div>\n                )}\n\n            </Grid>\n        </AppBar>\n    );\n});","import {ROUTES} from \"../routes\";\n\nexport const pageSelector = (history:any) => {\n    return {\n        isLoginPage : history.pathname.includes ( ROUTES.LOGIN_ROUTE ),\n        isLJoinPage : history.pathname.includes ( ROUTES.JOIN_ROUTE ),\n        isProfilePage : history.pathname.includes ( ROUTES.PROFILE_ROUTE ),\n        isChatPage : history.pathname.includes ( ROUTES.CHAT_ROUTE ),\n    }\n }","import axios from \"axios\";\nimport {IUser} from \"../service/AuthService\";\nimport {LS} from \"../utils/const\";\n\n\n// const baseURL = 'http://httplocalhost:5000';\nconst baseURL = 'https://ws-simple-chat-api.herokuapp.com/';\n\nconst chatApiInstance = axios.create({baseURL});\n\nchatApiInstance.interceptors.request.use((config)=>{\n    if ( config && config.headers) {\n        config.headers.Authorization = `Bearer ${ localStorage.getItem ( LS.TOKEN ) }`;\n        return config\n    }\n});\n\nchatApiInstance.interceptors.response.use((config)=>{\n    return config;\n},async (error) => {\n    const originalRequest = error.config;\n    if (error.response.status === 401 && error.config && !error.config._isRetry) {\n        originalRequest._isRetry = true;\n        try {\n            const response = await axios.post<AuthResponse>(`${baseURL}/auth/refresh`, {withCredentials: true})\n            localStorage.setItem(LS.TOKEN, response.data.accessToken);\n            return chatApiInstance.request(originalRequest);\n        } catch (e) {\n            console.log('НЕ АВТОРИЗОВАН')\n        }\n    }\n    throw error;\n});\n\n\nexport default chatApiInstance;\n\nexport interface AuthResponse {\n    accessToken: string;\n    refreshToken: string;\n    user: IUser;\n}","import {AxiosResponse} from \"axios\";\nimport instance from \"../http/chatApiInstance\";\nimport {IJoinFormValues} from \"../components/BasicJoinForm/BasicJoinForm\";\nimport {LANG} from \"../components/App/const\";\n\n\nexport default class AuthService {\n    static async login(email: string, password: string): Promise<AxiosResponse<IAuthResponse>> {\n        return instance.post ( 'auth/login', {email, password} );\n    }\n\n    static async registration(values:IJoinFormValues): Promise<AxiosResponse<IAuthResponse>> {\n        const {password,name,country,language,city,email} = values;\n        return instance.post ( 'auth/registration', {email,password,name,country,language,city} );\n    }\n\n    static async logout(): Promise<void> {\n        return instance.delete ( 'auth/logout' );\n    }\n    static async refresh(): Promise<AxiosResponse<IAuthResponse>> {\n        return instance.post ( 'auth/refresh' );\n    }\n}\n\nexport interface IAuthResponse {\n    accessToken: string;\n    refreshToken: string;\n    user: IUser;\n}\n\nexport interface IUser {\n    email: string;\n    name: string;\n    language: LANG;\n    location:ILocation\n    id: string;\n    isActivated: boolean;\n\n}\n\nexport interface ILocation {country:string,city:string}","import {LS} from \"./const\";\n\nexport const getLSData = (key: LS) => {\n    const data = localStorage.getItem(key);\n    if (data) {\n        return data\n    }\n    return ''\n}\n","import {makeAutoObservable} from \"mobx\";\nimport AuthService, {IAuthResponse, IUser} from \"../service/AuthService\";\nimport {AxiosResponse} from \"axios\";\nimport {IJoinFormValues} from \"../components/BasicJoinForm/BasicJoinForm\";\nimport {LANG} from \"../components/App/const\";\nimport {getLSData} from \"../utils/localStorage\";\nimport {LS} from \"../utils/const\";\n\n\ninterface IMEStore {\n    me: IUser | null;\n}\n\nclass MeStore implements IMEStore {\n    me = {\n        language: LANG.EN,\n    } as IUser;\n\n\n    constructor() {\n        makeAutoObservable(this, {}, {deep: true});\n    }\n\n    setMe(item: IUser | null) {\n        if (item) {\n            this.me = {...item, language: item.language.toLowerCase() as LANG};\n        } else {\n            this.me = {} as IUser\n        }\n    };\n\n    setAuthData(data: AxiosResponse<IAuthResponse, any>) {\n        localStorage.setItem(LS.TOKEN, data.data.accessToken);\n        localStorage.setItem(LS.LANG, data.data.user.language.toLowerCase());\n        this.setMe(data.data.user);\n    }\n\n    async login(email: string, password: string) {\n        try {\n            const response = await AuthService.login(email, password);\n            this.setAuthData(response);\n        } catch (e: any) {\n            console.warn(e.response?.data?.message);\n        }\n    };\n\n    async registration(values: IJoinFormValues) {\n        const {password, name, country, language, city, email} = values;\n        try {\n            const response = await AuthService.registration({password, email, name, country, language, city});\n            this.setAuthData(response);\n        } catch (e: any) {\n            console.warn(e.response?.data?.message);\n        }\n    };\n\n    async refresh() {\n        try {\n            const response = await AuthService.refresh();\n            localStorage.setItem('token', response.data.accessToken);\n            this.setMe(response.data.user);\n        } catch (e: any) {\n            console.warn(e.response?.data?.message);\n        }\n    };\n\n    async logout() {\n        try {\n            const response = await AuthService.logout();\n            this.setMe(null);\n            this.getLang()\n        } catch (e: any) {\n            console.warn(e.response?.data?.message);\n        }\n    };\n\n    saveLang(lang: LANG | string) {\n        this.me.language = lang ? lang as LANG : LANG.EN;\n    };\n\n    getLang() {\n        const lang = getLSData(LS.LANG);\n        this.saveLang(lang)\n    };\n\n}\n\nexport default MeStore;","import {Redirect, Route, Switch} from 'react-router-dom';\nimport * as React from \"react\";\nimport {privateRoutes, publicRoutes, ROUTES} from \"../../utils/routes\";\nimport {useContext} from \"react\";\nimport {MyContext} from \"../../state/context\";\n\n\n\nconst AppRoute:React.FC = () => {\n    const [chat, me, socket] = useContext ( MyContext );\n    const isAuthorized = !!me.me.email;\n\n    return isAuthorized ?\n        <Switch>\n            { privateRoutes.map ( ({path, Component}) => {\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\n            } ) }\n            <Redirect to={ROUTES. CHAT_ROUTE }/>\n        </Switch>\n        :\n        <Switch>\n            { publicRoutes.map ( ({path, Component}) => {\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\n            } ) }\n            <Redirect to={ ROUTES.JOIN_ROUTE }/>\n        </Switch>\n}\n\n\nexport default AppRoute;\n","import axios from \"axios\";\n\n\nconst baseURL = 'http://api.fungenerators.com/fact/';\nconst dayFactApiInstance = axios.create({baseURL});\nexport default dayFactApiInstance;\n\n","import {AxiosResponse} from \"axios\";\nimport instance from \"../http/funFactApiInstance\";\n\n\nexport default class DayFactService {\n    static async fetchFact(): Promise<AxiosResponse<IDayFactResponse>> {\n        return instance.get ('random',)\n    }\n\n}\n\ninterface IDayFactResponse {\n    \"success\": {\n        total: number\n    },\n    \"contents\": {\n        fact: string,\n        id: string,\n        category: string,\n        subcategory: string\n    }\n}\n","import {AxiosResponse} from \"axios\";\nimport chatInstance from '../http/chatApiInstance'\nimport {ILocation} from \"./AuthService\";\nimport {LANG} from \"../components/App/const\";\n\n\nexport default class WeatherService {\n    static async fetchWeather(payload:{location: ILocation, lang: LANG}): Promise<AxiosResponse<IWeatherResponse>> {\n        return chatInstance.post(`/utils/weather`, {\n            ...payload\n        })\n    }\n\n}\n\nexport interface IWeatherResponse {\n    \"coord\": {\n        \"lon\": number,\n        \"lat\": number\n    },\n    \"weather\": [\n        {\n            \"id\": number,\n            \"main\": string,\n            \"description\": string,\n            \"icon\": string\n        }\n    ],\n    \"base\": string,\n    \"main\": {\n        \"temp\": number,\n        \"pressure\": number,\n        \"humidity\": number,\n        \"temp_min\": number,\n        \"temp_max\": number\n    },\n    \"visibility\": number,\n    \"wind\": {\n        \"speed\": number,\n        \"deg\": number\n    },\n    \"clouds\": {\n        \"all\": number\n    },\n    \"dt\": number,\n    \"sys\": {\n        \"type\": number,\n        \"id\": number,\n        \"message\": number,\n        \"country\": string,\n        \"sunrise\": number,\n        \"sunset\": number\n    },\n    \"id\": number,\n    \"name\": string,\n    \"cod\": number\n}\n\n","import {makeAutoObservable} from \"mobx\";\nimport DayFactService from \"../service/DayFactService\";\nimport WeatherService, {IWeatherResponse} from \"../service/WeatherService\";\nimport {ILocation} from \"../service/AuthService\";\nimport {LANG} from \"../components/App/const\";\n\n\ninterface IUtilityStore {\n    fact:string\n    weather:IWeatherResponse\n}\n\nclass UtilityStore implements IUtilityStore {\n    fact = '';\n    weather = {} as IWeatherResponse;\n\n\n    constructor() {\n        makeAutoObservable ( this, {}, {deep: true} );\n    }\n\n    setFact(item: string) {\n        if (item) {\n            this.fact = item;\n        } else {\n            this.fact = ''\n        }\n    };\n    setWeather(item: IWeatherResponse) {\n        if (item) {\n            this.weather = item;\n        } else {\n            this.weather = {} as IWeatherResponse\n        }\n    };\n\n    async fetchFact() {\n        try {\n            const response = await DayFactService.fetchFact();\n            this.setFact ( response.data.contents.fact );\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n async fetchWeather(payload: { location: ILocation, lang: LANG }) {\n        try {\n            const response = await WeatherService.fetchWeather(payload);\n            this.setWeather(response.data) ;\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n\n\n}\n\nexport default UtilityStore;","import {makeAutoObservable} from \"mobx\";\nimport {LS, SWITCHER, THEME} from \"../utils/const\";\nimport {getLSData} from \"../utils/localStorage\";\n\n\nexport interface ISettingsStore {\n    options:IOptions\n}\n\nexport interface IOptions {\n    theme:THEME;\n    weatherWidget:SWITCHER\n    onlineCounterWidget:SWITCHER\n}\n\nclass SettingsStore implements ISettingsStore {\n    options = {\n        theme : THEME.LIGHT,\n        weatherWidget : SWITCHER.OF,\n        onlineCounterWidget : SWITCHER.ON,\n    }\n\n\n    constructor() {\n        makeAutoObservable ( this, {}, {deep: true} );\n    }\n\n    saveOptions(options: any) {\n        const preparedOptions = JSON.stringify(options)\n        localStorage.setItem(LS.OPTIONS,preparedOptions);\n    };\n    setOptions(options:IOptions) {\n        if (options) {\n            this.options = options;\n        } else {\n            this.options = {\n                theme : THEME.LIGHT,\n                weatherWidget : SWITCHER.OF,\n                onlineCounterWidget : SWITCHER.ON,\n            }\n        }\n    };\n    async getOption() {\n        try {\n            const options = getLSData(LS.OPTIONS);\n            this.saveOptions(options)\n        }\n       catch (e) {\n           console.log(e)\n       }\n    };\n\n}\n\nexport default SettingsStore;","export const LOCALES = {\n    ENGLISH: 'en',\n    RUSSIAN: 'ru',\n    FRENCH: 'fr',\n    GERMAN: 'de',\n    JAPANESE: 'ja'\n};","import {LOCALES} from \"./locales\";\nimport en from './en.json'\nimport ru from './ru.json'\n\nexport const messages = {\n    [LOCALES.RUSSIAN]: ru,\n    [LOCALES.ENGLISH]: en,\n}","import * as React from 'react';\nimport {useEffect, useState} from 'react';\nimport {NavBar} from \"../NavBar/NavBar\";\nimport './App.css';\nimport {Loader} from \"../Loader/Loader\";\nimport {HashRouter} from 'react-router-dom';\nimport ChatStore, {MESSAGE_ENUM} from \"../../state/chatStore\";\nimport {observer} from \"mobx-react-lite\";\nimport {MyContext} from '../../state/context';\nimport MeStore from \"../../state/meStore\";\nimport AppRoute from \"../AppRoute/AppRoute\";\nimport utilityStore from \"../../state/utilityStore\";\nimport SettingsStore from \"../../state/settingsStore\";\nimport {IntlProvider} from \"react-intl\";\nimport {messages} from \"../../i18n/messages\";\nimport {LOCALES} from \"../../i18n/locales\";\nimport {LS} from \"../../utils/const\";\n\n\nconst App: React.FC = observer ( (props) => {\n    const [chat] = useState ( () => new ChatStore () );\n    const [me] = useState ( () => new MeStore () );\n    const [settings] = useState ( () => new SettingsStore() );\n    const [utility] = useState ( () => new utilityStore () );\n    const [socket, setSocket] = useState<WebSocket | null> ( null );\n    const value = React.useMemo ( () => [chat, me, socket, utility,settings], [chat, me, socket, utility,settings] );\n    const isAuthorized = !!me.me.email;\n    const connect = async () => {\n        chat.setLoading ( true );\n        setSocket ( await new WebSocket ( 'wss://ws-simple-chat-api.herokuapp.com' ) );\n        // setSocket ( await new WebSocket ( 'ws://localhost:5000' ) );\n    };\n    useEffect ( () => {\n        if (!me.me.language) {\n            me.getLang()\n        }\n        if (localStorage.getItem ( LS.TOKEN )) {\n            me.refresh ();\n        }\n    }, [] );\n\n    useEffect ( () => {\n        if (!socket && isAuthorized) {\n            connect ();\n        }\n    }, [isAuthorized] );\n\n    if (socket) {\n        socket.onmessage = (messageEvent: MessageEvent) => {\n            chat.setMessages ( JSON.parse ( messageEvent.data ) );\n        };\n        socket.onopen = () => {\n            chat.setConnected ( true );\n            const message = {\n                event: MESSAGE_ENUM.CONNECTION,\n                id: me.me.id,\n                name: me.me.email,\n                body: me.me.email,\n            };\n            socket?.send ( JSON.stringify ( message ) );\n            chat.setLoading ( false );\n        };\n        socket.onmessage = (event: MessageEvent) => {\n            const messages = JSON.parse ( event.data );\n            chat.setMessages ( messages );\n        };\n        socket.onclose = () => {\n            chat.setConnected ( false );\n            const message = {\n                event: MESSAGE_ENUM.CONNECTION,\n                id: me.me.id,\n                name: me.me.email,\n                body: '',\n            };\n            socket.send ( JSON.stringify ( message ) );\n        };\n        socket.onerror = () => {\n            chat.setConnected ( false );\n            setTimeout ( () => connect (), 1000 );\n        };\n    }\n    if (chat.isLoading) return <Loader/>;\n\n    return (\n        <IntlProvider messages={messages[me.me.language]} defaultLocale={LOCALES.ENGLISH} locale={me.me.language}><HashRouter>\n            <MyContext.Provider value={value}>\n                <NavBar/>\n                <AppRoute/>\n            </MyContext.Provider>\n        </HashRouter>\n        </IntlProvider>\n    );\n} );\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./components/App/App\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}