{"version":3,"sources":["state/context.ts","reportWebVitals.ts","components/NavBar/styles.ts","state/chatStore.ts","components/Clock/styles.ts","utils/time.ts","components/Clock/Clock.tsx","components/NavBar/NavBar.tsx","components/Loader/Loader.tsx","components/Chat/styles.ts","components/Message/styles.ts","utils/const.ts","components/Message/Message.tsx","components/Emoji/styles.ts","components/Emoji/Emoji.tsx","components/Chat/Chat.tsx","utils/routes.ts","components/App/AppRoute/AppRoute.tsx","state/meStore.ts","components/App/App.tsx","index.tsx"],"names":["MyContext","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStyles","makeStyles","root","justifyContent","display","columnGap","flexWrap","rowGap","margin","title","gridTemplateRows","justifyItems","onlineCounter","color","React","defaultValue","MESSAGE_ENUM","timeRoot","fontSize","fontFamily","whiteSpace","getTime","date","getTwoDig","time","string","toString","length","hour","getHours","min","getMinutes","sec","getSeconds","timeConverter","UNIX_timestamp","a","Date","year","getFullYear","month","getMonth","getDate","Clock","props","children","useState","setTime","styles","useEffect","clearId","setTimeout","clearInterval","className","NavBar","observer","useContext","chat","connectionCounter","AppBar","variant","elevation","position","Toolbar","toUpperCase","Loader","Container","Grid","container","alignItems","style","height","window","innerHeight","CircularProgress","messagesRoot","maxHeight","messages","width","backgroundColor","overflowY","newMessageRoot","sendButton","textField","mainBlock","minWidth","borderRadius","maxWidth","padding","info","name","copy","cursor","opacity","top","ChatStore","messageValue","nameValue","isLoading","isConnected","makeAutoObservable","this","deep","value","count","Message","isMe","message","event","CONNECTION","setConnectionCounter","marginLeft","marginRight","paddingRight","direction","MESSAGE","justifySelf","borderBottom","body","onClick","navigator","clipboard","writeText","right","left","id","emojiRoot","zIndex","picker","Emoji","frameWidth","isShowEmoji","setIsShowEmoji","classNames","onBlur","native","groupNames","smileys_people","disableAutoFocus","onEmojiClick","emojiObject","setMessageValue","emoji","skinTone","SKIN_TONE_MEDIUM_DARK","Button","Chat","socket","chatRef","useRef","formik","useFormik","initialValues","onSubmit","values","trim","now","me","send","JSON","stringify","sendMessage","messagesLength","current","scrollTo","scrollHeight","scrollToBottom","handleSubmit","ref","map","mes","TextField","label","autoComplete","onChange","e","currentTarget","clientWidth","type","classes","outlined","CHAT_ROUTE","privateRoutes","path","Component","AppRoute","component","exact","to","MeStore","item","App","setSocket","connect","setMe","setLoading","WebSocket","onmessage","messageEvent","setMessages","parse","data","onopen","setConnected","onclose","onerror","onChatDisabler","Provider","setNameValue","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.997c3e60.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nlet defaultValue: any;\r\nexport let MyContext: React.Context<any>;\r\nMyContext = React.createContext (defaultValue);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { makeStyles } from '@mui/styles';\r\n\r\nexport const useStyles = makeStyles({\r\n    root:{\r\n        justifyContent:\"space-around\",\r\n        display:\"flex\",\r\n        columnGap:30,\r\n        flexWrap:'wrap',\r\n        rowGap:4,\r\n        margin:'8px 0'\r\n    },\r\n    title: {\r\n        display:\"grid\",\r\n        gridTemplateRows:'1fr 1fr',\r\n        justifyItems:\"flex-end\",\r\n\r\n    },\r\n    onlineCounter:{\r\n        color:\"grey\"\r\n    },\r\n});","import {makeAutoObservable} from \"mobx\";\r\n\r\n\r\nexport enum MESSAGE_ENUM {\r\n    MESSAGE = 'message',\r\n    QUIT = 'quit',\r\n    CONNECTION = 'connection'\r\n}\r\n\r\n\r\nexport interface IMessage {\r\n    event: MESSAGE_ENUM;\r\n    id: string;\r\n    name: string;\r\n    body: string;\r\n    connectionCounter: number;\r\n}\r\n\r\n\r\ninterface IChat {\r\n    messages: IMessage[];\r\n    messageValue: string;\r\n    nameValue: string;\r\n    isLoading: boolean;\r\n    isConnected: boolean;\r\n    connectionCounter?: number;\r\n    setConnected: (isConnected: boolean) => void;\r\n    setLoading: (isLoading: boolean) => void;\r\n    setMessageValue: (value: string) => void;\r\n    setNameValue: (value: string) => void;\r\n    setMessages: (messages: any) => void;\r\n}\r\n\r\nclass ChatStore implements IChat {\r\n    messages = [] as IMessage[];\r\n    messageValue = '';\r\n    nameValue = '';\r\n    isLoading = false;\r\n    isConnected = false;\r\n    connectionCounter = 0;\r\n\r\n    constructor() {\r\n        makeAutoObservable ( this, {}, {deep: true} );\r\n    }\r\n\r\n\r\n    setConnected(isConnected: boolean) {\r\n        this.isConnected = isConnected;\r\n    };\r\n\r\n    setLoading(isLoading: boolean) {\r\n        this.isLoading = isLoading;\r\n    };\r\n\r\n    setMessageValue(value: string) {\r\n        this.messageValue = value;\r\n    };\r\n\r\n    setNameValue(value: string) {\r\n        this.nameValue = value;\r\n    };\r\n\r\n    setMessages(messages: any) {\r\n        this.messages =  [...this.messages,...messages, ];\r\n\r\n    };\r\n\r\n    setConnectionCounter(count: number) {\r\n        this.connectionCounter = count;\r\n    };\r\n}\r\n\r\nexport default ChatStore;","import { makeStyles } from '@mui/styles';\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    timeRoot:{\r\n       fontSize:24,\r\n        fontFamily:\"monospace\",\r\n        color:'gray',\r\n        whiteSpace:'nowrap'\r\n    },\r\n});","\r\n\r\n\r\nexport const getTime = (date:Date) => {\r\n    const getTwoDig = (time:number) => {\r\n        const string = time.toString()\r\n        return string.length > 1 ? string : `0${string}`\r\n    }\r\n    const hour = getTwoDig(date.getHours())\r\n    const min = getTwoDig(date.getMinutes())\r\n    const sec = getTwoDig(date.getSeconds())\r\n    return `${ hour }: ${min }: ${ sec }`\r\n}\r\n\r\nconst timeFromUnix = (date:number) => {\r\n    return new Date(date * 1000)\r\n}\r\n\r\nexport const getDate = (date:number) => {\r\n    const fullDate = timeFromUnix(date)\r\n    const year = fullDate.getFullYear()\r\n    const month = fullDate.getMonth()\r\n    const day = fullDate.getDay()\r\n    return `${ year }: ${month }: ${ day }`\r\n}\r\nexport const timeConverter = (UNIX_timestamp:number) => {\r\n    // weird\r\n    const a = new Date(UNIX_timestamp / 1000);\r\n    const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n    const year = a.getFullYear();\r\n    const month = months[a.getMonth()];\r\n    const date = a.getDate();\r\n    const hour = a.getHours();\r\n    const min = a.getMinutes();\r\n    const sec = a.getSeconds();\r\n    const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\r\n    return time;\r\n}","import * as React from 'react';\r\nimport {useEffect, useState} from 'react';\r\nimport {useStyles} from './styles'\r\nimport {getTime} from \"../../utils/time\";\r\n\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\nexport const Clock: React.FC<IProps> = (props) => {\r\n    const {children} = props;\r\n    const [time, setTime] = useState ( new Date () );\r\n    const styles = useStyles()\r\n\r\n    useEffect ( () => {\r\n        const clearId = setTimeout ( () => setTime ( new Date () ), 5000 );\r\n        return () => clearInterval ( clearId );\r\n    }, [time] );\r\n\r\n    return (\r\n        <div className={styles.timeRoot}>\r\n            { getTime(time)}\r\n        </div>\r\n    );\r\n};","import * as React from 'react';\r\nimport {useContext} from 'react';\r\nimport {AppBar, Toolbar} from '@mui/material';\r\nimport {useStyles} from \"./styles\";\r\nimport {MyContext} from \"../../state/context\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Clock} from \"../Clock/Clock\";\r\n\r\n\r\n\r\ntype Props = {};\r\nexport const NavBar: React.FC<Props> = observer((props) => {\r\n    const [chat,socket] = useContext ( MyContext );\r\n    const {connectionCounter} = chat;\r\n    const styles = useStyles()\r\n    return (\r\n        <AppBar color={ \"transparent\" } variant={\"outlined\"} elevation={0} position=\"static\">\r\n            <Toolbar className={styles.root} >\r\n                <div/>\r\n                <div className={styles.title}>\r\n                    <strong>{'Живые и прочие'.toUpperCase()}</strong>\r\n                    <span className={styles.onlineCounter}>сейчас онлайн: { connectionCounter || 0 } человек </span>\r\n                </div>\r\n                <Clock/>\r\n                {/* <Grid container>\r\n                    { true\r\n                        ?\r\n                        <Button onClick={ () => {} } variant={ 'outlined' }>Logout</Button>\r\n                        :\r\n                        <NavLink to={ LOGIN_ROUTE }>< Button variant={ 'outlined' }>Login</Button></NavLink>\r\n                    }\r\n                </Grid>*/}\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n});","// @flow\r\nimport {CircularProgress, Container, Grid} from '@mui/material';\r\nimport * as React from 'react';\r\n\r\n\r\ntype Props = {\r\n\r\n};\r\nexport const Loader = (props: Props) => {\r\n    return (\r\n        <Container>\r\n            <Grid container alignItems={\"center\"} justifyContent={\"center\"} style={{height: window.innerHeight-30}}>\r\n                    <CircularProgress color=\"primary\" />\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};","import {makeStyles} from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n    messagesRoot: {\r\n        maxHeight: window.innerHeight - 30\r\n    },\r\n    messages: {\r\n        width: '100%',\r\n        height: '70vh',\r\n        backgroundColor: '#354765',\r\n        overflowY: 'auto'\r\n    },\r\n    newMessageRoot: {\r\n        position: 'relative',\r\n        width: '100%',\r\n        rowGap: 20,\r\n        color: '#ffffff'\r\n    },\r\n    sendButton:{\r\n        backgroundColor: '#354765',\r\n        color: '#ffffff',\r\n        width:'20%',\r\n        height:56,\r\n        '&:hover':{\r\n            backgroundColor: '#7094d2',\r\n            color: '#354765',\r\n        }\r\n    },\r\n    textField:{\r\n        width:'80%'\r\n    }\r\n})","import { makeStyles } from '@mui/styles';\r\nimport {MOBIL} from \"../../utils/const\";\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    mainBlock:{\r\n        minWidth: '40vw',\r\n        margin: 10,\r\n        borderRadius: '4%',\r\n        maxWidth: '60%',\r\n        width: 'fit-content',\r\n        padding: 15,\r\n        display: 'grid',\r\n        justifyContent:'flexStart',\r\n        rowGap: 20,\r\n        fontFamily: 'serif',\r\n        position:'relative'\r\n    },\r\n    info: {\r\n        color:'#afbed2',\r\n        margin:'20px 30px'\r\n    },\r\n    name:{\r\n        display:'block',\r\n        maxWidth:'max-content'\r\n    },\r\n    copy:{\r\n        cursor:\"pointer\",\r\n        position:\"absolute\",\r\n        opacity:0.7,\r\n        top:8\r\n\r\n    },\r\n    date:{\r\n        fontSize:'0.7em'\r\n    },\r\n    [`@media (max-width:${MOBIL}px)`]: {\r\n        mainBlock:{\r\n            minWidth: '70vw',\r\n            fontSize: '1.4em'\r\n        },\r\n    }\r\n});","export const MOBIL = 520;","import * as React from 'react';\r\nimport {Grid} from \"@mui/material\";\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport {useStyles} from \"./styles\";\r\nimport ChatStore, {MESSAGE_ENUM} from \"../../state/chatStore\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {getDate, timeConverter} from \"../../utils/time\";\r\nimport {useState} from \"react\";\r\n\r\n\r\ntype Props = {\r\n    isMe: boolean;\r\n    message: any;\r\n};\r\nexport const Message: React.FC<Props> = observer((props) => {\r\n    const {isMe, message} = props;\r\n    const [chat] = useState(() => new ChatStore())\r\n    const styles = useStyles ();\r\n    const onCopy = () =>  navigator.clipboard.writeText(message.body)\r\n    if (message.event === MESSAGE_ENUM.CONNECTION) {\r\n        chat.setConnectionCounter(message.connectionCounter);\r\n    }\r\n    const style = {\r\n        backgroundColor: isMe ? '#3a64a8' : '#536f9b',\r\n        color:  isMe ? '#f6dbaa' :'#eee4cc',\r\n        marginLeft: isMe ? 'auto' : '10%',\r\n        marginRight: isMe ? '10%' : 0,\r\n        paddingRight:10\r\n\r\n    };\r\n    return (\r\n        <Grid key={ message.id } direction={ \"column\" } container>\r\n            { message.event === MESSAGE_ENUM.MESSAGE\r\n                ? <div className={styles.mainBlock} style={ style }>\r\n                    <h3 className={styles.name}\r\n                        style={\r\n                            {justifySelf:`${!isMe && 'flex-end'}`,borderBottom:`2px solid ${isMe ? '#f6dbaa' :'#eee4cc' }`}\r\n                        }>\r\n                        { message.name.toUpperCase() }\r\n                    </h3>\r\n                    <span>{ message.body }</span>\r\n                    <span className={styles.date}>{ timeConverter(message.date * 1000)  }</span>\r\n                    <div onClick={onCopy} style={isMe ? {right:2} : {left:6}\r\n                    } title={'скопировать сообщение'} className={styles.copy}>\r\n                        <ContentCopyIcon/>\r\n                    </div>\r\n            </div>\r\n                : message.event === MESSAGE_ENUM.CONNECTION ?\r\n                    <span className={ styles.info }>{ message.name } подключился к чату.. .</span>\r\n                    : <span className={ styles.info }>{ message.name } вышел из чата.. .</span> }\r\n        </Grid>\r\n    );\r\n});","import {makeStyles} from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n    emojiRoot: {\r\n        position: \"absolute\",\r\n        zIndex: 1,\r\n        top: 10,\r\n\r\n    },\r\n\r\n    picker:{\r\n        top:-350\r\n    },\r\n\r\n})","import * as React from 'react';\r\nimport {useContext, useState} from 'react';\r\nimport classNames from \"classnames\";\r\nimport Picker, {SKIN_TONE_MEDIUM_DARK} from \"emoji-picker-react\";\r\nimport {Button} from \"@mui/material\";\r\nimport EmojiEmotionsIcon from \"@mui/icons-material/EmojiEmotions\";\r\nimport {useStyles} from \"./styles\";\r\nimport {MyContext} from \"../../state/context\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\n\r\n\r\ninterface IProps  {\r\n    frameWidth?:number\r\n}\r\n\r\nexport const Emoji: React.FC<IProps> = observer((props) => {\r\n    const {children,frameWidth = 0} = props;\r\n    const [chat,socket] = useContext ( MyContext );\r\n    const styles = useStyles ();\r\n    const [isShowEmoji, setIsShowEmoji] = useState ( false );\r\n    const showImoji = () => setIsShowEmoji ( true );\r\n    const hideImoji = () => setIsShowEmoji ( false );\r\n    const onEmojiClick = (event: any, emojiObject: any) => {\r\n        chat.setMessageValue ( emojiObject.emoji ) ;\r\n    };\r\n    return (\r\n        <div style={{right:`${frameWidth * 0.2}px`}} className={ classNames ( styles.emojiRoot, {[styles.picker]: isShowEmoji} ) }\r\n             onBlur={ hideImoji }>\r\n            { isShowEmoji\r\n                ? <Picker native groupNames={ {smileys_people: \"PEOPLE\"} } disableAutoFocus={ true }\r\n                          onEmojiClick={ onEmojiClick } skinTone={ SKIN_TONE_MEDIUM_DARK }/>\r\n                : <Button onClick={ showImoji }><EmojiEmotionsIcon/></Button> }\r\n        </div>\r\n    );\r\n});","import * as React from 'react';\r\nimport {useContext, useEffect, useRef} from 'react';\r\nimport {Button, Container, Grid, TextField} from '@mui/material';\r\nimport {Loader} from \"../Loader/Loader\";\r\nimport {useStyles} from \"./styles\";\r\nimport {Message} from \"../Message/Message\";\r\nimport {Emoji} from \"../Emoji/Emoji\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {IMessage} from '../../state/chatStore';\r\nimport {MyContext} from \"../../state/context\";\r\nimport {useFormik} from 'formik';\r\n\r\ntype Props = {}\r\n\r\n\r\nexport const Chat: React.FC<Props> = observer(((props) => {\r\n    const [chat, socket] = useContext(MyContext);\r\n    const chatRef = useRef<HTMLDivElement>(null);\r\n    const styles = useStyles();\r\n\r\n    const sendMessage = () => {\r\n        if (!chat.messageValue.trim()) return\r\n\r\n        const message = {\r\n            event: 'message',\r\n            id: Date.now().toString(),\r\n            name: chat.me.name,\r\n            body: chat.messageValue,\r\n        };\r\n\r\n        socket?.send(JSON.stringify(message));\r\n        chat.setMessageValue('');\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: 'введите сообщение',\r\n        },\r\n        onSubmit: (values) => sendMessage(),\r\n    });\r\n\r\n    const messagesArray = chat.messages\r\n    const messagesLength = messagesArray.length\r\n\r\n    const scrollToBottom = () => {\r\n        chatRef.current?.scrollTo(0, chatRef.current.scrollHeight);\r\n    };\r\n\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    },);\r\n\r\n    if (chat.isLoading) return <Loader/>;\r\n    return (\r\n        <Container >\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <Grid container className={styles.messagesRoot} alignItems={\"center\"}>\r\n                <Grid ref={chatRef} className={styles.messages}>\r\n                    {messagesLength && chat.messages.map((mes: IMessage) => {\r\n                        const isMe = chat.nameValue === mes.name;\r\n                        return <Message key={mes.id} isMe={isMe} message={mes}/>;\r\n                    })}\r\n                </Grid>\r\n            </Grid>\r\n                <Grid className={styles.newMessageRoot} container direction={'row'} alignItems={'flex-end'}>\r\n                    <TextField id={'message'} name={'message'} label={'message'} variant=\"filled\"\r\n                               autoComplete={'off'} onChange={e => chat.setMessageValue(e.currentTarget.value)}\r\n                               value={chat.messageValue} className={styles.textField}\r\n                    />\r\n                    <Emoji frameWidth={chatRef.current?.clientWidth}/>\r\n                    <Button  type={'submit'} variant={'outlined'}\r\n                            classes={{outlined: styles.sendButton}}><strong>send</strong></Button>\r\n\r\n                </Grid>\r\n            </form>\r\n        </Container>\r\n    );\r\n}));","import { Chat } from \"../components/Chat/Chat\"\r\nimport { Login } from \"../components/Login/Login\"\r\n\r\n\r\nexport const LOGIN_ROUTE = '/LOGIN_ROUTE'\r\nexport const CHAT_ROUTE = '/CHAT_ROUTE'\r\n\r\n\r\nexport const publicRoutes =[\r\n    {\r\n        path:LOGIN_ROUTE,\r\n        Component: Login\r\n    }\r\n]\r\n\r\nexport const privateRoutes =[\r\n    {\r\n        path: CHAT_ROUTE,\r\n        Component: Chat\r\n    }\r\n]\r\n\r\n","import {Redirect, Route, Switch} from 'react-router-dom';\r\nimport * as React from \"react\";\r\nimport {CHAT_ROUTE, LOGIN_ROUTE, privateRoutes, publicRoutes} from '../../../utils/routes';\r\n\r\n\r\nconst AppRoute:React.FC = () => {\r\n\r\n\r\n    return true ?\r\n        <Switch>\r\n            { privateRoutes.map ( ({path, Component}) => {\r\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\r\n            } ) }\r\n            <Redirect to={ CHAT_ROUTE }/>\r\n        </Switch>\r\n        :\r\n        <Switch>\r\n            { publicRoutes.map ( ({path, Component}) => {\r\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\r\n            } ) }\r\n            <Redirect to={ LOGIN_ROUTE }/>\r\n        </Switch>\r\n}\r\n\r\n\r\nexport default AppRoute;\r\n","import {makeAutoObservable} from \"mobx\";\r\n\r\n\r\nexport interface IMe {\r\n    name: string;\r\n    id: string;\r\n\r\n}\r\n\r\ninterface IMEStore {\r\n    me: IMe;\r\n}\r\n\r\nclass MeStore implements IMEStore {\r\n    me = {name: ''} as IMe;\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable ( this, {}, {deep: true} );\r\n    }\r\n\r\n    setMe(item: IMe) {\r\n        this.me = item;\r\n\r\n    };\r\n\r\n}\r\n\r\nexport default MeStore;","import * as React from 'react';\r\nimport {useState} from 'react';\r\nimport {NavBar} from \"../NavBar/NavBar\";\r\nimport AppRoute from \"./AppRoute/AppRoute\";\r\nimport './App.css';\r\nimport {Loader} from \"../Loader/Loader\";\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Button, Grid, TextField} from \"@mui/material\";\r\nimport ChatStore, {MESSAGE_ENUM} from \"../../state/chatStore\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {MyContext} from '../../state/context';\r\nimport {useFormik} from \"formik\";\r\nimport MeStore from \"../../state/meStore\";\r\n\r\n\r\nconst App: React.FC = observer(() => {\r\n    const [chat] = useState(() => new ChatStore())\r\n    const [me] = useState(() => new MeStore())\r\n    const setName = () => me.setMe({id: Date.now().toString(), name: chat.nameValue})\r\n    const [socket, setSocket] = useState<WebSocket | null>(null)\r\n    const value = React.useMemo(() => [chat, socket], [chat, socket])\r\n\r\n    const connect = async () => {\r\n        setName()\r\n        chat.setLoading(true);\r\n        setSocket(await new WebSocket('wss://ws-simple-chat-api.herokuapp.com'));\r\n        // setSocket(await new WebSocket('ws://localhost:5000'));\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: 'введите ваше имя',\r\n        },\r\n        onSubmit: (values) => connect(),\r\n    });\r\n\r\n\r\n    if (socket) {\r\n        socket.onmessage = (messageEvent: MessageEvent) => {\r\n            chat.setMessages(JSON.parse(messageEvent.data))\r\n        }\r\n        socket.onopen = () => {\r\n            chat.setConnected(true);\r\n            const message = {\r\n                event: MESSAGE_ENUM.CONNECTION,\r\n                id: me.me.id,\r\n                name: chat.nameValue,\r\n                body: '',\r\n            };\r\n            socket?.send(JSON.stringify(message));\r\n            chat.setLoading(false);\r\n        };\r\n        socket.onmessage = (event: MessageEvent) => {\r\n            const messages = JSON.parse(event.data);\r\n            chat.setMessages(messages);\r\n        };\r\n        socket.onclose = () => {\r\n            chat.setConnected(false);\r\n            const message = {\r\n                event: MESSAGE_ENUM.CONNECTION,\r\n                id: me.me.id,\r\n                name: chat.nameValue,\r\n                body: '',\r\n            };\r\n            socket.send(JSON.stringify(message));\r\n        };\r\n        socket.onerror = () => {\r\n            chat.setConnected(false);\r\n            setTimeout(() => connect(), 1000);\r\n        };\r\n    }\r\n\r\n    if (chat.isLoading) return <Loader/>;\r\n    const onChatDisabler = chat.nameValue?.trim().length < 3;\r\n\r\n\r\n    return (\r\n        <HashRouter>\r\n            <MyContext.Provider value={value}>\r\n                <NavBar/>\r\n                {!chat.isConnected ?\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <Grid container justifyContent={\"center\"} alignItems={\"stretch\"}>\r\n                                <TextField variant=\"filled\"\r\n                                           onChange={e => chat.setNameValue(e.currentTarget.value)}\r\n                                           value={chat.nameValue}\r\n                                           id=\"name\" name=\"name\" label=\"name\"\r\n                                />\r\n                                <Button type=\"submit\" disabled={onChatDisabler} color={'info'}\r\n                                        variant={'contained'}>connect</Button>\r\n                        </Grid>\r\n                    </form>\r\n                    :\r\n                    <AppRoute/>\r\n                }\r\n            </MyContext.Provider>\r\n        </HashRouter>\r\n    );\r\n});\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./components/App/App\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}