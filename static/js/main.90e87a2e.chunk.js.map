{"version":3,"sources":["state/context.ts","reportWebVitals.ts","components/NavBar/styles.ts","state/chatStore.ts","components/Clock/styles.ts","utils/time.ts","components/Clock/Clock.tsx","components/NavBar/NavBar.tsx","components/Loader/Loader.tsx","components/Chat/styles.ts","components/Message/styles.ts","components/Message/Message.tsx","components/Emoji/styles.ts","components/Emoji/Emoji.tsx","components/Chat/Chat.tsx","utils/routes.ts","components/App/AppRoute/AppRoute.tsx","components/App/App.tsx","index.tsx"],"names":["MyContext","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStyles","makeStyles","root","justifyContent","display","gridTemplateRows","title","justifyItems","onlineCounter","color","React","defaultValue","MESSAGE_ENUM","timeRoot","fontSize","fontFamily","getTime","date","getTwoDig","time","string","toString","length","hour","getHours","min","getMinutes","sec","getSeconds","timeConverter","UNIX_timestamp","a","Date","year","getFullYear","month","getMonth","getDate","Clock","props","children","useState","setTime","styles","useEffect","clearId","setTimeout","clearInterval","className","NavBar","observer","useContext","chat","connectionCounter","AppBar","variant","elevation","position","Toolbar","toUpperCase","Loader","Container","Grid","container","alignItems","style","height","window","innerHeight","CircularProgress","messagesRoot","maxHeight","messages","width","backgroundColor","overflowY","newMessageRoot","rowGap","sendButton","textField","mainBlock","minWidth","margin","borderRadius","maxWidth","padding","info","name","copy","cursor","opacity","top","ChatStore","me","messageValue","nameValue","isLoading","isConnected","makeAutoObservable","this","deep","item","value","count","Message","isMe","message","event","CONNECTION","setConnectionCounter","marginLeft","marginRight","paddingRight","direction","MESSAGE","justifySelf","borderBottom","body","onClick","navigator","clipboard","writeText","right","left","id","emojiRoot","zIndex","picker","Emoji","frameWidth","isShowEmoji","setIsShowEmoji","classNames","onBlur","native","groupNames","smileys_people","disableAutoFocus","onEmojiClick","emojiObject","setMessageValue","emoji","skinTone","SKIN_TONE_MEDIUM_DARK","Button","Chat","socket","chatRef","useRef","formik","useFormik","initialValues","onSubmit","values","trim","now","send","JSON","stringify","sendMessage","messagesLength","current","scrollTo","scrollHeight","scrollToBottom","handleSubmit","ref","map","mes","TextField","label","autoComplete","onChange","e","currentTarget","clientWidth","type","classes","outlined","CHAT_ROUTE","privateRoutes","path","Component","AppRoute","component","exact","to","App","setSocket","connect","setMe","setLoading","WebSocket","onmessage","messageEvent","setMessages","parse","data","onopen","setConnected","onclose","onerror","onChatDisabler","Provider","setNameValue","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.90e87a2e.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nlet defaultValue: any;\r\nexport let MyContext: React.Context<any>;\r\nMyContext = React.createContext (defaultValue);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { makeStyles } from '@mui/styles';\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    root:{\r\n        justifyContent:\"space-around\",\r\n        display:\"grid\",\r\n        gridTemplateRows:'1fr 5fr 1fr',\r\n    },\r\n    title: {\r\n        display:\"grid\",\r\n        gridTemplateRows:'1fr 1fr',\r\n        justifyItems:\"flex-end\",\r\n    },\r\n    onlineCounter:{\r\n        color:\"grey\"\r\n    }\r\n});","import {makeAutoObservable} from \"mobx\";\r\n\r\n\r\nexport enum MESSAGE_ENUM {\r\n    MESSAGE = 'message',\r\n    QUIT = 'quit',\r\n    CONNECTION = 'connection'\r\n}\r\n\r\n\r\nexport interface IMessage {\r\n    event: MESSAGE_ENUM;\r\n    id: string;\r\n    name: string;\r\n    body: string;\r\n    connectionCounter: number;\r\n}\r\n\r\nexport interface IMe {\r\n    name: string;\r\n    id: string;\r\n\r\n}\r\n\r\ninterface IChat {\r\n    me: IMe;\r\n    messages: IMessage[];\r\n    messageValue: string;\r\n    nameValue: string;\r\n    isLoading: boolean;\r\n    isConnected: boolean;\r\n    connectionCounter?: number;\r\n    setMe: (item: IMe) => void;\r\n    setConnected: (isConnected: boolean) => void;\r\n    setLoading: (isLoading: boolean) => void;\r\n    setMessageValue: (value: string) => void;\r\n    setNameValue: (value: string) => void;\r\n    setMessages: (messages: any) => void;\r\n}\r\n\r\nclass ChatStore implements IChat {\r\n    me = {name: ''} as IMe;\r\n    messages = [] as IMessage[];\r\n    messageValue = '';\r\n    nameValue = '';\r\n    isLoading = false;\r\n    isConnected = false;\r\n    connectionCounter = 0;\r\n\r\n    constructor() {\r\n        makeAutoObservable ( this, {}, {deep: true} );\r\n    }\r\n\r\n    setMe(item: IMe) {\r\n        this.me = item;\r\n\r\n    };\r\n\r\n    setConnected(isConnected: boolean) {\r\n        this.isConnected = isConnected;\r\n    };\r\n\r\n    setLoading(isLoading: boolean) {\r\n        this.isLoading = isLoading;\r\n    };\r\n\r\n    setMessageValue(value: string) {\r\n        this.messageValue = value;\r\n    };\r\n\r\n    setNameValue(value: string) {\r\n        this.nameValue = value;\r\n    };\r\n\r\n    setMessages(messages: any) {\r\n        this.messages =  [...this.messages,...messages, ];\r\n\r\n    };\r\n\r\n    setConnectionCounter(count: number) {\r\n        this.connectionCounter = count;\r\n    };\r\n}\r\n\r\nexport default ChatStore;","import { makeStyles } from '@mui/styles';\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    timeRoot:{\r\n       fontSize:24,\r\n        fontFamily:\"monospace\"\r\n    },\r\n});","\r\n\r\n\r\nexport const getTime = (date:Date) => {\r\n    const getTwoDig = (time:number) => {\r\n        const string = time.toString()\r\n        return string.length > 1 ? string : `0${string}`\r\n    }\r\n    const hour = getTwoDig(date.getHours())\r\n    const min = getTwoDig(date.getMinutes())\r\n    const sec = getTwoDig(date.getSeconds())\r\n    return `${ hour }: ${min }: ${ sec }`\r\n}\r\n\r\nconst timeFromUnix = (date:number) => {\r\n    return new Date(date * 1000)\r\n}\r\n\r\nexport const getDate = (date:number) => {\r\n    const fullDate = timeFromUnix(date)\r\n    const year = fullDate.getFullYear()\r\n    const month = fullDate.getMonth()\r\n    const day = fullDate.getDay()\r\n    return `${ year }: ${month }: ${ day }`\r\n}\r\nexport const timeConverter = (UNIX_timestamp:number) => {\r\n    // weird\r\n    const a = new Date(UNIX_timestamp / 1000);\r\n    const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n    const year = a.getFullYear();\r\n    const month = months[a.getMonth()];\r\n    const date = a.getDate();\r\n    const hour = a.getHours();\r\n    const min = a.getMinutes();\r\n    const sec = a.getSeconds();\r\n    const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\r\n    return time;\r\n}","import * as React from 'react';\r\nimport {useEffect, useState} from 'react';\r\nimport {useStyles} from './styles'\r\nimport {getTime} from \"../../utils/time\";\r\n\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\nexport const Clock: React.FC<IProps> = (props) => {\r\n    const {children} = props;\r\n    const [time, setTime] = useState ( new Date () );\r\n    const styles = useStyles()\r\n\r\n    useEffect ( () => {\r\n        const clearId = setTimeout ( () => setTime ( new Date () ), 5000 );\r\n        return () => clearInterval ( clearId );\r\n    }, [time] );\r\n\r\n    return (\r\n        <div className={styles.timeRoot}>\r\n            { getTime(time)}\r\n        </div>\r\n    );\r\n};","import * as React from 'react';\r\nimport {useContext} from 'react';\r\nimport {AppBar, Toolbar} from '@mui/material';\r\nimport {useStyles} from \"./styles\";\r\nimport {MyContext} from \"../../state/context\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Clock} from \"../Clock/Clock\";\r\n\r\n\r\n\r\ntype Props = {};\r\nexport const NavBar: React.FC<Props> = observer((props) => {\r\n    const [chat,socket] = useContext ( MyContext );\r\n    const {connectionCounter} = chat;\r\n    const styles = useStyles()\r\n    return (\r\n        <AppBar color={ \"transparent\" } variant={\"outlined\"} elevation={0} position=\"static\">\r\n            <Toolbar className={styles.root} >\r\n                <div/>\r\n                <div className={styles.title}>\r\n                    <strong>{'Живые и прочие'.toUpperCase()}</strong>\r\n                    <span className={styles.onlineCounter}>сейчас онлайн: { connectionCounter || 0 } человек </span>\r\n                </div>\r\n                <Clock/>\r\n                {/* <Grid container>\r\n                    { true\r\n                        ?\r\n                        <Button onClick={ () => {} } variant={ 'outlined' }>Logout</Button>\r\n                        :\r\n                        <NavLink to={ LOGIN_ROUTE }>< Button variant={ 'outlined' }>Login</Button></NavLink>\r\n                    }\r\n                </Grid>*/}\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n});","// @flow\r\nimport {CircularProgress, Container, Grid} from '@mui/material';\r\nimport * as React from 'react';\r\n\r\n\r\ntype Props = {\r\n\r\n};\r\nexport const Loader = (props: Props) => {\r\n    return (\r\n        <Container>\r\n            <Grid container alignItems={\"center\"} justifyContent={\"center\"} style={{height: window.innerHeight-30}}>\r\n                    <CircularProgress color=\"primary\" />\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};","import {makeStyles} from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n    messagesRoot: {\r\n        maxHeight: window.innerHeight - 30\r\n    },\r\n    messages: {\r\n        width: '100%',\r\n        height: '70vh',\r\n        backgroundColor: '#354765',\r\n        overflowY: 'auto'\r\n    },\r\n    newMessageRoot: {\r\n        position: 'relative',\r\n        width: '100%',\r\n        rowGap: 20,\r\n        color: '#ffffff'\r\n    },\r\n    sendButton:{\r\n        backgroundColor: '#354765',\r\n        color: '#ffffff',\r\n        width:'20%',\r\n        height:56,\r\n        '&:hover':{\r\n            backgroundColor: '#7094d2',\r\n            color: '#354765',\r\n        }\r\n    },\r\n    textField:{\r\n        width:'80%'\r\n    }\r\n})","import { makeStyles } from '@mui/styles';\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    mainBlock:{\r\n        minWidth: '20vw',\r\n        margin: 10,\r\n        borderRadius: '4%',\r\n        maxWidth: '60%',\r\n        width: 'fit-content',\r\n        padding: 15,\r\n        display: 'grid',\r\n        justifyContent:'flexStart',\r\n        rowGap: 20,\r\n        fontFamily: 'serif',\r\n        position:'relative'\r\n    },\r\n    info: {\r\n        color:'#afbed2',\r\n        margin:'20px 30px'\r\n    },\r\n    name:{\r\n        fontFamily: 'sans-serif',\r\n        display:'block',maxWidth:'max-content'\r\n    },\r\n    copy:{\r\n        cursor:\"pointer\",\r\n        position:\"absolute\",\r\n        opacity:0.7,\r\n        top:8\r\n\r\n    },\r\n    date:{\r\n        fontSize:'0.7em'\r\n    }\r\n});","import * as React from 'react';\r\nimport {Grid} from \"@mui/material\";\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport {useStyles} from \"./styles\";\r\nimport ChatStore, {MESSAGE_ENUM} from \"../../state/chatStore\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {getDate, timeConverter} from \"../../utils/time\";\r\nimport {useState} from \"react\";\r\n\r\n\r\ntype Props = {\r\n    isMe: boolean;\r\n    message: any;\r\n};\r\nexport const Message: React.FC<Props> = observer((props) => {\r\n    const {isMe, message} = props;\r\n    const [chat] = useState(() => new ChatStore())\r\n    const styles = useStyles ();\r\n    const onCopy = () =>  navigator.clipboard.writeText(message.body)\r\n    if (message.event === MESSAGE_ENUM.CONNECTION) {\r\n        chat.setConnectionCounter(message.connectionCounter);\r\n    }\r\n    const style = {\r\n        backgroundColor: isMe ? '#3a64a8' : '#536f9b',\r\n        color:  isMe ? '#f6dbaa' :'#eee4cc',\r\n        marginLeft: isMe ? 'auto' : '10%',\r\n        marginRight: isMe ? '10%' : 0,\r\n        paddingRight:10\r\n\r\n    };\r\n    return (\r\n        <Grid key={ message.id } direction={ \"column\" } container>\r\n            { message.event === MESSAGE_ENUM.MESSAGE\r\n                ? <div className={styles.mainBlock} style={ style }>\r\n                    <h3 className={styles.name}\r\n                        style={\r\n                            {justifySelf:`${!isMe && 'flex-end'}`,borderBottom:`2px solid ${isMe ? '#f6dbaa' :'#eee4cc' }`}\r\n                        }>\r\n                        { message.name.toUpperCase() }\r\n                    </h3>\r\n                    <span>{ message.body }</span>\r\n                    <span className={styles.date}>{ timeConverter(message.date * 1000)  }</span>\r\n                    <div onClick={onCopy} style={isMe ? {right:2} : {left:6}\r\n                    } title={'скопировать сообщение'} className={styles.copy}>\r\n                        <ContentCopyIcon/>\r\n                    </div>\r\n            </div>\r\n                : message.event === MESSAGE_ENUM.CONNECTION ?\r\n                    <span className={ styles.info }>{ message.name } подключился к чату.. .</span>\r\n                    : <span className={ styles.info }>{ message.name } вышел из чата.. .</span> }\r\n        </Grid>\r\n    );\r\n});","import {makeStyles} from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n    emojiRoot: {\r\n        position: \"absolute\",\r\n        zIndex: 1,\r\n        top: 10,\r\n\r\n    },\r\n\r\n    picker:{\r\n        top:-350\r\n    },\r\n\r\n})","import * as React from 'react';\r\nimport {useContext, useState} from 'react';\r\nimport classNames from \"classnames\";\r\nimport Picker, {SKIN_TONE_MEDIUM_DARK} from \"emoji-picker-react\";\r\nimport {Button} from \"@mui/material\";\r\nimport EmojiEmotionsIcon from \"@mui/icons-material/EmojiEmotions\";\r\nimport {useStyles} from \"./styles\";\r\nimport {MyContext} from \"../../state/context\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\n\r\n\r\ninterface IProps  {\r\n    frameWidth?:number\r\n}\r\n\r\nexport const Emoji: React.FC<IProps> = observer((props) => {\r\n    const {children,frameWidth = 0} = props;\r\n    const [chat,socket] = useContext ( MyContext );\r\n    const styles = useStyles ();\r\n    const [isShowEmoji, setIsShowEmoji] = useState ( false );\r\n    const showImoji = () => setIsShowEmoji ( true );\r\n    const hideImoji = () => setIsShowEmoji ( false );\r\n    const onEmojiClick = (event: any, emojiObject: any) => {\r\n        chat.setMessageValue ( emojiObject.emoji ) ;\r\n    };\r\n    return (\r\n        <div style={{right:`${frameWidth * 0.2}px`}} className={ classNames ( styles.emojiRoot, {[styles.picker]: isShowEmoji} ) }\r\n             onBlur={ hideImoji }>\r\n            { isShowEmoji\r\n                ? <Picker native groupNames={ {smileys_people: \"PEOPLE\"} } disableAutoFocus={ true }\r\n                          onEmojiClick={ onEmojiClick } skinTone={ SKIN_TONE_MEDIUM_DARK }/>\r\n                : <Button onClick={ showImoji }><EmojiEmotionsIcon/></Button> }\r\n        </div>\r\n    );\r\n});","import * as React from 'react';\r\nimport {useContext, useEffect, useRef} from 'react';\r\nimport {Button, Container, Grid, TextField} from '@mui/material';\r\nimport {Loader} from \"../Loader/Loader\";\r\nimport {useStyles} from \"./styles\";\r\nimport {Message} from \"../Message/Message\";\r\nimport {Emoji} from \"../Emoji/Emoji\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {IMessage} from '../../state/chatStore';\r\nimport {MyContext} from \"../../state/context\";\r\nimport {useFormik} from 'formik';\r\n\r\ntype Props = {}\r\n\r\n\r\nexport const Chat: React.FC<Props> = observer(((props) => {\r\n    const [chat, socket] = useContext(MyContext);\r\n    const chatRef = useRef<HTMLDivElement>(null);\r\n    const styles = useStyles();\r\n\r\n    const sendMessage = () => {\r\n        if (!chat.messageValue.trim()) return\r\n\r\n        const message = {\r\n            event: 'message',\r\n            id: Date.now().toString(),\r\n            name: chat.me.name,\r\n            body: chat.messageValue,\r\n        };\r\n\r\n        socket?.send(JSON.stringify(message));\r\n        chat.setMessageValue('');\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: 'введите сообщение',\r\n        },\r\n        onSubmit: (values) => sendMessage(),\r\n    });\r\n\r\n    const messagesArray = chat.messages\r\n    const messagesLength = messagesArray.length\r\n\r\n    const scrollToBottom = () => {\r\n        chatRef.current?.scrollTo(0, chatRef.current.scrollHeight);\r\n    };\r\n\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n    },);\r\n\r\n    if (chat.isLoading) return <Loader/>;\r\n    return (\r\n        <Container >\r\n            <form onSubmit={formik.handleSubmit}>\r\n            <Grid container className={styles.messagesRoot} alignItems={\"center\"}>\r\n                <Grid ref={chatRef} className={styles.messages}>\r\n                    {messagesLength && chat.messages.map((mes: IMessage) => {\r\n                        const isMe = chat.nameValue === mes.name;\r\n                        return <Message key={mes.id} isMe={isMe} message={mes}/>;\r\n                    })}\r\n                </Grid>\r\n            </Grid>\r\n                <Grid className={styles.newMessageRoot} container direction={'row'} alignItems={'flex-end'}>\r\n                    <TextField id={'message'} name={'message'} label={'message'} variant=\"filled\"\r\n                               autoComplete={'off'} onChange={e => chat.setMessageValue(e.currentTarget.value)}\r\n                               value={chat.messageValue} className={styles.textField}\r\n                    />\r\n                    <Emoji frameWidth={chatRef.current?.clientWidth}/>\r\n                    <Button  type={'submit'} variant={'outlined'}\r\n                            classes={{outlined: styles.sendButton}}><strong>send</strong></Button>\r\n\r\n                </Grid>\r\n            </form>\r\n        </Container>\r\n    );\r\n}));","import { Chat } from \"../components/Chat/Chat\"\r\nimport { Login } from \"../components/Login/Login\"\r\n\r\n\r\nexport const LOGIN_ROUTE = '/LOGIN_ROUTE'\r\nexport const CHAT_ROUTE = '/CHAT_ROUTE'\r\n\r\n\r\nexport const publicRoutes =[\r\n    {\r\n        path:LOGIN_ROUTE,\r\n        Component: Login\r\n    }\r\n]\r\n\r\nexport const privateRoutes =[\r\n    {\r\n        path: CHAT_ROUTE,\r\n        Component: Chat\r\n    }\r\n]\r\n\r\n","import {Redirect, Route, Switch} from 'react-router-dom';\r\nimport * as React from \"react\";\r\nimport {CHAT_ROUTE, LOGIN_ROUTE, privateRoutes, publicRoutes} from '../../../utils/routes';\r\n\r\n\r\nconst AppRoute:React.FC = () => {\r\n\r\n\r\n    return true ?\r\n        <Switch>\r\n            { privateRoutes.map ( ({path, Component}) => {\r\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\r\n            } ) }\r\n            <Redirect to={ CHAT_ROUTE }/>\r\n        </Switch>\r\n        :\r\n        <Switch>\r\n            { publicRoutes.map ( ({path, Component}) => {\r\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\r\n            } ) }\r\n            <Redirect to={ LOGIN_ROUTE }/>\r\n        </Switch>\r\n}\r\n\r\n\r\nexport default AppRoute;\r\n","import * as React from 'react';\r\nimport {useState} from 'react';\r\nimport {NavBar} from \"../NavBar/NavBar\";\r\nimport AppRoute from \"./AppRoute/AppRoute\";\r\nimport './App.css';\r\nimport {Loader} from \"../Loader/Loader\";\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Button, Grid, TextField} from \"@mui/material\";\r\nimport ChatStore, {MESSAGE_ENUM} from \"../../state/chatStore\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {MyContext} from '../../state/context';\r\nimport {useFormik} from \"formik\";\r\n\r\n\r\nconst App: React.FC = observer(() => {\r\n    const [chat] = useState(() => new ChatStore())\r\n    const setName = () => chat.setMe({id: Date.now().toString(), name: chat.nameValue})\r\n    const [socket, setSocket] = useState<WebSocket | null>(null)\r\n    const value = React.useMemo(() => [chat, socket], [chat, socket])\r\n\r\n    const connect = async () => {\r\n        setName()\r\n        chat.setLoading(true);\r\n        setSocket(await new WebSocket('wss://ws-simple-chat-api.herokuapp.com'));\r\n        // setSocket(await new WebSocket('ws://localhost:5000'));\r\n    };\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: 'введите ваше имя',\r\n        },\r\n        onSubmit: (values) => connect(),\r\n    });\r\n\r\n\r\n    if (socket) {\r\n        socket.onmessage = (messageEvent: MessageEvent) => {\r\n            chat.setMessages(JSON.parse(messageEvent.data))\r\n        }\r\n        socket.onopen = () => {\r\n            chat.setConnected(true);\r\n            const message = {\r\n                event: MESSAGE_ENUM.CONNECTION,\r\n                id: chat.me.id,\r\n                name: chat.nameValue,\r\n                body: '',\r\n            };\r\n            socket?.send(JSON.stringify(message));\r\n            chat.setLoading(false);\r\n        };\r\n        socket.onmessage = (event: MessageEvent) => {\r\n            const messages = JSON.parse(event.data);\r\n            chat.setMessages(messages);\r\n        };\r\n        socket.onclose = () => {\r\n            chat.setConnected(false);\r\n            const message = {\r\n                event: MESSAGE_ENUM.CONNECTION,\r\n                id: chat.me.id,\r\n                name: chat.nameValue,\r\n                body: '',\r\n            };\r\n            socket.send(JSON.stringify(message));\r\n        };\r\n        socket.onerror = () => {\r\n            chat.setConnected(false);\r\n            setTimeout(() => connect(), 1000);\r\n        };\r\n    }\r\n\r\n    if (chat.isLoading) return <Loader/>;\r\n    const onChatDisabler = chat.nameValue?.trim().length < 3;\r\n\r\n\r\n    return (\r\n        <HashRouter>\r\n            <MyContext.Provider value={value}>\r\n                <NavBar/>\r\n                {!chat.isConnected ?\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <Grid container justifyContent={\"center\"} alignItems={\"stretch\"}>\r\n                                <TextField variant=\"filled\"\r\n                                           onChange={e => chat.setNameValue(e.currentTarget.value)}\r\n                                           value={chat.nameValue}\r\n                                           id=\"name\" name=\"name\" label=\"name\"\r\n                                />\r\n                                <Button type=\"submit\" disabled={onChatDisabler} color={'info'}\r\n                                        variant={'contained'}>connect</Button>\r\n                        </Grid>\r\n                    </form>\r\n                    :\r\n                    <AppRoute/>\r\n                }\r\n            </MyContext.Provider>\r\n        </HashRouter>\r\n    );\r\n});\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./components/App/App\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}