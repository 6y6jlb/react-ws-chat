{"version":3,"sources":["components/App/reducer.ts","reportWebVitals.ts","components/NavBar/styles.ts","components/NavBar/NavBar.tsx","components/Loader/Loader.tsx","components/Chat/styles.ts","utils/routes.ts","components/Chat/Chat.tsx","components/App/AppRoute/AppRoute.tsx","components/App/App.tsx","index.tsx"],"names":["MyContext","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","React","defaultValue","MESSAGE_ENUM","initialState","me","name","messages","messageValue","nameValue","isLoading","isConnected","reducer","state","action","type","payload","Error","setConnected","setLoading","setMessageValue","value","setMessages","useStyles","makeStyles","root","justifyContent","title","display","gridTemplateRows","NavBar","useContext","styles","AppBar","color","variant","position","Toolbar","className","Loader","props","Container","Grid","container","alignItems","style","height","window","innerHeight","CircularProgress","info","margin","privateRoutes","path","Component","dispatch","socket","chatRef","useRef","useEffect","current","scrollIntoView","behavior","scrollToBottom","maxHeight","width","backgroundColor","overflowY","length","map","mes","isMe","minWidth","borderRadius","marginLeft","marginRight","maxWidth","padding","rowGap","fontFamily","key","id","direction","event","MESSAGE","body","CONNECTION","ref","TextField","onChange","e","currentTarget","fullWidth","Button","onClick","message","Date","now","toString","send","JSON","stringify","scrollTo","scrollHeight","AppRoute","component","exact","to","App","useReducer","useState","setSocket","connect","a","WebSocket","onmessage","messageEvent","parse","data","onopen","console","log","onclose","onerror","setTimeout","onChatDisabler","trim","Provider","setNameValue","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8MAGWA,E,iCCWIC,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,mEDLdF,EAAYU,qBAFRC,GAIG,IAoEKC,EApECC,EAAe,CACxBC,GAAI,CAACC,KAAK,IACVC,SAAU,GACVC,aAAc,GACdC,UAAW,GACXC,WAAW,EACXC,aAAa,GAQJC,EAAU,SAACC,EAAcC,GAClC,OAAQA,EAAOC,MACX,IAAK,SACL,IAAK,cACL,IAAK,oBACL,IAAK,iBACL,IAAK,gBACD,OAAO,2BAAIF,GAAUC,EAAOE,SAChC,IAAK,eACD,OAAO,2BAAIH,GAAX,IAAkBN,SAAS,GAAD,mBAAKM,EAAMN,UAAX,CAAqBO,EAAOE,QAAQT,aAClE,QACI,MAAM,IAAIU,QAWTC,EAAe,SAACP,GACzB,MAAO,CACHI,KAAM,gBACNC,QAAS,CAACL,iBAILQ,EAAa,SAACT,GACvB,MAAO,CACHK,KAAM,cACNC,QAAS,CAACN,eAGLU,EAAkB,SAACC,GAC5B,MAAO,CACHN,KAAM,oBACNC,QAAS,CAACR,aAAca,KASnBC,EAAc,SAACf,GACxB,MAAO,CACHQ,KAAM,eACNC,QAAS,CAACT,e,SAINJ,K,kBAAAA,E,YAAAA,E,yBAAAA,M,kBEvECoB,EAAYC,YAAW,CAChCC,KAAK,CACDC,eAAe,UAEnBC,MAAO,CACHC,QAAQ,OACRC,iBAAiB,aCDZC,EAA0B,WACnC,MAAkCC,qBAAaxC,GAA/C,mBACMyC,GADN,eACeT,KACf,OACI,gBAACU,EAAA,EAAD,CAAQC,MAAQ,cAAgBC,QAAS,WAAYC,SAAS,UAC1D,gBAACC,EAAA,EAAD,CAASC,UAAWN,EAAOP,MACvB,uBAAKa,UAAWN,EAAOL,OAAO,0O,qDCNjCY,EAAS,SAACC,GACnB,OACI,gBAACC,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,WAAY,SAAUlB,eAAgB,SAAUmB,MAAO,CAACC,OAAQC,OAAOC,YAAY,KAC3F,gBAACC,EAAA,EAAD,CAAkBf,MAAM,eCT/BX,EAAYC,YAAW,CAChC0B,KAAM,CACFhB,MAAM,UACNiB,OAAO,eCSFC,G,OAAe,CACxB,CACIC,KAZkB,cAalBC,UCV6B,SAACd,GAClC,MAAkCT,qBAAaxC,GAA/C,mBAAOsB,EAAP,KAAc0C,EAAd,KAAwBC,EAAxB,KACMC,EAAUC,iBAAyB,MACnC1B,EAAST,IAOfoC,qBAAU,YAJa,WAAO,IAAD,EACzB,UAAAF,EAAQG,eAAR,SAAiBC,eAAe,CAAEC,SAAU,WAI5CC,KACD,CAAClD,IAcJ,OAAIA,EAAMH,UAAkB,gBAAC,EAAD,MAGxB,gBAAC+B,EAAA,EAAD,KACI,gBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,WAAa,SAAWC,MAAQ,CAACmB,UAAWjB,OAAOC,YAAc,KAC7E,uBAAKH,MAAQ,CAACoB,MAAO,MAAOnB,OAAQ,OAAQoB,gBAAiB,UAAWC,UAAW,SAC7EtD,EAAMN,SAAS6D,QAAUvD,EAAMN,SAAS8D,KAAM,SAACC,GAC7C,IAAMC,EAAO1D,EAAMJ,YAAc6D,EAAIhE,KAC/BuC,EAAQ,CACV2B,SAAS,OACTrB,OAAQ,GACRe,gBAAiBK,EAAO,UAAY,UACpCrC,MAAO,UACPuC,aAAc,KACdC,WAAYH,EAAO,OAAS,MAC5BI,YAAaJ,EAAO,MAAQ,EAC5BK,SAAU,MACVX,MAAO,cACPY,QAAS,GACTjD,QAAQ,OACRkD,OAAO,GACPC,WAAW,QACX,gBAAgB,CACZA,WAAW,eAGnB,OACI,gBAACrC,EAAA,EAAD,CAAMsC,IAAKV,EAAIW,GAAIC,UAAY,SAAWvC,WAAS,GAC7C2B,EAAIa,QAAUhF,EAAaiF,QACvB,uBAAKvC,MAAOA,GAAO,0BAAMyB,EAAIhE,MAC3B,4BAASgE,EAAIe,OAChBf,EAAIa,QAAUhF,EAAamF,WAAa,wBAAMhD,UAAWN,EAAOkB,MAAQoB,EAAIhE,KAApC,2GAC3C,wBAAOgC,UAAWN,EAAOkB,MAAQoB,EAAIhE,KAArC,6EACF,uBAAKiF,IAAM9B,SAM3B,gBAACf,EAAA,EAAD,CAAMC,WAAS,EAACuC,UAAY,SAAWtC,WAAa,WAC9CC,MAAQ,CAACoB,MAAO,MAAOa,OAAQ,GAAI5C,MAAO,YAC5C,gBAACsD,EAAA,EAAD,CAAWrD,QAAQ,SAASsD,SAAW,SAAAC,GAAC,OAAInC,EAAWnC,EAAkBsE,EAAEC,cAActE,SAC9EA,MAAQR,EAAML,aAAeoF,WAAS,IAEjD,gBAACC,EAAA,EAAD,CAAQhD,MAAQ,CAACqB,gBAAiB,UAAWhC,MAAO,WAAa4D,QAxD7D,WAAO,IAAD,EAChBC,EAAU,CACZZ,MAAO,UACPF,GAAIe,KAAKC,MAAOC,WAChB5F,KAAMO,EAAMR,GAAGC,KACf+E,KAAMxE,EAAML,cAGV,OAANgD,QAAM,IAANA,KAAQ2C,KAAOC,KAAKC,UAAYN,IAChCxC,EAAWnC,EAAkB,KAC7B,UAAAqC,EAAQG,eAAR,SAAiB0C,SAAW,EAAG7C,EAAQG,QAAQ2C,eA+C3BpE,QAAU,YADlB,eCrDLqE,EApBW,WAGtB,OACI,gBAAC,IAAD,KACMpD,EAAciB,KAAM,YAAwB,IAAtBhB,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UAC1B,OAAO,gBAAC,IAAD,CAAO0B,IAAM3B,EAAOA,KAAOA,EAAOoD,UAAYnD,EAAYoD,OAAQ,OAE7E,gBAAC,IAAD,CAAUC,GFRI,kB,gBGsGXC,EApFO,WAAO,IAAD,EACxB,EAA0BC,qBAAajG,EAASR,GAAhD,mBAAOS,EAAP,KAAc0C,EAAd,KAEA,EAA2BuD,mBAA2B,MAAtD,mBAAOtD,EAAP,KAAcuD,EAAd,KACM1F,EAAQpB,WAAc,iBAAM,CAACY,EAAO0C,EAAUC,KAAS,CAAC3C,EAAM2C,IAE9DwD,EAAO,uCAAG,sBAAAC,EAAA,sEAJM1D,ETYf,CACHxC,KAAM,SACNC,QAAS,CAACX,GSduB,CAAC4E,GAAGe,KAAKC,MAAMC,WAAW5F,KAAKO,EAAMJ,cAI1D,cAEZ8C,EAAWpC,GAAa,IAFZ,KAGZ4F,EAHY,SAGI,IAAIG,UAAY,yCAHpB,6EAAH,qDAkDb,GAxCI1D,IACAA,EAAO2D,UAAY,SAACC,GAChB7D,EAAWjC,EAAe8E,KAAKiB,MAAQD,EAAaE,SAExD9D,EAAO+D,OAAS,WACZhE,EAAWrC,GAAe,IAC1B,IAAM6E,EAAU,CACZZ,MAAOhF,EAAamF,WACpBL,GAAIpE,EAAMR,GAAG4E,GACb3E,KAAMO,EAAMJ,UACZ4E,KAAM,IAEJ,OAAN7B,QAAM,IAANA,KAAQ2C,KAAOC,KAAKC,UAAYN,IAChCxC,EAAWpC,GAAa,IACxBqG,QAAQC,IAAM,UAElBjE,EAAO2D,UAAY,SAAChC,GAChB,IAAM5E,EAAW6F,KAAKiB,MAAQlC,EAAMmC,MACpC/D,EAAWjC,EAAcf,IACzBiH,QAAQC,IAAM,iBAGlBjE,EAAOkE,QAAU,WACbnE,EAAWrC,GAAe,IAC1B,IAAM6E,EAAU,CACZZ,MAAOhF,EAAamF,WACpBL,GAAIpE,EAAMR,GAAG4E,GACb3E,KAAMO,EAAMJ,UACZ4E,KAAM,IAEVmC,QAAQC,IAAM,YACdjE,EAAO2C,KAAMC,KAAKC,UAAYN,KAElCvC,EAAOmE,QAAU,WACbpE,EAAWrC,GAAe,IAC1B0G,YAAa,kBAAMZ,MAAY,KAC/BQ,QAAQC,IAAM,cAIlB5G,EAAMH,UAAW,OAAO,gBAAC,EAAD,MAC5B,IAAMmH,GAAiB,UAAAhH,EAAMJ,iBAAN,eAAiBqH,OAAQ1D,QAAS,EAIzD,OACI,gBAAC,IAAD,KACI,gBAAC7E,EAAUwI,SAAX,CAAoB1G,MAAOA,GACvB,gBAAC,EAAD,MACGR,EAAMF,YAYL,gBAAC,EAAD,MAXA,gCACI,gBAAC+B,EAAA,EAAD,CAAMC,WAAS,EAACjB,eAAiB,SAAWkB,WAAa,WACrD,gBAAC4C,EAAA,EAAD,CAAWrD,QAAQ,SACRsD,SAAW,SAAAC,GAAC,OAAInC,ET/B3B,SAAClC,GACzB,MAAO,CACHN,KAAM,iBACNC,QAAS,CAACP,UAAWY,IS4BqC2G,CAAgBtC,EAAEC,cAActE,SAC3DA,MAAQR,EAAMJ,YAEzB,gBAACoF,EAAA,EAAD,CAAQoC,SAAWJ,EAAiB3F,MAAQ,OAAS4D,QAAUkB,EACvD7E,QAAU,aADlB,gBCvF5B+F,IAASC,OACP,kBAAC,IAAMC,WAAP,KACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SAM1B9I,M","file":"static/js/main.98934730.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nlet defaultValue: any;\r\nexport let MyContext: React.Context<any>;\r\nMyContext = React.createContext (defaultValue);\r\n\r\nexport const initialState = {\r\n    me: {name:''} as IMe,\r\n    messages: [] as IMessage[],\r\n    messageValue: '',\r\n    nameValue: '',\r\n    isLoading: false,\r\n    isConnected: false,\r\n\r\n\r\n};\r\n\r\nexport type State = typeof initialState\r\n\r\n\r\nexport const reducer = (state: State, action: ActionTypes) => {\r\n    switch (action.type) {\r\n        case 'set_me':\r\n        case 'set_loading':\r\n        case 'set_message_value':\r\n        case 'set_name_value':\r\n        case 'set_connected':\r\n            return {...state, ...action.payload};\r\n        case 'set_messages':\r\n            return {...state, messages:[...state.messages, action.payload.messages]};\r\n        default:\r\n            throw new Error ();\r\n    }\r\n};\r\n\r\n\r\nexport const setMe = (item: IMe) => {\r\n    return {\r\n        type: 'set_me' as const,\r\n        payload: {me: item},\r\n    };\r\n};\r\nexport const setConnected = (isConnected:boolean) => {\r\n    return {\r\n        type: 'set_connected' as const,\r\n        payload: {isConnected},\r\n    };\r\n};\r\n\r\nexport const setLoading = (isLoading: boolean) => {\r\n    return {\r\n        type: 'set_loading' as const,\r\n        payload: {isLoading},\r\n    };\r\n};\r\nexport const setMessageValue = (value: string) => {\r\n    return {\r\n        type: 'set_message_value' as const,\r\n        payload: {messageValue: value},\r\n    };\r\n};\r\nexport const setNameValue = (value: string) => {\r\n    return {\r\n        type: 'set_name_value' as const,\r\n        payload: {nameValue: value},\r\n    };\r\n};\r\nexport const setMessages = (messages: any) => {\r\n    return {\r\n        type: 'set_messages' as const,\r\n        payload: {messages},\r\n    };\r\n};\r\n\r\nexport enum MESSAGE_ENUM {\r\n   MESSAGE = 'message',\r\n   QUIT = 'quit',\r\n   CONNECTION = 'connection'\r\n}\r\n\r\nexport type ActionTypes =\r\n    ReturnType<typeof setMessages>\r\n    | ReturnType<typeof setMe>\r\n    | ReturnType<typeof setMessageValue>\r\n    | ReturnType<typeof setNameValue>\r\n    | ReturnType<typeof setLoading>\r\n    | ReturnType<typeof setConnected>\r\n\r\nexport interface IMessage {\r\n    event: MESSAGE_ENUM,\r\n    id: string,\r\n    name: string,\r\n    body: string\r\n}\r\n\r\nexport interface IMe {\r\n    name: string;\r\n    id: string;\r\n\r\n}\r\n\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { makeStyles } from '@mui/styles';\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    root:{\r\n        justifyContent:\"center\"\r\n    },\r\n    title: {\r\n        display:\"grid\",\r\n        gridTemplateRows:'1fr 1fr',\r\n    },\r\n});","import * as React from 'react';\r\nimport {useContext} from 'react';\r\nimport {AppBar, Toolbar} from '@mui/material';\r\nimport {MyContext} from \"../App/reducer\";\r\nimport {useStyles} from \"./styles\";\r\n\r\n\r\ntype Props = {};\r\nexport const NavBar: React.FC<Props> = () => {\r\n    const [state, dispatch, socket] = useContext ( MyContext );\r\n    const styles = useStyles()\r\n    return (\r\n        <AppBar color={ \"transparent\" } variant={\"outlined\"} position=\"static\">\r\n            <Toolbar className={styles.root} >\r\n                <div className={styles.title}><strong>Добро пожаловать имени Шалтай Болтая</strong>\r\n                    {/*{ socket && <span>сейчас онлайн { socket.readyState }</span> }*/}\r\n                </div>\r\n               {/* <Grid container>\r\n                    { true\r\n                        ?\r\n                        <Button onClick={ () => {} } variant={ 'outlined' }>Logout</Button>\r\n                        :\r\n                        <NavLink to={ LOGIN_ROUTE }>< Button variant={ 'outlined' }>Login</Button></NavLink>\r\n                    }\r\n                </Grid>*/}\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};","// @flow\r\nimport {CircularProgress, Container, Grid} from '@mui/material';\r\nimport * as React from 'react';\r\n\r\n\r\ntype Props = {\r\n\r\n};\r\nexport const Loader = (props: Props) => {\r\n    return (\r\n        <Container>\r\n            <Grid container alignItems={\"center\"} justifyContent={\"center\"} style={{height: window.innerHeight-30}}>\r\n                    <CircularProgress color=\"primary\" />\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};","import { makeStyles } from '@mui/styles';\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    info: {\r\n        color:'#afbed2',\r\n        margin:'20px 30px'\r\n    },\r\n});","import { Chat } from \"../components/Chat/Chat\"\r\nimport { Login } from \"../components/Login/Login\"\r\n\r\n\r\nexport const LOGIN_ROUTE = '/LOGIN_ROUTE'\r\nexport const CHAT_ROUTE = '/CHAT_ROUTE'\r\n\r\n\r\nexport const publicRoutes =[\r\n    {\r\n        path:LOGIN_ROUTE,\r\n        Component: Login\r\n    }\r\n]\r\n\r\nexport const privateRoutes =[\r\n    {\r\n        path: CHAT_ROUTE,\r\n        Component: Chat\r\n    }\r\n]\r\n\r\n","import * as React from 'react';\r\nimport {useContext, useEffect, useRef} from 'react';\r\nimport {Button, Container, Grid, TextField} from '@mui/material';\r\nimport {Loader} from \"../Loader/Loader\";\r\nimport {IMessage, MESSAGE_ENUM, MyContext, setMessageValue} from \"../App/reducer\";\r\nimport {useStyles} from \"./styles\";\r\n\r\ntype Props = {}\r\nexport const Chat: React.FC<Props> = (props) => {\r\n    const [state, dispatch, socket] = useContext ( MyContext );\r\n    const chatRef = useRef<HTMLDivElement> ( null )\r\n    const styles = useStyles()\r\n\r\n\r\n    const scrollToBottom = () => {\r\n        chatRef.current?.scrollIntoView({ behavior: \"smooth\" })\r\n    }\r\n\r\n    useEffect(() => {\r\n        scrollToBottom()\r\n    }, [state]);\r\n\r\n    const sendMessage = () => {\r\n        const message = {\r\n            event: 'message',\r\n            id: Date.now ().toString (),\r\n            name: state.me.name,\r\n            body: state.messageValue,\r\n        };\r\n\r\n        socket?.send ( JSON.stringify ( message ) );\r\n        dispatch ( setMessageValue ( '' ) );\r\n        chatRef.current?.scrollTo ( 0, chatRef.current.scrollHeight )\r\n    };\r\n    if (state.isLoading) return <Loader/>;\r\n\r\n    return (\r\n        <Container>\r\n            <Grid container alignItems={ \"center\" } style={ {maxHeight: window.innerHeight - 30} }>\r\n                <div style={ {width: '80%', height: '70vh', backgroundColor: '#354765', overflowY: 'auto'} }>\r\n                    { state.messages.length && state.messages.map ( (mes: IMessage) => {\r\n                        const isMe = state.nameValue === mes.name\r\n                        const style = {\r\n                            minWidth:'20vw',\r\n                            margin: 10,\r\n                            backgroundColor: isMe ? '#3a64a8' : '#224e94',\r\n                            color: '#ffffff',\r\n                            borderRadius: '4%',\r\n                            marginLeft: isMe ? 'auto' : '10%',\r\n                            marginRight: isMe ? '10%' : 0,\r\n                            maxWidth: '40%',\r\n                            width: 'fit-content',\r\n                            padding: 15,\r\n                            display:'grid',\r\n                            rowGap:20,\r\n                            fontFamily:'serif',\r\n                            '&:first-child':{\r\n                                fontFamily:'sans-serif',\r\n                            }\r\n                        };\r\n                        return (\r\n                            <Grid key={mes.id} direction={ \"column\" } container>\r\n                                { mes.event === MESSAGE_ENUM.MESSAGE\r\n                                    ? <div style={style}><h3>{ mes.name }</h3>\r\n                                        <span >{ mes.body }</span></div>\r\n                                    :mes.event === MESSAGE_ENUM.CONNECTION ? <span className={styles.info}>{ mes.name } подключился к чату.. .</span>\r\n                                : <span  className={styles.info}>{ mes.name } вышел из чата.. .</span>}\r\n                                <div ref={ chatRef }/>\r\n                            </Grid>\r\n                        );\r\n                    } ) }\r\n\r\n                </div>\r\n                <Grid container direction={ 'column' } alignItems={ 'flex-end' }\r\n                      style={ {width: '80%', rowGap: 20, color: '#ffffff'} }>\r\n                    <TextField variant=\"filled\" onChange={ e => dispatch ( setMessageValue ( e.currentTarget.value ) ) }\r\n                               value={ state.messageValue } fullWidth\r\n                    />\r\n                    <Button style={ {backgroundColor: '#354765', color: '#ffffff'} } onClick={ sendMessage }\r\n                            variant={ 'outlined' }>send</Button>\r\n\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};","import {Redirect, Route, Switch} from 'react-router-dom';\r\nimport * as React from \"react\";\r\nimport {CHAT_ROUTE, LOGIN_ROUTE, privateRoutes, publicRoutes} from '../../../utils/routes';\r\n\r\n\r\nconst AppRoute:React.FC = () => {\r\n\r\n\r\n    return true ?\r\n        <Switch>\r\n            { privateRoutes.map ( ({path, Component}) => {\r\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\r\n            } ) }\r\n            <Redirect to={ CHAT_ROUTE }/>\r\n        </Switch>\r\n        :\r\n        <Switch>\r\n            { publicRoutes.map ( ({path, Component}) => {\r\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\r\n            } ) }\r\n            <Redirect to={ LOGIN_ROUTE }/>\r\n        </Switch>\r\n}\r\n\r\n\r\nexport default AppRoute;\r\n","import * as React from 'react';\r\nimport {useEffect, useReducer, useState} from 'react';\r\nimport {NavBar} from \"../NavBar/NavBar\";\r\nimport AppRoute from \"./AppRoute/AppRoute\";\r\nimport './App.css';\r\nimport {Loader} from \"../Loader/Loader\";\r\nimport {\r\n    initialState,\r\n    MESSAGE_ENUM,\r\n    reducer,\r\n    setConnected,\r\n    setLoading,\r\n    setMe,\r\n    setMessages,\r\n    setNameValue,\r\n} from \"./reducer\";\r\nimport {BrowserRouter, HashRouter} from 'react-router-dom';\r\nimport {Button, Grid, TextField} from \"@mui/material\";\r\nimport {MyContext} from './reducer'\r\n\r\n\r\n\r\n\r\nconst App: React.FC = () => {\r\n    const [state, dispatch] = useReducer ( reducer, initialState );\r\n    const setName = () => dispatch(setMe({id:Date.now().toString(),name:state.nameValue}))\r\n    const [socket,setSocket] = useState<WebSocket | null>(null)\r\n    const value = React.useMemo(() => [state, dispatch, socket], [state,socket])\r\n\r\n    const connect = async () => {\r\n        await setName()\r\n        dispatch ( setLoading ( true ) );\r\n        setSocket(await new WebSocket ( 'ws://ws-simple-chat-api.herokuapp.com' ));\r\n    };\r\n\r\n    // useEffect(()=>{\r\n    //     connect()\r\n    // },[])\r\n\r\n    if (socket) {\r\n        socket.onmessage = (messageEvent:MessageEvent) => {\r\n            dispatch ( setMessages (  JSON.parse ( messageEvent.data  )))\r\n        }\r\n        socket.onopen = () => {\r\n            dispatch ( setConnected ( true ) );\r\n            const message = {\r\n                event: MESSAGE_ENUM.CONNECTION,\r\n                id: state.me.id,\r\n                name: state.nameValue,\r\n                body: '',\r\n            };\r\n            socket?.send ( JSON.stringify ( message ) );\r\n            dispatch ( setLoading ( false ) );\r\n            console.log ( 'ws on' );\r\n        };\r\n        socket.onmessage = (event: MessageEvent) => {\r\n            const messages = JSON.parse ( event.data );\r\n            dispatch ( setMessages ( messages ) );\r\n            console.log ( 'message send' );\r\n\r\n        };\r\n        socket.onclose = () => {\r\n            dispatch ( setConnected ( false ) );\r\n            const message = {\r\n                event: MESSAGE_ENUM.CONNECTION,\r\n                id: state.me.id,\r\n                name: state.nameValue,\r\n                body: '',\r\n            };\r\n            console.log ( 'ws close' );\r\n            socket.send( JSON.stringify ( message ) );\r\n        };\r\n        socket.onerror = () => {\r\n            dispatch ( setConnected ( false ) );\r\n            setTimeout ( () => connect (), 1000 );\r\n            console.log ( 'ws error' );\r\n        };\r\n    }\r\n\r\n    if (state.isLoading) return <Loader/>;\r\n    const onChatDisabler = state.nameValue?.trim ().length < 3;\r\n\r\n\r\n\r\n    return (\r\n        <HashRouter>\r\n            <MyContext.Provider value={value}>\r\n                <NavBar/>\r\n                { !state.isConnected ?\r\n                    <>\r\n                        <Grid container justifyContent={ \"center\" } alignItems={ \"stretch\" }>\r\n                            <TextField variant=\"filled\"\r\n                                       onChange={ e => dispatch ( setNameValue (  e.currentTarget.value) ) }\r\n                                       value={ state.nameValue }\r\n                            />\r\n                            <Button disabled={ onChatDisabler } color={ 'info' } onClick={ connect }\r\n                                    variant={ 'contained' }>connect</Button>\r\n                        </Grid>\r\n                    </>\r\n                    :\r\n                    <AppRoute/>\r\n                }\r\n            </MyContext.Provider>\r\n        </HashRouter>\r\n    );\r\n};\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./components/App/App\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}