{"version":3,"sources":["components/App/reducer.ts","reportWebVitals.ts","components/NavBar/styles.ts","components/NavBar/NavBar.tsx","components/Loader/Loader.tsx","components/Chat/styles.ts","components/Message/styles.ts","components/Message/Message.tsx","utils/routes.ts","components/Chat/Chat.tsx","components/App/AppRoute/AppRoute.tsx","components/App/App.tsx","index.tsx"],"names":["MyContext","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","React","defaultValue","MESSAGE_ENUM","initialState","me","name","messages","messageValue","nameValue","isLoading","isConnected","reducer","state","action","type","payload","Error","setConnected","setLoading","setMessageValue","value","setMessages","useStyles","makeStyles","root","justifyContent","title","display","gridTemplateRows","NavBar","useContext","styles","AppBar","color","variant","position","Toolbar","className","Loader","props","Container","Grid","container","alignItems","style","height","window","innerHeight","CircularProgress","messagesRoot","maxHeight","width","backgroundColor","overflowY","newMessageRoot","rowGap","emojiRoot","zIndex","top","sendButton","picker","info","margin","Message","isMe","message","ref","minWidth","borderRadius","marginLeft","marginRight","maxWidth","padding","fontFamily","direction","event","MESSAGE","body","CONNECTION","id","CHAT_ROUTE","privateRoutes","path","Component","dispatch","socket","chatRef","useRef","useState","chosenEmoji","setChosenEmoji","isShowEmoji","setIsShowEmoji","useEffect","current","scrollIntoView","behavior","scrollToBottom","emoji","length","map","mes","TextField","onChange","e","currentTarget","fullWidth","classNames","onBlur","onEmojiClick","emojiObject","skinTone","SKIN_TONE_MEDIUM_DARK","Button","onClick","Date","now","toString","send","JSON","stringify","scrollTo","scrollHeight","AppRoute","component","exact","to","App","useReducer","setSocket","connect","a","WebSocket","onmessage","messageEvent","parse","data","onopen","onclose","onerror","setTimeout","onChatDisabler","trim","Provider","setNameValue","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a4b51821.chunk.js","sourcesContent":["import * as React from \"react\";\n\nlet defaultValue: any;\nexport let MyContext: React.Context<any>;\nMyContext = React.createContext (defaultValue);\n\nexport const initialState = {\n    me: {name:''} as IMe,\n    messages: [] as IMessage[],\n    messageValue: '',\n    nameValue: '',\n    isLoading: false,\n    isConnected: false,\n\n\n};\n\nexport type State = typeof initialState\n\n\nexport const reducer = (state: State, action: ActionTypes) => {\n    switch (action.type) {\n        case 'set_me':\n        case 'set_loading':\n        case 'set_message_value':\n        case 'set_name_value':\n        case 'set_connected':\n            return {...state, ...action.payload};\n        case 'set_messages':\n            return {...state, messages:[...state.messages, action.payload.messages]};\n        default:\n            throw new Error ();\n    }\n};\n\n\nexport const setMe = (item: IMe) => {\n    return {\n        type: 'set_me' as const,\n        payload: {me: item},\n    };\n};\nexport const setConnected = (isConnected:boolean) => {\n    return {\n        type: 'set_connected' as const,\n        payload: {isConnected},\n    };\n};\n\nexport const setLoading = (isLoading: boolean) => {\n    return {\n        type: 'set_loading' as const,\n        payload: {isLoading},\n    };\n};\nexport const setMessageValue = (value: string) => {\n    return {\n        type: 'set_message_value' as const,\n        payload: {messageValue: value},\n    };\n};\nexport const setNameValue = (value: string) => {\n    return {\n        type: 'set_name_value' as const,\n        payload: {nameValue: value},\n    };\n};\nexport const setMessages = (messages: any) => {\n    return {\n        type: 'set_messages' as const,\n        payload: {messages},\n    };\n};\n\nexport enum MESSAGE_ENUM {\n   MESSAGE = 'message',\n   QUIT = 'quit',\n   CONNECTION = 'connection'\n}\n\nexport type ActionTypes =\n    ReturnType<typeof setMessages>\n    | ReturnType<typeof setMe>\n    | ReturnType<typeof setMessageValue>\n    | ReturnType<typeof setNameValue>\n    | ReturnType<typeof setLoading>\n    | ReturnType<typeof setConnected>\n\nexport interface IMessage {\n    event: MESSAGE_ENUM,\n    id: string,\n    name: string,\n    body: string\n}\n\nexport interface IMe {\n    name: string;\n    id: string;\n\n}\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { makeStyles } from '@mui/styles';\n\n\nexport const useStyles = makeStyles({\n    root:{\n        justifyContent:\"center\"\n    },\n    title: {\n        display:\"grid\",\n        gridTemplateRows:'1fr 1fr',\n    },\n});","import * as React from 'react';\nimport {useContext} from 'react';\nimport {AppBar, Toolbar} from '@mui/material';\nimport {MyContext} from \"../App/reducer\";\nimport {useStyles} from \"./styles\";\n\n\ntype Props = {};\nexport const NavBar: React.FC<Props> = () => {\n    const [state, dispatch, socket] = useContext ( MyContext );\n    const styles = useStyles()\n    return (\n        <AppBar color={ \"transparent\" } variant={\"outlined\"} position=\"static\">\n            <Toolbar className={styles.root} >\n                <div className={styles.title}><strong>Добро пожаловать имени Шалтай Болтая</strong>\n                    {/*{ socket && <span>сейчас онлайн { socket.readyState }</span> }*/}\n                </div>\n                {/* <Grid container>\n                    { true\n                        ?\n                        <Button onClick={ () => {} } variant={ 'outlined' }>Logout</Button>\n                        :\n                        <NavLink to={ LOGIN_ROUTE }>< Button variant={ 'outlined' }>Login</Button></NavLink>\n                    }\n                </Grid>*/}\n            </Toolbar>\n        </AppBar>\n    );\n};","// @flow\nimport {CircularProgress, Container, Grid} from '@mui/material';\nimport * as React from 'react';\n\n\ntype Props = {\n\n};\nexport const Loader = (props: Props) => {\n    return (\n        <Container>\n            <Grid container alignItems={\"center\"} justifyContent={\"center\"} style={{height: window.innerHeight-30}}>\n                    <CircularProgress color=\"primary\" />\n            </Grid>\n        </Container>\n    );\n};","import {makeStyles} from \"@mui/styles\";\n\nexport const useStyles = makeStyles({\n    messagesRoot: {\n        maxHeight: window.innerHeight - 30\n    },\n    messages: {\n        width: '100%',\n        height: '70vh',\n        backgroundColor: '#354765',\n        overflowY: 'auto'\n    },\n    newMessageRoot: {\n        position: 'relative',\n        width: '80%',\n        rowGap: 20,\n        color: '#ffffff'\n    },\n    emojiRoot: {\n        position: \"absolute\",\n        zIndex: 1,\n        top: 10\n    },\n    sendButton:{\n        backgroundColor: '#354765',\n        color: '#ffffff'\n    },\n    picker:{\n        top:-350\n    }\n})","import { makeStyles } from '@mui/styles';\n\n\nexport const useStyles = makeStyles({\n    info: {\n        color:'#afbed2',\n        margin:'20px 30px'\n    },\n});","import * as React from 'react';\nimport {Grid} from \"@mui/material\";\nimport {MESSAGE_ENUM} from \"../App/reducer\";\nimport {useStyles} from \"./styles\";\n\n\ntype Props = {\n    isMe: boolean;\n    message: any;\n    ref: any\n};\nexport const Message: React.FC<Props> = (props) => {\n    const {isMe, message, ref} = props;\n    const styles = useStyles ();\n    const style = {\n        minWidth: '20vw',\n        margin: 10,\n        backgroundColor: isMe ? '#3a64a8' : '#224e94',\n        color: '#ffffff',\n        borderRadius: '4%',\n        marginLeft: isMe ? 'auto' : '10%',\n        marginRight: isMe ? '10%' : 0,\n        maxWidth: '40%',\n        width: 'fit-content',\n        padding: 15,\n        display: 'grid',\n        rowGap: 20,\n        fontFamily: 'serif',\n        '&:firstChild': {\n            fontFamily: 'sans-serif',\n        },\n    };\n    return (\n        <Grid key={ message.id } direction={ \"column\" } container>\n            { message.event === MESSAGE_ENUM.MESSAGE\n                ? <div style={ style }><h3>{ message.name }</h3>\n                    <span>{ message.body }</span></div>\n                : message.event === MESSAGE_ENUM.CONNECTION ?\n                    <span className={ styles.info }>{ message.name } подключился к чату.. .</span>\n                    : <span className={ styles.info }>{ message.name } вышел из чата.. .</span> }\n            <div ref={ ref }/>\n        </Grid>\n    );\n};","import { Chat } from \"../components/Chat/Chat\"\nimport { Login } from \"../components/Login/Login\"\n\n\nexport const LOGIN_ROUTE = '/LOGIN_ROUTE'\nexport const CHAT_ROUTE = '/CHAT_ROUTE'\n\n\nexport const publicRoutes =[\n    {\n        path:LOGIN_ROUTE,\n        Component: Login\n    }\n]\n\nexport const privateRoutes =[\n    {\n        path: CHAT_ROUTE,\n        Component: Chat\n    }\n]\n\n","import * as React from 'react';\nimport {useContext, useEffect, useRef, useState} from 'react';\nimport {Button, Container, Grid, TextField} from '@mui/material';\nimport {Loader} from \"../Loader/Loader\";\nimport {IMessage, MyContext, setMessageValue} from \"../App/reducer\";\nimport {useStyles} from \"./styles\";\nimport {Message} from \"../Message/Message\";\nimport Picker, {SKIN_TONE_MEDIUM_DARK} from 'emoji-picker-react';\nimport EmojiEmotionsIcon from '@mui/icons-material/EmojiEmotions';\nimport classNames from \"classnames\";\n\n\ntype Props = {}\nexport const Chat: React.FC<Props> = (props) => {\n    const [state, dispatch, socket] = useContext(MyContext);\n    const chatRef = useRef<HTMLDivElement>(null)\n    const styles = useStyles()\n    const [chosenEmoji, setChosenEmoji] = useState<any>(null);\n    const [isShowEmoji, setIsShowEmoji] = useState(false);\n    const showImoji = () => setIsShowEmoji(true)\n    const hideImoji = () => setIsShowEmoji(false)\n    const onEmojiClick = (event: any, emojiObject: any) => {\n        setChosenEmoji(emojiObject);\n    };\n\n\n    const scrollToBottom = () => {\n        chatRef.current?.scrollIntoView({behavior: \"smooth\"})\n    }\n\n    useEffect(() => {\n        scrollToBottom()\n    }, [state]);\n\n    const sendMessage = () => {\n        const message = {\n            event: 'message',\n            id: Date.now().toString(),\n            name: state.me.name,\n            body: state.messageValue,\n        };\n\n        socket?.send(JSON.stringify(message));\n        dispatch(setMessageValue(''));\n        chatRef.current?.scrollTo(0, chatRef.current.scrollHeight)\n    };\n    if (state.isLoading) return <Loader/>;\n    return (\n        <Container>\n            <Grid container className={styles.messagesRoot} alignItems={\"center\"}>\n                {chosenEmoji && <span>{chosenEmoji.emoji}</span>}\n                <div className={styles.messages}>\n                    {state.messages.length && state.messages.map((mes: IMessage) => {\n                        const isMe = state.nameValue === mes.name\n                        return <Message ref={chatRef} isMe={isMe} message={mes}/>\n                    })}\n\n                </div>\n                <Grid className={styles.newMessageRoot} container direction={'column'} alignItems={'flex-end'}>\n                    <TextField variant=\"filled\" onChange={e => dispatch(setMessageValue(e.currentTarget.value))}\n                               value={state.messageValue} fullWidth\n                    />\n                    <div className={classNames(styles.emojiRoot,{[styles.picker]:isShowEmoji})} onBlur={hideImoji}>\n                        {isShowEmoji\n                            ? <Picker onEmojiClick={onEmojiClick} skinTone={SKIN_TONE_MEDIUM_DARK}/>\n                            : <Button onClick={showImoji}><EmojiEmotionsIcon/></Button>}\n                    </div>\n                    <Button className={styles.sendButton} onClick={sendMessage}\n                            variant={'outlined'}>send</Button>\n\n                </Grid>\n            </Grid>\n        </Container>\n    );\n};","import {Redirect, Route, Switch} from 'react-router-dom';\nimport * as React from \"react\";\nimport {CHAT_ROUTE, LOGIN_ROUTE, privateRoutes, publicRoutes} from '../../../utils/routes';\n\n\nconst AppRoute:React.FC = () => {\n\n\n    return true ?\n        <Switch>\n            { privateRoutes.map ( ({path, Component}) => {\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\n            } ) }\n            <Redirect to={ CHAT_ROUTE }/>\n        </Switch>\n        :\n        <Switch>\n            { publicRoutes.map ( ({path, Component}) => {\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\n            } ) }\n            <Redirect to={ LOGIN_ROUTE }/>\n        </Switch>\n}\n\n\nexport default AppRoute;\n","import * as React from 'react';\nimport {useEffect, useReducer, useState} from 'react';\nimport {NavBar} from \"../NavBar/NavBar\";\nimport AppRoute from \"./AppRoute/AppRoute\";\nimport './App.css';\nimport {Loader} from \"../Loader/Loader\";\nimport {\n    initialState,\n    MESSAGE_ENUM,\n    reducer,\n    setConnected,\n    setLoading,\n    setMe,\n    setMessages,\n    setNameValue,\n} from \"./reducer\";\nimport {BrowserRouter, HashRouter} from 'react-router-dom';\nimport {Button, Grid, TextField} from \"@mui/material\";\nimport {MyContext} from './reducer'\n\n\n\n\nconst App: React.FC = () => {\n    const [state, dispatch] = useReducer ( reducer, initialState );\n    const setName = () => dispatch(setMe({id:Date.now().toString(),name:state.nameValue}))\n    const [socket,setSocket] = useState<WebSocket | null>(null)\n    const value = React.useMemo(() => [state, dispatch, socket], [state,socket])\n\n    const connect = async () => {\n        setName()\n        dispatch ( setLoading ( true ) );\n        setSocket(await new WebSocket ( 'wss://ws-simple-chat-api.herokuapp.com' ));\n    };\n\n    if (socket) {\n        socket.onmessage = (messageEvent:MessageEvent) => {\n            dispatch ( setMessages (  JSON.parse ( messageEvent.data  )))\n        }\n        socket.onopen = () => {\n            dispatch ( setConnected ( true ) );\n            const message = {\n                event: MESSAGE_ENUM.CONNECTION,\n                id: state.me.id,\n                name: state.nameValue,\n                body: '',\n            };\n            socket?.send ( JSON.stringify ( message ) );\n            dispatch ( setLoading ( false ) );\n        };\n        socket.onmessage = (event: MessageEvent) => {\n            const messages = JSON.parse ( event.data );\n            dispatch ( setMessages ( messages ) );\n\n        };\n        socket.onclose = () => {\n            dispatch ( setConnected ( false ) );\n            const message = {\n                event: MESSAGE_ENUM.CONNECTION,\n                id: state.me.id,\n                name: state.nameValue,\n                body: '',\n            };\n            socket.send( JSON.stringify ( message ) );\n        };\n        socket.onerror = () => {\n            dispatch ( setConnected ( false ) );\n            setTimeout ( () => connect (), 1000 );\n        };\n    }\n\n    if (state.isLoading) return <Loader/>;\n    const onChatDisabler = state.nameValue?.trim ().length < 3;\n\n\n\n    return (\n        <HashRouter>\n            <MyContext.Provider value={value}>\n                <NavBar/>\n                { !state.isConnected ?\n                    <>\n                        <Grid container justifyContent={ \"center\" } alignItems={ \"stretch\" }>\n                            <TextField variant=\"filled\"\n                                       onChange={ e => dispatch ( setNameValue (  e.currentTarget.value) ) }\n                                       value={ state.nameValue }\n                            />\n                            <Button disabled={ onChatDisabler } color={ 'info' } onClick={ connect }\n                                    variant={ 'contained' }>connect</Button>\n                        </Grid>\n                    </>\n                    :\n                    <AppRoute/>\n                }\n            </MyContext.Provider>\n        </HashRouter>\n    );\n};\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./components/App/App\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}