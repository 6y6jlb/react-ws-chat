{"version":3,"sources":["state/context.ts","reportWebVitals.ts","components/NavBar/styles.ts","state/chatStore.ts","components/NavBar/NavBar.tsx","components/Loader/Loader.tsx","components/Chat/styles.ts","components/Message/styles.ts","components/Message/Message.tsx","components/Emoji/Emoji.tsx","components/Chat/Chat.tsx","utils/routes.ts","components/App/AppRoute/AppRoute.tsx","components/App/App.tsx","index.tsx"],"names":["MyContext","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStyles","makeStyles","root","justifyContent","title","display","gridTemplateRows","React","defaultValue","MESSAGE_ENUM","NavBar","useContext","styles","AppBar","color","variant","position","Toolbar","className","Loader","props","Container","Grid","container","alignItems","style","height","window","innerHeight","CircularProgress","messagesRoot","maxHeight","messages","width","backgroundColor","overflowY","newMessageRoot","rowGap","emojiRoot","zIndex","top","sendButton","picker","info","margin","ChatStore","me","name","messageValue","nameValue","isLoading","isConnected","makeAutoObservable","this","item","value","push","Message","observer","isMe","message","ref","minWidth","borderRadius","marginLeft","marginRight","maxWidth","padding","fontFamily","direction","event","MESSAGE","body","CONNECTION","id","Emoji","children","chat","useState","isShowEmoji","setIsShowEmoji","classNames","onBlur","native","groupNames","smileys_people","disableAutoFocus","onEmojiClick","emojiObject","setMessageValue","emoji","skinTone","SKIN_TONE_MEDIUM_DARK","Button","onClick","Chat","socket","chatRef","useRef","useEffect","current","scrollIntoView","behavior","scrollToBottom","length","map","mes","TextField","onChange","e","currentTarget","fullWidth","Date","now","toString","send","JSON","stringify","scrollTo","scrollHeight","CHAT_ROUTE","privateRoutes","path","Component","AppRoute","component","exact","to","App","setSocket","connect","a","setMe","setLoading","WebSocket","onmessage","messageEvent","setMessages","parse","data","onopen","setConnected","onclose","onerror","setTimeout","onChatDisabler","trim","Provider","setNameValue","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62d6b258.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nlet defaultValue: any;\r\nexport let MyContext: React.Context<any>;\r\nMyContext = React.createContext (defaultValue);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { makeStyles } from '@mui/styles';\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    root:{\r\n        justifyContent:\"center\"\r\n    },\r\n    title: {\r\n        display:\"grid\",\r\n        gridTemplateRows:'1fr 1fr',\r\n    },\r\n});","import {makeAutoObservable} from \"mobx\";\r\n\r\n\r\nexport enum MESSAGE_ENUM {\r\n    MESSAGE = 'message',\r\n    QUIT = 'quit',\r\n    CONNECTION = 'connection'\r\n}\r\n\r\n\r\nexport interface IMessage {\r\n    event: MESSAGE_ENUM,\r\n    id: string,\r\n    name: string,\r\n    body: string\r\n}\r\n\r\nexport interface IMe {\r\n    name: string;\r\n    id: string;\r\n\r\n}\r\n\r\ninterface IChat {\r\n    me: IMe;\r\n    messages: IMessage[];\r\n    messageValue: string;\r\n    nameValue: string;\r\n    isLoading: boolean;\r\n    isConnected: boolean;\r\n    setMe:(item: IMe)=>void\r\n    setConnected:(isConnected: boolean)=>void\r\n    setLoading:(isLoading: boolean)=>void\r\n    setMessageValue:(value: string)=>void\r\n    setNameValue:(value: string)=>void\r\n    setMessages:(messages: any)=>void\r\n}\r\n\r\nclass ChatStore implements IChat {\r\n    me = {name: ''} as IMe;\r\n    messages = [] as IMessage[];\r\n    messageValue = '';\r\n    nameValue = '';\r\n    isLoading = false;\r\n    isConnected = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable ( this );\r\n    }\r\n\r\n    setMe(item: IMe) {\r\n        this.me = item;\r\n\r\n    };\r\n\r\n    setConnected(isConnected: boolean) {\r\n        this.isConnected = isConnected;\r\n    };\r\n\r\n    setLoading(isLoading: boolean) {\r\n        this.isLoading = isLoading;\r\n    };\r\n\r\n    setMessageValue(value: string) {\r\n        this.messageValue = value;\r\n    };\r\n\r\n    setNameValue(value: string) {\r\n        this.nameValue = value;\r\n    };\r\n\r\n    setMessages(messages: any) {\r\n        this.messages.push ( messages );\r\n    };\r\n}\r\n\r\nexport default ChatStore;","import * as React from 'react';\r\nimport {useContext} from 'react';\r\nimport {AppBar, Toolbar} from '@mui/material';\r\nimport {useStyles} from \"./styles\";\r\nimport {MyContext} from \"../../state/context\";\r\n\r\n\r\ntype Props = {};\r\nexport const NavBar: React.FC<Props> = () => {\r\n    const [chat,socket] = useContext ( MyContext );\r\n    const styles = useStyles()\r\n    return (\r\n        <AppBar color={ \"transparent\" } variant={\"outlined\"} position=\"static\">\r\n            <Toolbar className={styles.root} >\r\n                <div className={styles.title}><strong>Добро пожаловать имени Шалтай Болтая</strong>\r\n                    {/*{ socket && <span>сейчас онлайн { socket.readyState }</span> }*/}\r\n                </div>\r\n                {/* <Grid container>\r\n                    { true\r\n                        ?\r\n                        <Button onClick={ () => {} } variant={ 'outlined' }>Logout</Button>\r\n                        :\r\n                        <NavLink to={ LOGIN_ROUTE }>< Button variant={ 'outlined' }>Login</Button></NavLink>\r\n                    }\r\n                </Grid>*/}\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n};","// @flow\r\nimport {CircularProgress, Container, Grid} from '@mui/material';\r\nimport * as React from 'react';\r\n\r\n\r\ntype Props = {\r\n\r\n};\r\nexport const Loader = (props: Props) => {\r\n    return (\r\n        <Container>\r\n            <Grid container alignItems={\"center\"} justifyContent={\"center\"} style={{height: window.innerHeight-30}}>\r\n                    <CircularProgress color=\"primary\" />\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};","import {makeStyles} from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n    messagesRoot: {\r\n        maxHeight: window.innerHeight - 30\r\n    },\r\n    messages: {\r\n        width: '80%',\r\n        height: '70vh',\r\n        backgroundColor: '#354765',\r\n        overflowY: 'auto'\r\n    },\r\n    newMessageRoot: {\r\n        position: 'relative',\r\n        width: '80%',\r\n        rowGap: 20,\r\n        color: '#ffffff'\r\n    },\r\n    emojiRoot: {\r\n        position: \"absolute\",\r\n        zIndex: 1,\r\n        top: 10\r\n    },\r\n    sendButton:{\r\n        backgroundColor: '#354765',\r\n        color: '#ffffff'\r\n    },\r\n    picker:{\r\n        top:-350\r\n    }\r\n})","import { makeStyles } from '@mui/styles';\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    info: {\r\n        color:'#afbed2',\r\n        margin:'20px 30px'\r\n    },\r\n});","import * as React from 'react';\r\nimport {Grid} from \"@mui/material\";\r\n\r\nimport {useStyles} from \"./styles\";\r\nimport {MESSAGE_ENUM} from \"../../state/chatStore\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\n\r\ntype Props = {\r\n    isMe: boolean;\r\n    message: any;\r\n    ref: any\r\n};\r\nexport const Message: React.FC<Props> = observer((props) => {\r\n    const {isMe, message, ref} = props;\r\n    const styles = useStyles ();\r\n    const style = {\r\n        minWidth: '20vw',\r\n        margin: 10,\r\n        backgroundColor: isMe ? '#3a64a8' : '#224e94',\r\n        color: '#ffffff',\r\n        borderRadius: '4%',\r\n        marginLeft: isMe ? 'auto' : '10%',\r\n        marginRight: isMe ? '10%' : 0,\r\n        maxWidth: '40%',\r\n        width: 'fit-content',\r\n        padding: 15,\r\n        display: 'grid',\r\n        rowGap: 20,\r\n        fontFamily: 'serif',\r\n        '&:firstChild': {\r\n            fontFamily: 'sans-serif',\r\n        },\r\n    };\r\n    return (\r\n        <Grid key={ message.id } direction={ \"column\" } container>\r\n            { message.event === MESSAGE_ENUM.MESSAGE\r\n                ? <div style={ style }><h3>{ message.name }</h3>\r\n                    <span>{ message.body }</span></div>\r\n                : message.event === MESSAGE_ENUM.CONNECTION ?\r\n                    <span className={ styles.info }>{ message.name } подключился к чату.. .</span>\r\n                    : <span className={ styles.info }>{ message.name } вышел из чата.. .</span> }\r\n            <div ref={ ref }/>\r\n        </Grid>\r\n    );\r\n});","import * as React from 'react';\r\nimport {useContext, useState} from 'react';\r\nimport classNames from \"classnames\";\r\nimport Picker, {SKIN_TONE_MEDIUM_DARK} from \"emoji-picker-react\";\r\nimport {Button} from \"@mui/material\";\r\nimport EmojiEmotionsIcon from \"@mui/icons-material/EmojiEmotions\";\r\nimport {useStyles} from \"../Chat/styles\";\r\nimport {MyContext} from \"../../state/context\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\n\r\n\r\ninterface IProps  {\r\n\r\n}\r\n\r\nexport const Emoji: React.FC<IProps> = observer((props) => {\r\n    const {children} = props;\r\n    const [chat,socket] = useContext ( MyContext );\r\n    const styles = useStyles ();\r\n    const [isShowEmoji, setIsShowEmoji] = useState ( false );\r\n    const showImoji = () => setIsShowEmoji ( true );\r\n    const hideImoji = () => setIsShowEmoji ( false );\r\n    const onEmojiClick = (event: any, emojiObject: any) => {\r\n        chat.setMessageValue ( emojiObject.emoji ) ;\r\n    };\r\n\r\n    return (\r\n        <div className={ classNames ( styles.emojiRoot, {[styles.picker]: isShowEmoji} ) }\r\n             onBlur={ hideImoji }>\r\n            { isShowEmoji\r\n                ? <Picker native groupNames={ {smileys_people: \"PEOPLE\"} } disableAutoFocus={ true }\r\n                          onEmojiClick={ onEmojiClick } skinTone={ SKIN_TONE_MEDIUM_DARK }/>\r\n                : <Button onClick={ showImoji }><EmojiEmotionsIcon/></Button> }\r\n        </div>\r\n    );\r\n});","import * as React from 'react';\r\nimport {useContext, useEffect, useRef} from 'react';\r\nimport {Button, Container, Grid, TextField} from '@mui/material';\r\nimport {Loader} from \"../Loader/Loader\";\r\nimport {useStyles} from \"./styles\";\r\nimport {Message} from \"../Message/Message\";\r\nimport {Emoji} from \"../Emoji/Emoji\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport { IMessage } from '../../state/chatStore';\r\nimport {MyContext} from \"../../state/context\";\r\n\r\n\r\ntype Props = {}\r\nexport const Chat: React.FC<Props> = observer((props) => {\r\n    const {} = props\r\n    const [chat,socket] = useContext ( MyContext );\r\n    const chatRef = useRef<HTMLDivElement> ( null );\r\n    const styles = useStyles ();\r\n\r\n\r\n\r\n    const scrollToBottom = () => {\r\n        chatRef.current?.scrollIntoView ( {behavior: \"smooth\"} );\r\n    };\r\n\r\n    useEffect ( () => {\r\n        scrollToBottom ();\r\n    }, [chat] );\r\n\r\n    const sendMessage = () => {\r\n        const message = {\r\n            event: 'message',\r\n            id: Date.now ().toString (),\r\n            name: chat.me.name,\r\n            body: chat.messageValue,\r\n        };\r\n\r\n        socket?.send ( JSON.stringify ( message ) );\r\n        chat.setMessageValue ( '' ) ;\r\n        chatRef.current?.scrollTo ( 0, chatRef.current.scrollHeight );\r\n    };\r\n    if (chat.isLoading) return <Loader/>;\r\n    return (\r\n        <Container>\r\n            <Grid container className={ styles.messagesRoot } alignItems={ \"center\" }>\r\n                <div className={ styles.messages }>\r\n                    { chat.messages.length && chat.messages.map ( (mes: IMessage) => {\r\n                        const isMe = chat.nameValue === mes.name;\r\n                        return <Message ref={ chatRef } isMe={ isMe } message={ mes }/>;\r\n                    } ) }\r\n\r\n                </div>\r\n                <div ref={chatRef}/>\r\n                <Grid className={ styles.newMessageRoot } container direction={ 'column' } alignItems={ 'flex-end' }>\r\n                    <TextField variant=\"filled\" onChange={ e => chat.setMessageValue ( e.currentTarget.value )  }\r\n                               value={ chat.messageValue } fullWidth\r\n                    />\r\n                    <Emoji/>\r\n                    <Button className={ styles.sendButton } onClick={ sendMessage }\r\n                            variant={ 'outlined' }>send</Button>\r\n\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n});","import { Chat } from \"../components/Chat/Chat\"\r\nimport { Login } from \"../components/Login/Login\"\r\n\r\n\r\nexport const LOGIN_ROUTE = '/LOGIN_ROUTE'\r\nexport const CHAT_ROUTE = '/CHAT_ROUTE'\r\n\r\n\r\nexport const publicRoutes =[\r\n    {\r\n        path:LOGIN_ROUTE,\r\n        Component: Login\r\n    }\r\n]\r\n\r\nexport const privateRoutes =[\r\n    {\r\n        path: CHAT_ROUTE,\r\n        Component: Chat\r\n    }\r\n]\r\n\r\n","import {Redirect, Route, Switch} from 'react-router-dom';\r\nimport * as React from \"react\";\r\nimport {CHAT_ROUTE, LOGIN_ROUTE, privateRoutes, publicRoutes} from '../../../utils/routes';\r\n\r\n\r\nconst AppRoute:React.FC = () => {\r\n\r\n\r\n    return true ?\r\n        <Switch>\r\n            { privateRoutes.map ( ({path, Component}) => {\r\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\r\n            } ) }\r\n            <Redirect to={ CHAT_ROUTE }/>\r\n        </Switch>\r\n        :\r\n        <Switch>\r\n            { publicRoutes.map ( ({path, Component}) => {\r\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\r\n            } ) }\r\n            <Redirect to={ LOGIN_ROUTE }/>\r\n        </Switch>\r\n}\r\n\r\n\r\nexport default AppRoute;\r\n","import * as React from 'react';\r\nimport {useState} from 'react';\r\nimport {NavBar} from \"../NavBar/NavBar\";\r\nimport AppRoute from \"./AppRoute/AppRoute\";\r\nimport './App.css';\r\nimport {Loader} from \"../Loader/Loader\";\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Button, Grid, TextField} from \"@mui/material\";\r\nimport ChatStore, {MESSAGE_ENUM} from \"../../state/chatStore\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport { MyContext } from '../../state/context';\r\n\r\n\r\n\r\nconst App: React.FC = observer(() => {\r\n    const [chat] = useState(() => new ChatStore())\r\n    const setName = () => chat.setMe({id:Date.now().toString(),name:chat.nameValue})\r\n    const [socket,setSocket] = useState<WebSocket | null>(null)\r\n    const value = React.useMemo(() => [chat, socket], [chat,socket])\r\n\r\n    const connect = async () => {\r\n        setName()\r\n        chat.setLoading ( true ) ;\r\n        setSocket(await new WebSocket ( 'wss://ws-simple-chat-api.herokuapp.com' ));\r\n    };\r\n\r\n    if (socket) {\r\n        socket.onmessage = (messageEvent:MessageEvent) => {\r\n            chat.setMessages (  JSON.parse ( messageEvent.data  ))\r\n        }\r\n        socket.onopen = () => {\r\n            chat.setConnected ( true ) ;\r\n            const message = {\r\n                event: MESSAGE_ENUM.CONNECTION,\r\n                id: chat.me.id,\r\n                name: chat.nameValue,\r\n                body: '',\r\n            };\r\n            socket?.send ( JSON.stringify ( message ) );\r\n            chat.setLoading ( false ) ;\r\n        };\r\n        socket.onmessage = (event: MessageEvent) => {\r\n            const messages = JSON.parse ( event.data );\r\n            chat.setMessages ( messages ) ;\r\n\r\n        };\r\n        socket.onclose = () => {\r\n            chat.setConnected ( false ) ;\r\n            const message = {\r\n                event: MESSAGE_ENUM.CONNECTION,\r\n                id: chat.me.id,\r\n                name: chat.nameValue,\r\n                body: '',\r\n            };\r\n            socket.send( JSON.stringify ( message ) );\r\n        };\r\n        socket.onerror = () => {\r\n            chat.setConnected ( false ) ;\r\n            setTimeout ( () => connect (), 1000 );\r\n        };\r\n    }\r\n\r\n    if (chat.isLoading) return <Loader/>;\r\n    const onChatDisabler = chat.nameValue?.trim ().length < 3;\r\n\r\n\r\n\r\n    return (\r\n        <HashRouter>\r\n            <MyContext.Provider value={value}>\r\n                <NavBar/>\r\n                { !chat.isConnected ?\r\n                    <>\r\n                        <Grid container justifyContent={ \"center\" } alignItems={ \"stretch\" }>\r\n                            <TextField variant=\"filled\"\r\n                                       onChange={ e => chat.setNameValue (  e.currentTarget.value)  }\r\n                                       value={ chat.nameValue }\r\n                            />\r\n                            <Button disabled={ onChatDisabler } color={ 'info' } onClick={ connect }\r\n                                    variant={ 'contained' }>connect</Button>\r\n                        </Grid>\r\n                    </>\r\n                    :\r\n                    <AppRoute/>\r\n                }\r\n            </MyContext.Provider>\r\n        </HashRouter>\r\n    );\r\n});\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./components/App/App\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}