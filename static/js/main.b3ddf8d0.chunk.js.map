{"version":3,"sources":["state/context.ts","reportWebVitals.ts","components/NavBar/styles.ts","state/chatStore.ts","components/NavBar/NavBar.tsx","components/Loader/Loader.tsx","components/Chat/styles.ts","components/Message/styles.ts","components/Message/Message.tsx","components/Emoji/styles.ts","components/Emoji/Emoji.tsx","components/Chat/Chat.tsx","utils/routes.ts","components/App/AppRoute/AppRoute.tsx","components/App/App.tsx","index.tsx"],"names":["MyContext","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStyles","makeStyles","root","justifyContent","title","display","gridTemplateRows","justifyItems","color","React","defaultValue","MESSAGE_ENUM","NavBar","observer","useContext","chat","connectionCounter","styles","AppBar","variant","position","Toolbar","className","Loader","props","Container","Grid","container","alignItems","style","height","window","innerHeight","CircularProgress","messagesRoot","maxHeight","messages","width","backgroundColor","overflowY","newMessageRoot","rowGap","sendButton","textField","mainBlock","minWidth","margin","borderRadius","maxWidth","padding","fontFamily","info","name","copy","cursor","opacity","top","ChatStore","me","messageValue","nameValue","isLoading","isConnected","makeAutoObservable","this","deep","item","value","push","count","Message","isMe","message","ref","marginLeft","marginRight","direction","event","MESSAGE","justifySelf","borderBottom","toUpperCase","body","onClick","navigator","clipboard","writeText","right","left","CONNECTION","id","emojiRoot","zIndex","picker","Emoji","children","frameWidth","useState","isShowEmoji","setIsShowEmoji","console","log","classNames","onBlur","native","groupNames","smileys_people","disableAutoFocus","onEmojiClick","emojiObject","setMessageValue","emoji","skinTone","SKIN_TONE_MEDIUM_DARK","Button","Chat","socket","chatRef","useRef","messagesArray","messagesLength","length","setConnectionCounter","useEffect","current","scrollTo","scrollHeight","scrollToBottom","map","mes","TextField","onChange","e","currentTarget","clientWidth","trim","Date","now","toString","send","JSON","stringify","CHAT_ROUTE","privateRoutes","path","Component","AppRoute","component","exact","to","App","setSocket","connect","a","setMe","setLoading","WebSocket","onmessage","messageEvent","setMessages","parse","data","onopen","setConnected","onclose","onerror","setTimeout","onChatDisabler","Provider","setNameValue","disabled","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3ddf8d0.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nlet defaultValue: any;\r\nexport let MyContext: React.Context<any>;\r\nMyContext = React.createContext (defaultValue);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { makeStyles } from '@mui/styles';\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    root:{\r\n        justifyContent:\"center\"\r\n    },\r\n    title: {\r\n        display:\"grid\",\r\n        gridTemplateRows:'1fr 1fr',\r\n        justifyItems:\"flex-end\",\r\n        '&:last-child span':{\r\n            color:'grey'\r\n        }\r\n    },\r\n});","import {makeAutoObservable} from \"mobx\";\r\n\r\n\r\nexport enum MESSAGE_ENUM {\r\n    MESSAGE = 'message',\r\n    QUIT = 'quit',\r\n    CONNECTION = 'connection'\r\n}\r\n\r\n\r\nexport interface IMessage {\r\n    event: MESSAGE_ENUM;\r\n    id: string;\r\n    name: string;\r\n    body: string;\r\n    connectionCounter: number;\r\n}\r\n\r\nexport interface IMe {\r\n    name: string;\r\n    id: string;\r\n\r\n}\r\n\r\ninterface IChat {\r\n    me: IMe;\r\n    messages: IMessage[];\r\n    messageValue: string;\r\n    nameValue: string;\r\n    isLoading: boolean;\r\n    isConnected: boolean;\r\n    connectionCounter: number;\r\n    setMe: (item: IMe) => void;\r\n    setConnected: (isConnected: boolean) => void;\r\n    setLoading: (isLoading: boolean) => void;\r\n    setMessageValue: (value: string) => void;\r\n    setNameValue: (value: string) => void;\r\n    setMessages: (messages: any) => void;\r\n}\r\n\r\nclass ChatStore implements IChat {\r\n    me = {name: ''} as IMe;\r\n    messages = [] as IMessage[];\r\n    messageValue = '';\r\n    nameValue = '';\r\n    isLoading = false;\r\n    isConnected = false;\r\n    connectionCounter = 0;\r\n\r\n    constructor() {\r\n        makeAutoObservable ( this, {}, {deep: true} );\r\n    }\r\n\r\n    setMe(item: IMe) {\r\n        this.me = item;\r\n\r\n    };\r\n\r\n    setConnected(isConnected: boolean) {\r\n        this.isConnected = isConnected;\r\n    };\r\n\r\n    setLoading(isLoading: boolean) {\r\n        this.isLoading = isLoading;\r\n    };\r\n\r\n    setMessageValue(value: string) {\r\n        this.messageValue = value;\r\n    };\r\n\r\n    setNameValue(value: string) {\r\n        this.nameValue = value;\r\n    };\r\n\r\n    setMessages(messages: any) {\r\n        this.messages.push ( messages );\r\n    };\r\n\r\n    setConnectionCounter(count: number) {\r\n        this.connectionCounter = count;\r\n    };\r\n}\r\n\r\nexport default ChatStore;","import * as React from 'react';\r\nimport {useContext} from 'react';\r\nimport {AppBar, Toolbar} from '@mui/material';\r\nimport {useStyles} from \"./styles\";\r\nimport {MyContext} from \"../../state/context\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\n\r\ntype Props = {};\r\nexport const NavBar: React.FC<Props> = observer(() => {\r\n    const [chat,socket] = useContext ( MyContext );\r\n    const {connectionCounter} = chat;\r\n    const styles = useStyles()\r\n    return (\r\n        <AppBar color={ \"transparent\" } variant={\"outlined\"} position=\"static\">\r\n            <Toolbar className={styles.root} >\r\n                <div className={styles.title}>\r\n                    <strong>Добро пожаловать имени Шалтай Болтая</strong>\r\n                    <span>сейчас онлайн: { connectionCounter } { connectionCounter === 1 ?'человек' : 'человеков' }</span>\r\n                </div>\r\n                {/* <Grid container>\r\n                    { true\r\n                        ?\r\n                        <Button onClick={ () => {} } variant={ 'outlined' }>Logout</Button>\r\n                        :\r\n                        <NavLink to={ LOGIN_ROUTE }>< Button variant={ 'outlined' }>Login</Button></NavLink>\r\n                    }\r\n                </Grid>*/}\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n});","// @flow\r\nimport {CircularProgress, Container, Grid} from '@mui/material';\r\nimport * as React from 'react';\r\n\r\n\r\ntype Props = {\r\n\r\n};\r\nexport const Loader = (props: Props) => {\r\n    return (\r\n        <Container>\r\n            <Grid container alignItems={\"center\"} justifyContent={\"center\"} style={{height: window.innerHeight-30}}>\r\n                    <CircularProgress color=\"primary\" />\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};","import {makeStyles} from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n    messagesRoot: {\r\n        maxHeight: window.innerHeight - 30\r\n    },\r\n    messages: {\r\n        width: '100%',\r\n        height: '70vh',\r\n        backgroundColor: '#354765',\r\n        overflowY: 'auto'\r\n    },\r\n    newMessageRoot: {\r\n        position: 'relative',\r\n        width: '100%',\r\n        rowGap: 20,\r\n        color: '#ffffff'\r\n    },\r\n    sendButton:{\r\n        backgroundColor: '#354765',\r\n        color: '#ffffff',\r\n        width:'20%',\r\n        height:56\r\n    },\r\n    textField:{\r\n        width:'80%'\r\n    }\r\n})","import { makeStyles } from '@mui/styles';\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    mainBlock:{\r\n        minWidth: '20vw',\r\n        margin: 10,\r\n        borderRadius: '4%',\r\n        maxWidth: '50%',\r\n        width: 'fit-content',\r\n        padding: 15,\r\n        display: 'grid',\r\n        justifyContent:'flexStart',\r\n        rowGap: 20,\r\n        fontFamily: 'serif',\r\n        position:'relative'\r\n    },\r\n    info: {\r\n        color:'#afbed2',\r\n        margin:'20px 30px'\r\n    },\r\n    name:{\r\n        fontFamily: 'sans-serif',\r\n        display:'block',maxWidth:'max-content'\r\n    },\r\n    copy:{\r\n        cursor:\"pointer\",\r\n        position:\"absolute\",\r\n        opacity:0.7,\r\n        top:8\r\n\r\n    }\r\n});","import * as React from 'react';\r\nimport {Button, Grid} from \"@mui/material\";\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport {useStyles} from \"./styles\";\r\nimport {MESSAGE_ENUM} from \"../../state/chatStore\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\n\r\ntype Props = {\r\n    isMe: boolean;\r\n    message: any;\r\n    ref: any\r\n};\r\nexport const Message: React.FC<Props> = observer((props) => {\r\n    const {isMe, message, ref} = props;\r\n    const styles = useStyles ();\r\n    const onCopy = () =>  navigator.clipboard.writeText(message.body)\r\n    const style = {\r\n        backgroundColor: isMe ? '#3a64a8' : '#536f9b',\r\n        color:  isMe ? '#f6dbaa' :'#eee4cc',\r\n        marginLeft: isMe ? 'auto' : '10%',\r\n        marginRight: isMe ? '10%' : 0,\r\n    };\r\n    return (\r\n        <Grid key={ message.id } direction={ \"column\" } container>\r\n            { message.event === MESSAGE_ENUM.MESSAGE\r\n                ? <div className={styles.mainBlock} style={ style }>\r\n                    <h3 className={styles.name}\r\n                        style={\r\n                            {justifySelf:`${!isMe && 'flex-end'}`,borderBottom:`2px solid ${isMe ? '#f6dbaa' :'#eee4cc' }`}\r\n                        }>\r\n                        { message.name.toUpperCase() }\r\n                    </h3>\r\n                    <span>{ message.body }</span>\r\n                    <div onClick={onCopy} style={isMe ? {right:2} : {left:6}\r\n                    } title={'скопировать сообщение'} className={styles.copy}>\r\n                        <ContentCopyIcon/>\r\n                    </div>\r\n            </div>\r\n                : message.event === MESSAGE_ENUM.CONNECTION ?\r\n                    <span className={ styles.info }>{ message.name } подключился к чату.. .</span>\r\n                    : <span className={ styles.info }>{ message.name } вышел из чата.. .</span> }\r\n            <div ref={ ref }/>\r\n        </Grid>\r\n    );\r\n});","import {makeStyles} from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n    emojiRoot: {\r\n        position: \"absolute\",\r\n        zIndex: 1,\r\n        top: 10,\r\n\r\n    },\r\n\r\n    picker:{\r\n        top:-350\r\n    },\r\n\r\n})","import * as React from 'react';\r\nimport {useContext, useState} from 'react';\r\nimport classNames from \"classnames\";\r\nimport Picker, {SKIN_TONE_MEDIUM_DARK} from \"emoji-picker-react\";\r\nimport {Button} from \"@mui/material\";\r\nimport EmojiEmotionsIcon from \"@mui/icons-material/EmojiEmotions\";\r\nimport {useStyles} from \"./styles\";\r\nimport {MyContext} from \"../../state/context\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\n\r\n\r\ninterface IProps  {\r\n    frameWidth?:number\r\n}\r\n\r\nexport const Emoji: React.FC<IProps> = observer((props) => {\r\n    const {children,frameWidth = 0} = props;\r\n    const [chat,socket] = useContext ( MyContext );\r\n    const styles = useStyles ();\r\n    const [isShowEmoji, setIsShowEmoji] = useState ( false );\r\n    const showImoji = () => setIsShowEmoji ( true );\r\n    const hideImoji = () => setIsShowEmoji ( false );\r\n    const onEmojiClick = (event: any, emojiObject: any) => {\r\n        chat.setMessageValue ( emojiObject.emoji ) ;\r\n    };\r\n    console.log (frameWidth);\r\n    return (\r\n        <div style={{right:`${frameWidth * 0.2}px`}} className={ classNames ( styles.emojiRoot, {[styles.picker]: isShowEmoji} ) }\r\n             onBlur={ hideImoji }>\r\n            { isShowEmoji\r\n                ? <Picker native groupNames={ {smileys_people: \"PEOPLE\"} } disableAutoFocus={ true }\r\n                          onEmojiClick={ onEmojiClick } skinTone={ SKIN_TONE_MEDIUM_DARK }/>\r\n                : <Button onClick={ showImoji }><EmojiEmotionsIcon/></Button> }\r\n        </div>\r\n    );\r\n});","import * as React from 'react';\r\nimport {useContext, useEffect, useRef} from 'react';\r\nimport {Button, Container, Grid, TextField} from '@mui/material';\r\nimport {Loader} from \"../Loader/Loader\";\r\nimport {useStyles} from \"./styles\";\r\nimport {Message} from \"../Message/Message\";\r\nimport {Emoji} from \"../Emoji/Emoji\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {IMessage} from '../../state/chatStore';\r\nimport {MyContext} from \"../../state/context\";\r\n\r\n\r\ntype Props = {}\r\nexport const Chat: React.FC<Props> = observer((props) => {\r\n    const {} = props\r\n    const [chat,socket] = useContext ( MyContext );\r\n    const chatRef = useRef<HTMLDivElement> ( null );\r\n    const styles = useStyles ();\r\n    const messagesArray = chat.messages\r\n    const messagesLength = messagesArray.length\r\n    if (messagesLength > 1) {\r\n        chat.setConnectionCounter (messagesArray[messagesLength-1].connectionCounter );\r\n    }\r\n\r\n    const scrollToBottom = () => {\r\n        chatRef.current?.scrollTo ( 0, chatRef.current.scrollHeight );\r\n\r\n    };\r\n\r\n    useEffect ( () => {\r\n        scrollToBottom ();\r\n    },  );\r\n\r\n    const sendMessage = () => {\r\n        if ( !chat.messageValue.trim()) return\r\n\r\n        const message = {\r\n            event: 'message',\r\n            id: Date.now ().toString (),\r\n            name: chat.me.name,\r\n            body: chat.messageValue,\r\n        };\r\n\r\n        socket?.send ( JSON.stringify ( message ) );\r\n        chat.setMessageValue ( '' ) ;\r\n    };\r\n    console.log(chatRef);\r\n    if (chat.isLoading) return <Loader/>;\r\n    return (\r\n        <Container>\r\n            <Grid container className={ styles.messagesRoot } alignItems={ \"center\" }>\r\n                <Grid ref={chatRef} className={ styles.messages }>\r\n                    { messagesLength && chat.messages.map ( (mes: IMessage) => {\r\n                        const isMe = chat.nameValue === mes.name;\r\n                        return <Message ref={ chatRef } isMe={ isMe } message={ mes }/>;\r\n                    } ) }\r\n\r\n                </Grid>\r\n                <Grid className={ styles.newMessageRoot } container direction={ 'row' } alignItems={ 'flex-end' }>\r\n                    <TextField  variant=\"filled\" onChange={ e => chat.setMessageValue ( e.currentTarget.value )  }\r\n                               value={ chat.messageValue } className={styles.textField}\r\n                    />\r\n                    <Emoji frameWidth={chatRef.current?.clientWidth}/>\r\n                    <Button className={ styles.sendButton } onClick={ sendMessage }\r\n                            variant={ 'outlined' }>send</Button>\r\n\r\n                </Grid>\r\n            </Grid>\r\n        </Container>\r\n    );\r\n});","import { Chat } from \"../components/Chat/Chat\"\r\nimport { Login } from \"../components/Login/Login\"\r\n\r\n\r\nexport const LOGIN_ROUTE = '/LOGIN_ROUTE'\r\nexport const CHAT_ROUTE = '/CHAT_ROUTE'\r\n\r\n\r\nexport const publicRoutes =[\r\n    {\r\n        path:LOGIN_ROUTE,\r\n        Component: Login\r\n    }\r\n]\r\n\r\nexport const privateRoutes =[\r\n    {\r\n        path: CHAT_ROUTE,\r\n        Component: Chat\r\n    }\r\n]\r\n\r\n","import {Redirect, Route, Switch} from 'react-router-dom';\r\nimport * as React from \"react\";\r\nimport {CHAT_ROUTE, LOGIN_ROUTE, privateRoutes, publicRoutes} from '../../../utils/routes';\r\n\r\n\r\nconst AppRoute:React.FC = () => {\r\n\r\n\r\n    return true ?\r\n        <Switch>\r\n            { privateRoutes.map ( ({path, Component}) => {\r\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\r\n            } ) }\r\n            <Redirect to={ CHAT_ROUTE }/>\r\n        </Switch>\r\n        :\r\n        <Switch>\r\n            { publicRoutes.map ( ({path, Component}) => {\r\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\r\n            } ) }\r\n            <Redirect to={ LOGIN_ROUTE }/>\r\n        </Switch>\r\n}\r\n\r\n\r\nexport default AppRoute;\r\n","import * as React from 'react';\r\nimport {useState} from 'react';\r\nimport {NavBar} from \"../NavBar/NavBar\";\r\nimport AppRoute from \"./AppRoute/AppRoute\";\r\nimport './App.css';\r\nimport {Loader} from \"../Loader/Loader\";\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {Button, Grid, TextField} from \"@mui/material\";\r\nimport ChatStore, {MESSAGE_ENUM} from \"../../state/chatStore\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport { MyContext } from '../../state/context';\r\n\r\n\r\n\r\nconst App: React.FC = observer(() => {\r\n    const [chat] = useState(() => new ChatStore())\r\n    const setName = () => chat.setMe({id:Date.now().toString(),name:chat.nameValue})\r\n    const [socket,setSocket] = useState<WebSocket | null>(null)\r\n    const value = React.useMemo(() => [chat, socket], [chat,socket])\r\n\r\n    const connect = async () => {\r\n        setName()\r\n        chat.setLoading ( true ) ;\r\n        setSocket(await new WebSocket ( 'wss://ws-simple-chat-api.herokuapp.com' ));\r\n    };\r\n\r\n    if (socket) {\r\n        socket.onmessage = (messageEvent:MessageEvent) => {\r\n            chat.setMessages (  JSON.parse ( messageEvent.data  ))\r\n        }\r\n        socket.onopen = () => {\r\n            chat.setConnected ( true ) ;\r\n            const message = {\r\n                event: MESSAGE_ENUM.CONNECTION,\r\n                id: chat.me.id,\r\n                name: chat.nameValue,\r\n                body: '',\r\n            };\r\n            socket?.send ( JSON.stringify ( message ) );\r\n            chat.setLoading ( false ) ;\r\n        };\r\n        socket.onmessage = (event: MessageEvent) => {\r\n            const messages = JSON.parse ( event.data );\r\n            chat.setMessages ( messages ) ;\r\n        };\r\n        socket.onclose = () => {\r\n            chat.setConnected ( false ) ;\r\n            const message = {\r\n                event: MESSAGE_ENUM.CONNECTION,\r\n                id: chat.me.id,\r\n                name: chat.nameValue,\r\n                body: '',\r\n            };\r\n            socket.send( JSON.stringify ( message ) );\r\n        };\r\n        socket.onerror = () => {\r\n            chat.setConnected ( false ) ;\r\n            setTimeout ( () => connect (), 1000 );\r\n        };\r\n    }\r\n\r\n    if (chat.isLoading) return <Loader/>;\r\n    const onChatDisabler = chat.nameValue?.trim ().length < 3;\r\n\r\n\r\n\r\n    return (\r\n        <HashRouter>\r\n            <MyContext.Provider value={value}>\r\n                <NavBar/>\r\n                { !chat.isConnected ?\r\n                    <>\r\n                        <Grid container justifyContent={ \"center\" } alignItems={ \"stretch\" }>\r\n                            <TextField variant=\"filled\"\r\n                                       onChange={ e => chat.setNameValue (  e.currentTarget.value)  }\r\n                                       value={ chat.nameValue }\r\n                            />\r\n                            <Button disabled={ onChatDisabler } color={ 'info' } onClick={ connect }\r\n                                    variant={ 'contained' }>connect</Button>\r\n                        </Grid>\r\n                    </>\r\n                    :\r\n                    <AppRoute/>\r\n                }\r\n            </MyContext.Provider>\r\n        </HashRouter>\r\n    );\r\n});\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./components/App/App\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}