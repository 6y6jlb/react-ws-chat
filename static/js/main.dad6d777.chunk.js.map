{"version":3,"sources":["state/context.ts","reportWebVitals.ts","utils/styles.ts","components/NavBar/styles.ts","state/chatStore.ts","components/Clock/styles.ts","utils/time.ts","components/Clock/Clock.tsx","components/Loader/Loader.tsx","components/Chat/styles.ts","components/Message/styles.ts","utils/const.ts","components/App/const.ts","components/Message/Message.tsx","components/Emoji/styles.ts","components/Emoji/Emoji.tsx","components/Chat/Chat.tsx","components/BasicJoinForm/styles.ts","utils/routes.ts","components/BasicJoinForm/const.ts","components/BasicJoinForm/BasicJoinForm.tsx","components/Login/styles.ts","components/Registration/styles.ts","components/JoinOptions/styles.ts","components/JoinOptions/JoinOptions.tsx","components/Login/Login.tsx","components/Registration/Registration.tsx","components/Weather/Weather.tsx","components/NavBar/NavBar.tsx","http/chatApiInstance.ts","service/AuthService.ts","state/meStore.ts","components/AppRoute/AppRoute.tsx","http/funFactApiInstance.ts","service/DayFactService.ts","service/WeatherService.ts","state/utilityStore.ts","components/App/App.tsx","index.tsx"],"names":["MyContext","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","title","fontFamily","fontSize","useStyles","makeStyles","display","gridAutoRows","justifyItems","minHeight","alignItems","textTransform","onlineCounter","color","React","defaultValue","MESSAGE_ENUM","timeRoot","whiteSpace","getTime","date","getTwoDig","time","string","toString","length","hour","getHours","min","getMinutes","sec","getSeconds","timeConverter","UNIX_timestamp","a","Date","year","getFullYear","month","getMonth","getDate","Clock","props","children","clocRef","useState","setTime","styles","useEffect","clearId","setTimeout","clearTimeout","ref","className","Loader","Container","Grid","container","justifyContent","style","height","window","innerHeight","CircularProgress","messagesRoot","maxHeight","messages","width","backgroundColor","overflowY","newMessageRoot","position","rowGap","textField","btn","border","mainBlock","minWidth","margin","borderRadius","maxWidth","padding","info","name","copy","cursor","opacity","top","LANG","ChatStore","messageValue","isLoading","isConnected","connectionCounter","makeAutoObservable","this","deep","value","count","Message","observer","isMe","message","useContext","chat","event","CONNECTION","setConnectionCounter","marginLeft","marginRight","paddingRight","direction","MESSAGE","justifySelf","borderBottom","toUpperCase","body","onClick","navigator","clipboard","writeText","right","left","emojiRoot","zIndex","picker","Emoji","frameWidth","isShowEmoji","setIsShowEmoji","classNames","onBlur","native","groupNames","smileys_people","disableAutoFocus","onEmojiClick","emojiObject","setMessageValue","emoji","skinTone","SKIN_TONE_MEDIUM_DARK","Button","Chat","me","socket","chatRef","useRef","formik","useFormik","initialValues","onSubmit","values","trim","id","now","email","send","JSON","stringify","sendMessage","messagesLength","current","scrollTo","scrollHeight","scrollToBottom","handleSubmit","map","mes","TextField","label","variant","autoComplete","onChange","e","currentTarget","clientWidth","type","root","marginTop","selectWrapper","alignContent","alert","ROUTES","LANG_OBJ","Object","create","LANG_FORM_PROP","RU","EN","LANGUAGE","BasicJoinForm","withOptions","submitButtonText","showAlert","onCloseAlert","password","country","city","language","console","log","onChatDisabler","useMemo","Box","Grow","in","Alert","onClose","severity","transformOrigin","timeout","gap","FormControl","fullWidth","classes","InputLabel","Select","labelId","handleChange","MenuItem","autoFocus","inputProps","form","disabled","gridTemplateColumns","columnGap","publicRoutes","path","JOIN_ROUTE","Component","item","to","REGISTRATION_ROUTE","size","LOGIN_ROUTE","login","timeOutId","setShowAlert","registration","onShowAlert","useCallback","Weather","CHAT_ROUTE","PROFILE_ROUTE","utility","fetchWeather","weather","NavBar","clockRef","isAuthorized","isLoginPage","useLocation","pathname","includes","isLJoinPage","emptyBoxWidth","offsetWidth","onLogout","logout","AppBar","elevation","baseURL","chatApiInstance","axios","interceptors","request","use","config","headers","Authorization","localStorage","getItem","response","error","originalRequest","status","_isRetry","post","withCredentials","setItem","data","accessToken","AuthService","instance","delete","MeStore","setMe","user","setAuthData","warn","refresh","AppRoute","component","exact","dayFactApiInstance","DayFactService","get","WeatherService","chatInstance","UtilityStore","fact","fetchFact","setFact","contents","setWeather","App","utilityStore","setSocket","connect","setLoading","WebSocket","onmessage","messageEvent","setMessages","parse","onopen","setConnected","onclose","onerror","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dad6d777.chunk.js","sourcesContent":["import * as React from \"react\";\n\nlet defaultValue: any;\nexport let MyContext: React.Context<any>;\nMyContext = React.createContext (defaultValue);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const title = {\n        fontFamily:'monospace',\n        fontSize:'2rem'\n}\n","import { makeStyles } from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\nexport const useStyles = makeStyles({\n    title: {\n        display:\"grid\",\n        // gridTemplateRows:'1fr 1fr',\n        gridAutoRows:'auto',\n        justifyItems:\"center\",\n        minHeight:90,\n        alignItems:'center',\n        '&>div:first-child':{\n            ...title,\n            textTransform:\"uppercase\",\n        }\n    },\n    onlineCounter:{\n        color:\"grey\"\n    },\n});","import {makeAutoObservable} from \"mobx\";\n\n\nexport enum MESSAGE_ENUM {\n    MESSAGE = 'message',\n    QUIT = 'quit',\n    CONNECTION = 'connection'\n}\n\n\nexport interface IMessage {\n    event: MESSAGE_ENUM;\n    id: string;\n    name: string;\n    body: string;\n    connectionCounter: number;\n}\n\n\ninterface IChat {\n    messages: IMessage[];\n    messageValue: string;\n    isLoading: boolean;\n    isConnected: boolean;\n    connectionCounter?: number;\n    setConnected: (isConnected: boolean) => void;\n    setLoading: (isLoading: boolean) => void;\n    setMessageValue: (value: string) => void;\n    setMessages: (messages: any) => void;\n}\n\nclass ChatStore implements IChat {\n    messages = [] as IMessage[];\n    messageValue = '';\n    isLoading = false;\n    isConnected = false;\n    connectionCounter = 0;\n\n    constructor() {\n        makeAutoObservable ( this, {}, {deep: true} );\n    }\n\n\n    setConnected(isConnected: boolean) {\n        this.isConnected = isConnected;\n    };\n\n    setLoading(isLoading: boolean) {\n        this.isLoading = isLoading;\n    };\n\n    setMessageValue(value: string) {\n        this.messageValue = value;\n    };\n\n    setMessages(messages: any) {\n        this.messages =  [...this.messages,...messages, ];\n\n    };\n\n    setConnectionCounter(count: number) {\n        this.connectionCounter = count;\n    };\n}\n\nexport default ChatStore;","import { makeStyles } from '@mui/styles';\n\n\nexport const useStyles = makeStyles({\n    timeRoot:{\n       fontSize:'2rem',\n        fontFamily:\"monospace\",\n        color:'gray',\n        whiteSpace:'nowrap'\n    },\n});","\n\n\nexport const getTime = (date:Date) => {\n    const getTwoDig = (time:number) => {\n        const string = time.toString()\n        return string.length > 1 ? string : `0${string}`\n    }\n    const hour = getTwoDig(date.getHours())\n    const min = getTwoDig(date.getMinutes())\n    const sec = getTwoDig(date.getSeconds())\n    return `${ hour }: ${min }: ${ sec }`\n}\n\nconst timeFromUnix = (date:number) => {\n    return new Date(date * 1000)\n}\n\nexport const getDate = (date:number) => {\n    const fullDate = timeFromUnix(date)\n    const year = fullDate.getFullYear()\n    const month = fullDate.getMonth()\n    const day = fullDate.getDay()\n    return `${ year }: ${month }: ${ day }`\n}\nexport const timeConverter = (UNIX_timestamp:number) => {\n    // weird\n    const a = new Date(UNIX_timestamp / 1000);\n    const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    const year = a.getFullYear();\n    const month = months[a.getMonth()];\n    const date = a.getDate();\n    const hour = a.getHours();\n    const min = a.getMinutes();\n    const sec = a.getSeconds();\n    const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\n    return time;\n}","import * as React from 'react';\nimport {LegacyRef, useEffect, useRef, useState} from 'react';\nimport {useStyles} from './styles'\nimport {getTime} from \"../../utils/time\";\n\n\ninterface IProps {\n clocRef?:React.Ref<HTMLDivElement> | null\n}\n\nexport const Clock: React.FC<IProps> = (props) => {\n    const {children,clocRef} = props;\n    const [time, setTime] = useState ( new Date () );\n    const styles = useStyles();\n\n\n    useEffect ( () => {\n        const clearId = setTimeout ( () => setTime ( new Date () ), 1000 );\n        return () => clearTimeout ( clearId );\n    }, [time] );\n\n    return (\n        <div ref={clocRef} className={styles.timeRoot}>\n            { getTime(time)}\n        </div>\n    );\n};","// @flow\nimport {CircularProgress, Container, Grid} from '@mui/material';\nimport * as React from 'react';\n\n\ntype Props = {\n\n};\nexport const Loader = (props: Props) => {\n    return (\n        <Container>\n            <Grid container alignItems={\"center\"} justifyContent={\"center\"} style={{height: window.innerHeight-30}}>\n                    <CircularProgress color=\"primary\" />\n            </Grid>\n        </Container>\n    );\n};","import {makeStyles} from \"@mui/styles\";\n\nexport const useStyles = makeStyles({\n    messagesRoot: {\n        maxHeight: window.innerHeight - 30\n    },\n    messages: {\n        width: '100%',\n        height: '70vh',\n        backgroundColor: '#354765',\n        overflowY: 'auto'\n    },\n    newMessageRoot: {\n        position: 'relative',\n        width: '100%',\n        rowGap: 20,\n        color: '#ffffff'\n    },\n    textField:{\n        width:'80%'\n    },\n    btn:{\n        \"&.MuiButton-contained\": {\n            backgroundColor: '#3a64a8',\n            border:'none',\n            color: '#ffffff',\n            width:'20%',\n            height:56,\n            '&:hover':{\n                backgroundColor: '#7094d2',\n                color: '#354765',\n            }\n        },\n    }\n})","import { makeStyles } from '@mui/styles';\nimport {MOBIL} from \"../../utils/const\";\n\n\nexport const useStyles = makeStyles({\n    mainBlock:{\n        minWidth: '40vw',\n        margin: 10,\n        borderRadius: '4%',\n        maxWidth: '60%',\n        width: 'fit-content',\n        padding: 15,\n        display: 'grid',\n        justifyContent:'flexStart',\n        rowGap: 20,\n        fontFamily: 'serif',\n        position:'relative'\n    },\n    info: {\n        color:'#afbed2',\n        margin:'20px 30px'\n    },\n    name:{\n        display:'block',\n        maxWidth:'max-content'\n    },\n    copy:{\n        cursor:\"pointer\",\n        position:\"absolute\",\n        opacity:0.7,\n        top:8\n\n    },\n    date:{\n        fontSize:'0.7em'\n    },\n    [`@media (max-width:${MOBIL}px)`]: {\n        mainBlock:{\n            minWidth: '70vw',\n            fontSize: '1.4em'\n        },\n    }\n});","export const MOBIL = 520;","export enum LANG {\n    EN = 'EN',\n    RU = 'RU'\n};\n\nexport const LANG_OBJ = Object.create(LANG);","import * as React from 'react';\nimport {useContext} from 'react';\nimport {Grid} from \"@mui/material\";\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport {useStyles} from \"./styles\";\nimport {MESSAGE_ENUM} from \"../../state/chatStore\";\nimport {observer} from \"mobx-react-lite\";\nimport {timeConverter} from \"../../utils/time\";\nimport {MyContext} from \"../../state/context\";\n\n\ntype Props = {\n    isMe: boolean;\n    message: any;\n};\nexport const Message: React.FC<Props> = observer((props) => {\n    const {isMe, message} = props;\n    const [chat,me, socket] = useContext ( MyContext );\n    const styles = useStyles ();\n    const onCopy = () =>  navigator.clipboard.writeText(message.body)\n    if (message.event === MESSAGE_ENUM.CONNECTION) {\n        chat.setConnectionCounter(message.connectionCounter);\n    }\n    const style = {\n        backgroundColor: isMe ? '#3a64a8' : '#536f9b',\n        color:  isMe ? '#f6dbaa' :'#eee4cc',\n        marginLeft: isMe ? 'auto' : '10%',\n        marginRight: isMe ? '10%' : 0,\n        paddingRight:10\n\n    };\n\n    return (\n        <Grid direction={ \"column\" } container>\n            { message.event === MESSAGE_ENUM.MESSAGE\n                ? <div className={styles.mainBlock} style={ style }>\n                    <h3 className={styles.name}\n                        style={\n                            {justifySelf:`${!isMe && 'flex-end'}`,borderBottom:`2px solid ${isMe ? '#f6dbaa' :'#eee4cc' }`}\n                        }>\n                        { message.name?.toUpperCase() }\n                    </h3>\n                    <span>{ message.body }</span>\n                    <span className={styles.date}>{ timeConverter(message.date * 1000)  }</span>\n                    <div onClick={onCopy} style={isMe ? {right:2} : {left:6}\n                    } title={'скопировать сообщение'} className={styles.copy}>\n                        <ContentCopyIcon/>\n                    </div>\n            </div>\n                : message.event === MESSAGE_ENUM.CONNECTION ?\n                    <span className={ styles.info }>{ message.name } подключился к чату.. .</span>\n                    : <span className={ styles.info }>{ message.name } вышел из чата.. .</span> }\n        </Grid>\n    );\n});","import {makeStyles} from \"@mui/styles\";\n\nexport const useStyles = makeStyles({\n    emojiRoot: {\n        position: \"absolute\",\n        zIndex: 1,\n        top: 10,\n\n    },\n\n    picker:{\n        top:-350\n    },\n\n})","import * as React from 'react';\nimport {useContext, useState} from 'react';\nimport classNames from \"classnames\";\nimport Picker, {SKIN_TONE_MEDIUM_DARK} from \"emoji-picker-react\";\nimport {Button} from \"@mui/material\";\nimport EmojiEmotionsIcon from \"@mui/icons-material/EmojiEmotions\";\nimport {useStyles} from \"./styles\";\nimport {MyContext} from \"../../state/context\";\nimport {observer} from \"mobx-react-lite\";\n\n\n\ninterface IProps  {\n    frameWidth?:number\n}\n\nexport const Emoji: React.FC<IProps> = observer((props) => {\n    const {children,frameWidth = 0} = props;\n    const [chat,me,socket] = useContext ( MyContext );\n    const styles = useStyles ();\n    const [isShowEmoji, setIsShowEmoji] = useState ( false );\n    const showImoji = () => setIsShowEmoji ( true );\n    const hideImoji = () => setIsShowEmoji ( false );\n    const onEmojiClick = (event: any, emojiObject: any) => {\n        chat.setMessageValue ( emojiObject.emoji ) ;\n    };\n    return (\n        <div style={{right:`${frameWidth * 0.2}px`}} className={ classNames ( styles.emojiRoot, {[styles.picker]: isShowEmoji} ) }\n             onBlur={ hideImoji }>\n            { isShowEmoji\n                ? <Picker native groupNames={ {smileys_people: \"PEOPLE\"} } disableAutoFocus={ true }\n                          onEmojiClick={ onEmojiClick } skinTone={ SKIN_TONE_MEDIUM_DARK }/>\n                : <Button onClick={ showImoji }><EmojiEmotionsIcon/></Button> }\n        </div>\n    );\n});","import * as React from 'react';\nimport {useContext, useEffect, useRef, useState} from 'react';\nimport {Button, Container, Grid, TextField} from '@mui/material';\nimport {Loader} from \"../Loader/Loader\";\nimport {useStyles} from \"./styles\";\nimport {Message} from \"../Message/Message\";\nimport {Emoji} from \"../Emoji/Emoji\";\nimport {observer} from \"mobx-react-lite\";\nimport {IMessage} from '../../state/chatStore';\nimport {MyContext} from \"../../state/context\";\nimport {useFormik} from 'formik';\nimport MeStore from \"../../state/meStore\";\n\n\ntype Props = {}\n\n\nexport const Chat: React.FC<Props> = observer ( ((props) => {\n    const [chat,me, socket] = useContext ( MyContext );\n    const chatRef = useRef<HTMLDivElement> ( null );\n    const styles = useStyles ();\n    const sendMessage = () => {\n        if (!chat.messageValue.trim ()) return;\n        const message = {\n            event: 'message',\n            id: Date.now ().toString (),\n            name: me.me.email,\n            body: chat.messageValue,\n        };\n        socket?.send ( JSON.stringify ( message ) );\n        chat.setMessageValue ( '' );\n    };\n\n    const formik = useFormik ( {\n        initialValues: {\n            message: 'введите сообщение',\n        },\n        onSubmit: (values) => sendMessage (),\n    } );\n\n    const messagesArray = chat.messages;\n    const messagesLength = messagesArray.length;\n\n    const scrollToBottom = () => {\n        chatRef.current?.scrollTo ( 0, chatRef.current.scrollHeight );\n    };\n\n    useEffect ( () => {\n        scrollToBottom ();\n    } );\n\n    if (chat.isLoading) return <Loader/>;\n    return (\n        <Container>\n            <form onSubmit={ formik.handleSubmit }>\n                <Grid container className={ styles.messagesRoot } alignItems={ \"center\" }>\n                    <Grid ref={ chatRef } className={ styles.messages }>\n                        { messagesLength && chat.messages.map ( (mes: IMessage) => {\n                            const isMe = me.me.email === mes.name;\n                            return <Message key={ mes.id } isMe={ isMe } message={ mes }/>;\n                        } ) }\n                    </Grid>\n                </Grid>\n                <Grid className={ styles.newMessageRoot } container direction={ 'row' } alignItems={ 'flex-end' }>\n                    <TextField id={ 'message' } name={ 'message' } label={ 'message' } variant=\"filled\"\n                               autoComplete={ 'off' } onChange={ e => chat.setMessageValue ( e.currentTarget.value ) }\n                               value={ chat.messageValue } className={ styles.textField }\n                    />\n                    <Emoji frameWidth={ chatRef.current?.clientWidth }/>\n                    <Button type={ 'submit' } variant={ \"contained\" } className={styles.btn}><strong>send</strong></Button>\n\n                </Grid>\n            </form>\n        </Container>\n    );\n}) );","import {makeStyles} from \"@mui/styles\";\n\n\nexport const useStyles = makeStyles ( {\n    root: {\n        marginTop: '5%',\n        position: 'relative',\n\n    },\n    selectWrapper:{\n        maxWidth:100,\n        alignContent:\"center\"\n    },\n    alert: {\n        position: \"absolute\",\n        width: 300,\n        right:'25%',\n        opacity:0.7,\n        zIndex: 0,\n        top:'5%',\n\n    },\n} );","import {Chat} from \"../components/Chat/Chat\";\nimport {Login} from \"../components/Login/Login\";\nimport {Registration} from \"../components/Registration/Registration\";\nimport {JoinOptions} from \"../components/JoinOptions/JoinOptions\";\nimport {Profile} from \"../components/Profile/Profile\";\n\n\nexport enum ROUTES {\n    LOGIN_ROUTE = '/login',\n    CHAT_ROUTE = '/chat',\n    REGISTRATION_ROUTE = '/registration',\n    JOIN_ROUTE = '/join',\n    PROFILE_ROUTE = '/profile',\n}\n\nexport const publicRoutes = [\n\n    {\n        path: ROUTES.JOIN_ROUTE,\n        Component: JoinOptions,\n    },\n    {\n        path: ROUTES.LOGIN_ROUTE,\n        Component: Login,\n    },\n    {\n        path: ROUTES.REGISTRATION_ROUTE,\n        Component: Registration,\n    },\n];\n\nexport const privateRoutes = [\n    {\n        path: ROUTES.CHAT_ROUTE,\n        Component: Chat,\n    },\n    {\n        path: ROUTES.PROFILE_ROUTE,\n        Component: Profile,\n    },\n];\n\n","import {LANG_OBJ} from \"../App/const\";\n\nexport const LANG_FORM_PROP:ILangForm = {\n    10 : LANG_OBJ.RU,\n    20 : LANG_OBJ.EN,\n\n}\n\nexport const LANGUAGE = {\n   RU : LANG_FORM_PROP[\"10\"],\n   EN : LANG_FORM_PROP[\"20\"]\n}\n\ninterface ILangForm {\n    [propName: number]: typeof LANG_OBJ,\n}","import {Alert, Box, Button, FormControl, Grid, Grow, InputLabel, MenuItem, Select, TextField} from '@mui/material';\nimport * as React from 'react';\nimport {useContext, useMemo} from 'react';\nimport {useFormik} from \"formik\";\nimport {MyContext} from \"../../state/context\";\nimport {useStyles} from \"./styles\";\nimport {LANG} from \"../App/const\";\nimport {LANGUAGE} from \"./const\";\n\n\nexport const BasicJoinForm: React.FC<IProps> = (props) => {\n    const {onSubmit, children, title, withOptions = false, submitButtonText, showAlert = false, onCloseAlert} = props;\n    const [chat, me, socket] = useContext(MyContext);\n    const styles = useStyles();\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n            email: '',\n            password: '',\n            country: '',\n            city: '',\n            language:LANGUAGE.RU,\n        },\n\n        onSubmit: (values) => {\n            const {name, password, city, country, language,email} = values\n            try {\n                onSubmit && onSubmit({name, password, city, country, language , email});\n            } catch (e) {\n                console.log(e);\n            }\n\n        },\n    });\n\n    const onChatDisabler = useMemo(() => {\n        return (formik.values?.name === '')\n            || formik.values.name.trim().length < 3\n            || (formik.values?.password === '')\n            || formik.values.password.trim().length < 3\n    }, [formik]);\n    return (\n        <form className={styles.root} onSubmit={formik.handleSubmit}>\n            <Box className={styles.alert}>\n                <Grow in={showAlert}>{<Alert onClose={onCloseAlert} severity=\"info\">{withOptions\n                    ? 'Введите имя которое будет использовано для регистрации и отправки сообщений в чате'\n                    : 'Введите имя указанное в процессе регистрации'}</Alert>}</Grow>\n                {/* Conditionally applies the timeout prop to change the entry speed. */}\n                <Grow\n                    in={showAlert}\n                    style={{transformOrigin: '0 0 0'}}\n                    {...(showAlert ? {timeout: 1000} : {})}\n                >\n                    {<Alert severity=\"info\">{withOptions\n                        ? 'Введите пароль который будет использован для регистрации'\n                        : 'Введите пароль указанный в процессе регистрации'}</Alert>}\n                </Grow>\n            </Box>\n            <Grid container justifyContent={\"center\"} alignItems={\"center\"}\n                  direction={'column'} gap={1}>\n                {title}\n                {withOptions && (\n                    <FormControl fullWidth classes={{root: styles.selectWrapper}}>\n                        <InputLabel id=\"select-label\">Язык</InputLabel>\n                        <Select\n                            labelId=\"select-label\"\n                            id=\"lang\"\n                            label=\"lang\"\n                            name=\"lang\"\n                            onChange={formik.handleChange}\n                            defaultValue={LANGUAGE.RU}\n                        >\n                            <MenuItem value={LANGUAGE.RU}>{LANG.RU}</MenuItem>\n                            <MenuItem value={LANGUAGE.EN}>{LANG.EN}</MenuItem>\n                        </Select>\n                    </FormControl>\n                )}\n                <TextField autoFocus variant=\"filled\"\n                           onChange={formik.handleChange}\n                           value={formik.values.email}\n                           id=\"email\" name=\"email\" label=\"email\"\n                />\n                {withOptions && (\n                    <TextField variant=\"filled\"\n                               onChange={formik.handleChange}\n                               value={formik.values.name}\n                               id=\"name\" name=\"name\" label=\"name\"\n                    />\n                )}\n\n                <TextField inputProps={{\n                    autoComplete: 'new-password',\n                    form: {\n                        autoComplete: 'off',\n                    },\n                }} variant=\"filled\"\n                           onChange={formik.handleChange}\n                           value={formik.values.password} type=\"password\"\n                           id=\"password\" name=\"password\" label=\"password\"\n                />\n                {withOptions && (\n                    <>\n                        <TextField variant=\"filled\"\n                                   onChange={formik.handleChange}\n                                   value={formik.values.country}\n                                   id=\"country\" name=\"country\" label=\"country\"\n                        />\n                        <TextField variant=\"filled\"\n                                   onChange={formik.handleChange}\n                                   value={formik.values.city}\n                                   id=\"city\" name=\"city\" label=\"city\"\n                        />\n                    </>\n                )\n                }\n                <Button type=\"submit\" disabled={onChatDisabler} color={'info'}\n                        variant={'contained'}>{submitButtonText}</Button>\n            </Grid>\n        </form>\n    );\n};\n\ninterface IProps {\n    onSubmit?: (values: IJoinFormValues) => void;\n    onCloseAlert?: () => void;\n    submitButtonText: string;\n    withOptions?: boolean;\n    showAlert?: boolean;\n    title?: React.ReactNode\n};\n\nexport interface IJoinFormValues {\n    name: string,\n    email: string,\n    password: string,\n    city?: string,\n    country?: string,\n    language?: number\n}\n","import {makeStyles} from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles({\n    title:{\n        ...title,\n        textTransform:\"uppercase\",\n    }\n\n});","import {makeStyles} from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles({\n    children:{\n       display:\"grid\",\n        gridTemplateColumns:'1fr 24px',\n        columnGap:6,\n        cursor:\"pointer\"\n    },\n    title:{\n        ...title,\n        textTransform:\"uppercase\",\n    }\n\n});","import {makeStyles} from \"@mui/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        marginTop: '4%',\n    },\n    btn: {\n        height: 100,\n        width: 300,\n\n    }\n\n})","import {Button, Grid} from \"@mui/material\";\nimport {NavLink} from \"react-router-dom\";\nimport {ROUTES} from \"../../utils/routes\";\nimport * as React from \"react\";\nimport {useStyles} from \"./styles\";\n\nexport const JoinOptions: React.FC = () => {\n    const styles = useStyles();\n    return (\n        <Grid className={styles.root} container justifyContent={\"center\"} direction={\"column\"} alignItems={\"center\"}\n              gap={10}>\n            {/*<FanFact text={'test'}/>*/}\n            <Grid item><NavLink to={ROUTES.REGISTRATION_ROUTE}>< Button size={'large'}\n                variant={'contained'} classes={{root: styles.btn}}>Регистрация</Button>\n            </NavLink></Grid>\n            <Grid item><NavLink to={ROUTES.LOGIN_ROUTE}>< Button size={'large'}\n                variant={'contained'} classes={{root: styles.btn}}>Вход</Button>\n            </NavLink></Grid>\n        </Grid>\n    )\n}","import * as React from 'react';\nimport {useContext} from 'react';\nimport {MyContext} from \"../../state/context\";\nimport {BasicJoinForm, IJoinFormValues} from \"../BasicJoinForm/BasicJoinForm\";\nimport {useStyles} from './styles'\n\n\nexport const Login: React.FC = () => {\n    const styles = useStyles()\n    const [chat, me, socket] = useContext(MyContext);\n\n    const onSubmit = (values:IJoinFormValues) => {\n        const {password,email} = values;\n        me.login(email, password)\n    }\n\n    return (\n        <BasicJoinForm onSubmit={onSubmit}\n                       submitButtonText={\"Войти\"}\n                       title={(\n            <div className={styles.title}> Вход </div>\n        )}>\n\n        </BasicJoinForm>\n    );\n};\n\n","import * as React from 'react';\nimport {useCallback, useContext, useState} from 'react';\nimport {BasicJoinForm, IJoinFormValues} from \"../BasicJoinForm/BasicJoinForm\";\nimport HelpIcon from \"@mui/icons-material/Help\";\nimport {useStyles} from \"./styles\";\nimport {MyContext} from \"../../state/context\";\n\n\nexport const Registration: React.FC<Props> = () => {\n    const styles = useStyles();\n    const [showAlert, setShowAlert] = useState(false);\n    const [chat, me, socket] = useContext(MyContext);\n    let timeOutId: NodeJS.Timeout;\n    const onSubmit = async (values:IJoinFormValues) => {\n        const {country,language,city,password,name,email} = values\n        await me.registration({name,email, password, city, country, language});\n    };\n\n    const onShowAlert = useCallback(() => {\n        setShowAlert(true);\n        timeOutId = setTimeout(() => {\n            setShowAlert(false);\n        }, 5000);\n    }, []);\n    const onCloseAlert = useCallback(() => {\n        setShowAlert(false);\n        clearTimeout(timeOutId);\n    }, []);\n\n    return (\n        <BasicJoinForm\n            onCloseAlert={onCloseAlert}\n            showAlert={showAlert}\n            onSubmit={onSubmit}\n            submitButtonText={\"Зарегистрироваться\"}\n            withOptions\n            title={(\n                <div className={styles.children} onClick={showAlert ? onCloseAlert : onShowAlert}>\n                    <div className={styles.title}> Регистрация</div>\n                    <HelpIcon/>\n                </div>\n            )}>\n        </BasicJoinForm>\n    );\n};\ntype Props = {};\n","import * as React from 'react';\nimport {useContext, useEffect} from \"react\";\nimport {MyContext} from \"../../state/context\";\n\n\ninterface IProps {\n\n}\n\n\n\nexport const Weather: React.FC<IProps> = (props) => {\n    const {children} = props;\n    const [chat, me, socket,utility] = useContext ( MyContext );\n    useEffect(()=>{\n        utility.fetchWeather();\n    },[])\n    console.log (utility.weather);\n    return (\n        <div>\n\n        </div>\n    );\n};","import * as React from 'react';\nimport {useCallback, useContext, useRef} from 'react';\nimport {AppBar, Button, Grid} from '@mui/material';\nimport {useStyles} from \"./styles\";\nimport {MyContext} from \"../../state/context\";\nimport {observer} from \"mobx-react-lite\";\nimport {Clock} from \"../Clock/Clock\";\nimport {NavLink, useLocation} from 'react-router-dom';\nimport {ROUTES} from \"../../utils/routes\";\nimport {Weather} from \"../Weather/Weather\";\n\n\ntype Props = {};\nexport const NavBar: React.FC<Props> = observer ( (props) => {\n    const [chat, me, socket] = useContext ( MyContext );\n    const {connectionCounter} = chat;\n    const styles = useStyles ();\n    const clockRef = useRef<HTMLDivElement> ( null );\n    const isAuthorized = !!me.me.email;\n    const isLoginPage = useLocation ().pathname.includes ( ROUTES.LOGIN_ROUTE );\n    const isLJoinPage = useLocation ().pathname.includes ( ROUTES.JOIN_ROUTE );\n    const emptyBoxWidth = clockRef?.current?.offsetWidth || 0;\n    const onLogout = useCallback ( () => me.logout (), [] );\n    return (\n        <AppBar color={ \"transparent\" } variant={ \"outlined\" } elevation={ 0 } position=\"static\">\n            <Grid container item alignItems={ \"center\" } justifyContent={ 'space-evenly' }>\n                <div style={ {width: emptyBoxWidth || '11vw'} }>\n                    <Weather/>\n                </div>\n                <div className={ styles.title }>\n                    <div>{ 'Чат имени Альфредо Гарсии' }</div>\n                    { isAuthorized ?\n                        <span className={ styles.onlineCounter }>\n                                сейчас онлайн: { connectionCounter || 0 } человек\n                            </span>\n                        : !isLJoinPage && (isLoginPage\n                            ? <Grid item><NavLink to={ ROUTES.REGISTRATION_ROUTE }>< Button\n                                variant={ 'text' }>к регистрации</Button></NavLink></Grid>\n                            : <Grid item><NavLink to={ ROUTES.LOGIN_ROUTE }>< Button\n                                variant={ 'text' }>к логину</Button></NavLink>\n                            </Grid>\n                    ) }\n\n                </div>\n                <Clock clocRef={ clockRef }/>\n                { isAuthorized && <Button onClick={ onLogout } variant={ 'outlined' }>Logout</Button> }\n            </Grid>\n        </AppBar>\n    );\n} );","import axios from \"axios\";\nimport {IUser} from \"../service/AuthService\";\n\n\n// const baseURL = 'http://localhost:5000';\nconst baseURL = 'https://ws-simple-chat-api.herokuapp.com/';\n\nconst chatApiInstance = axios.create({baseURL});\n\nchatApiInstance.interceptors.request.use((config)=>{\n    if ( config && config.headers) {\n        config.headers.Authorization = `Bearer ${ localStorage.getItem ( 'token' ) }`;\n        return config\n    }\n});\n\nchatApiInstance.interceptors.response.use((config)=>{\n    return config;\n},async (error) => {\n    const originalRequest = error.config;\n    if (error.response.status === 401 && error.config && !error.config._isRetry) {\n        originalRequest._isRetry = true;\n        try {\n            const response = await axios.post<AuthResponse>(`${baseURL}/auth/refresh`, {withCredentials: true})\n            localStorage.setItem('token', response.data.accessToken);\n            return chatApiInstance.request(originalRequest);\n        } catch (e) {\n            console.log('НЕ АВТОРИЗОВАН')\n        }\n    }\n    throw error;\n});\n\n\nexport default chatApiInstance;\n\nexport interface AuthResponse {\n    accessToken: string;\n    refreshToken: string;\n    user: IUser;\n}","import {AxiosResponse} from \"axios\";\nimport instance from \"../http/chatApiInstance\";\nimport {IJoinFormValues} from \"../components/BasicJoinForm/BasicJoinForm\";\n\n\nexport default class AuthService {\n    static async login(email: string, password: string): Promise<AxiosResponse<IAuthResponse>> {\n        return instance.post ( 'auth/login', {email, password} );\n    }\n\n    static async registration(values:IJoinFormValues): Promise<AxiosResponse<IAuthResponse>> {\n        const {password,name,country,language,city,email} = values;\n        return instance.post ( 'auth/registration', {email,password,name,country,language,city} );\n    }\n\n    static async logout(): Promise<void> {\n        return instance.delete ( 'auth/logout' );\n    }\n    static async refresh(): Promise<AxiosResponse<IAuthResponse>> {\n        return instance.post ( 'auth/refresh' );\n    }\n}\n\nexport interface IAuthResponse {\n    accessToken: string;\n    refreshToken: string;\n    user: IUser;\n}\n\nexport interface IUser {\n    email: string;\n    id: string;\n    isActivated: boolean;\n\n}","import {makeAutoObservable} from \"mobx\";\nimport AuthService, {IAuthResponse, IUser} from \"../service/AuthService\";\nimport {AxiosResponse} from \"axios\";\nimport {IJoinFormValues} from \"../components/BasicJoinForm/BasicJoinForm\";\n\n\ninterface IMEStore {\n    me: IUser | null;\n}\n\nclass MeStore implements IMEStore {\n    me = {} as IUser;\n\n\n    constructor() {\n        makeAutoObservable ( this, {}, {deep: true} );\n    }\n\n    setMe(item: IUser | null) {\n        if (item) {\n            this.me = item;\n        } else {\n            this.me = {} as IUser\n        }\n    };\n\n    setAuthData(data: AxiosResponse<IAuthResponse, any>) {\n        localStorage.setItem ( 'token', data.data.accessToken );\n        this.setMe ( data.data.user );\n    }\n\n    async login(email: string, password: string) {\n        try {\n            const response = await AuthService.login ( email, password );\n            this.setAuthData ( response );\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n\n    async registration(values:IJoinFormValues) {\n        const {password,name,country,language,city,email} = values;\n        try {\n            const response = await AuthService.registration ({password,email, name, country, language, city});\n            this.setAuthData ( response );\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n\n    async refresh() {\n        try {\n            const response = await AuthService.refresh ();\n            localStorage.setItem ( 'token', response.data.accessToken );\n            this.setMe ( response.data.user );\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n    async logout() {\n        try {\n            const response = await AuthService.logout();\n            this.setMe ( null );\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n\n}\n\nexport default MeStore;","import {Redirect, Route, Switch} from 'react-router-dom';\nimport * as React from \"react\";\nimport {privateRoutes, publicRoutes, ROUTES} from \"../../utils/routes\";\n\n\n\nconst AppRoute:React.FC = () => {\n\n    const isAuthorized = false\n\n    return isAuthorized ?\n        <Switch>\n            { privateRoutes.map ( ({path, Component}) => {\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\n            } ) }\n            <Redirect to={ROUTES. CHAT_ROUTE }/>\n        </Switch>\n        :\n        <Switch>\n            { publicRoutes.map ( ({path, Component}) => {\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\n            } ) }\n            <Redirect to={ ROUTES.JOIN_ROUTE }/>\n        </Switch>\n}\n\n\nexport default AppRoute;\n","import axios from \"axios\";\n\n\nconst baseURL = 'http://api.fungenerators.com/fact/';\nconst dayFactApiInstance = axios.create({baseURL});\nexport default dayFactApiInstance;\n\n","import {AxiosResponse} from \"axios\";\nimport instance from \"../http/funFactApiInstance\";\n\n\nexport default class DayFactService {\n    static async fetchFact(): Promise<AxiosResponse<IDayFactResponse>> {\n        return instance.get ('random',)\n    }\n\n}\n\ninterface IDayFactResponse {\n    \"success\": {\n        total: number\n    },\n    \"contents\": {\n        fact: string,\n        id: string,\n        category: string,\n        subcategory: string\n    }\n}\n","import {AxiosResponse} from \"axios\";\nimport chatInstance from '../http/chatApiInstance'\n\n\nexport default class WeatherService {\n    static async fetchWeather(): Promise<AxiosResponse<IWeatherResponse>> {\n        return chatInstance.get (`/utils/weather`,{\n\n        })\n    }\n\n}\n\nexport interface IWeatherResponse {\n    \"coord\": {\n        \"lon\": number,\n        \"lat\": number\n    },\n    \"weather\": [\n        {\n            \"id\": number,\n            \"main\": string,\n            \"description\": string,\n            \"icon\": string\n        }\n    ],\n    \"base\": string,\n    \"main\": {\n        \"temp\":number,\n        \"pressure\": number,\n        \"humidity\": number,\n        \"temp_min\": number,\n        \"temp_max\":number\n    },\n    \"visibility\": number,\n    \"wind\": {\n        \"speed\": number,\n        \"deg\": number\n    },\n    \"clouds\": {\n        \"all\": number\n    },\n    \"dt\": number,\n    \"sys\": {\n        \"type\": number,\n        \"id\": number,\n        \"message\": number,\n        \"country\": string,\n        \"sunrise\": number,\n        \"sunset\": number\n    },\n    \"id\": number,\n    \"name\": string,\n    \"cod\": number\n}\n\n","import {makeAutoObservable} from \"mobx\";\nimport AuthService, {IAuthResponse, IUser} from \"../service/AuthService\";\nimport {AxiosResponse} from \"axios\";\nimport DayFactService from \"../service/DayFactService\";\nimport WeatherService, {IWeatherResponse} from \"../service/WeatherService\";\n\n\ninterface IUtilityStore {\n    fact:string\n    weather:IWeatherResponse\n}\n\nclass UtilityStore implements IUtilityStore {\n    fact = '';\n    weather = {} as IWeatherResponse;\n\n\n    constructor() {\n        makeAutoObservable ( this, {}, {deep: true} );\n    }\n\n    setFact(item: string) {\n        if (item) {\n            this.fact = item;\n        } else {\n            this.fact = ''\n        }\n    };\n    setWeather(item: IWeatherResponse) {\n        if (item) {\n            this.weather = item;\n        } else {\n            this.weather = {} as IWeatherResponse\n        }\n    };\n\n    async fetchFact() {\n        try {\n            const response = await DayFactService.fetchFact();\n            this.setFact ( response.data.contents.fact );\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n async fetchWeather() {\n        try {\n            const response = await WeatherService.fetchWeather();\n            this.setWeather(response.data) ;\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n\n\n}\n\nexport default UtilityStore;","import * as React from 'react';\nimport {useEffect, useState} from 'react';\nimport {NavBar} from \"../NavBar/NavBar\";\nimport './App.css';\nimport {Loader} from \"../Loader/Loader\";\nimport {HashRouter} from 'react-router-dom';\nimport ChatStore, {MESSAGE_ENUM} from \"../../state/chatStore\";\nimport {observer} from \"mobx-react-lite\";\nimport {MyContext} from '../../state/context';\nimport MeStore from \"../../state/meStore\";\nimport {Chat} from \"../Chat/Chat\";\nimport AppRoute from \"../AppRoute/AppRoute\";\nimport utilityStore from \"../../state/utilityStore\";\n\n\nconst App: React.FC = observer ( (props) => {\n    const [chat] = useState ( () => new ChatStore () );\n    const [me] = useState ( () => new MeStore () );\n    const [utility] = useState ( () => new utilityStore () );\n    const [socket, setSocket] = useState<WebSocket | null> ( null );\n    const value = React.useMemo ( () => [chat, me, socket, utility], [chat, me, socket, utility] );\n\n\n    const connect = async () => {\n        chat.setLoading ( true );\n        setSocket ( await new WebSocket ( 'wss://ws-simple-chat-api.herokuapp.com' ) );\n        // setSocket ( await new WebSocket ( 'ws://localhost:5000' ) );\n    };\n\n    const isAuthorized = !!me.me.email;\n\n    useEffect ( () => {\n        if (localStorage.getItem ( 'token' )) {\n            me.refresh ();\n        }\n    }, [] );\n\n    useEffect ( () => {\n        if (!socket && isAuthorized) {\n            connect ();\n        }\n    }, [isAuthorized] );\n\n    if (socket) {\n        socket.onmessage = (messageEvent: MessageEvent) => {\n            chat.setMessages ( JSON.parse ( messageEvent.data ) );\n        };\n        socket.onopen = () => {\n            chat.setConnected ( true );\n            const message = {\n                event: MESSAGE_ENUM.CONNECTION,\n                id: me.me.id,\n                name: me.me.email,\n                body: me.me.email,\n            };\n            socket?.send ( JSON.stringify ( message ) );\n            chat.setLoading ( false );\n        };\n        socket.onmessage = (event: MessageEvent) => {\n            const messages = JSON.parse ( event.data );\n            chat.setMessages ( messages );\n        };\n        socket.onclose = () => {\n            chat.setConnected ( false );\n            const message = {\n                event: MESSAGE_ENUM.CONNECTION,\n                id: me.me.id,\n                name: me.me.email,\n                body: '',\n            };\n            socket.send ( JSON.stringify ( message ) );\n        };\n        socket.onerror = () => {\n            chat.setConnected ( false );\n            setTimeout ( () => connect (), 1000 );\n        };\n    }\n    if (chat.isLoading) return <Loader/>;\n\n\n    return (\n        <HashRouter>\n            <MyContext.Provider value={ value }>\n                <NavBar/>\n                { isAuthorized ?\n                    <Chat/>\n                    : <AppRoute/>\n                }\n            </MyContext.Provider>\n        </HashRouter>\n    );\n} );\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./components/App/App\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}