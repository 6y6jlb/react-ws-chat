{"version":3,"sources":["state/context.ts","reportWebVitals.ts","components/NavBar/styles.ts","state/chatStore.ts","components/Clock/styles.ts","utils/time.ts","components/Clock/Clock.tsx","components/Loader/Loader.tsx","components/Chat/styles.ts","components/Message/styles.ts","utils/const.ts","components/Message/Message.tsx","components/Emoji/styles.ts","components/Emoji/Emoji.tsx","components/Chat/Chat.tsx","components/BasicJoinForm/styles.ts","components/BasicJoinForm/BasicJoinForm.tsx","components/Registration/styles.ts","http/instance.ts","utils/routes.ts","service/AuthService.ts","components/JoinOptions/styles.ts","components/JoinOptions/JoinOptions.tsx","components/Login/Login.tsx","components/Registration/Registration.tsx","components/NavBar/NavBar.tsx","state/meStore.ts","components/AppRoute/AppRoute.tsx","components/App/App.tsx","index.tsx"],"names":["MyContext","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","useStyles","makeStyles","root","justifyContent","display","columnGap","flexWrap","rowGap","margin","title","gridTemplateRows","justifyItems","onlineCounter","color","React","defaultValue","MESSAGE_ENUM","timeRoot","fontSize","fontFamily","whiteSpace","getTime","date","getTwoDig","time","string","toString","length","hour","getHours","min","getMinutes","sec","getSeconds","timeConverter","UNIX_timestamp","a","Date","year","getFullYear","month","getMonth","getDate","Clock","props","children","useState","setTime","styles","useEffect","clearId","setTimeout","clearInterval","className","Loader","Container","Grid","container","alignItems","style","height","window","innerHeight","CircularProgress","messagesRoot","maxHeight","messages","width","backgroundColor","overflowY","newMessageRoot","position","sendButton","textField","mainBlock","minWidth","borderRadius","maxWidth","padding","info","name","copy","cursor","opacity","top","ChatStore","messageValue","isLoading","isConnected","connectionCounter","makeAutoObservable","this","deep","value","count","Message","observer","isMe","message","useContext","chat","event","CONNECTION","setConnectionCounter","marginLeft","marginRight","paddingRight","direction","MESSAGE","justifySelf","borderBottom","toUpperCase","body","onClick","navigator","clipboard","writeText","right","left","emojiRoot","zIndex","picker","Emoji","frameWidth","isShowEmoji","setIsShowEmoji","classNames","onBlur","native","groupNames","smileys_people","disableAutoFocus","onEmojiClick","emojiObject","setMessageValue","emoji","skinTone","SKIN_TONE_MEDIUM_DARK","Button","Chat","me","socket","chatRef","useRef","formik","useFormik","initialValues","onSubmit","values","trim","id","now","email","send","JSON","stringify","sendMessage","messagesLength","current","scrollTo","scrollHeight","scrollToBottom","handleSubmit","ref","map","mes","TextField","label","variant","autoComplete","onChange","e","currentTarget","clientWidth","type","classes","outlined","marginTop","alert","BasicJoinForm","submitButtonText","isRegistration","showAlert","onCloseAlert","console","log","password","onChatDisabler","Box","Grow","in","Alert","onClose","severity","transformOrigin","timeout","gap","autoFocus","handleChange","inputProps","form","disabled","gridTemplateColumns","baseURL","instance","axios","create","interceptors","request","use","config","headers","Authorization","localStorage","getItem","response","error","originalRequest","status","_isRetry","post","withCredentials","setItem","data","accessToken","ROUTES","AuthService","delete","button","publicRoutes","path","JOIN_ROUTE","Component","item","to","REGISTRATION_ROUTE","LOGIN_ROUTE","connect","login","timeOutId","setShowAlert","onShowAlert","useCallback","clearTimeout","username","registration","result","NavBar","CHAT_ROUTE","isLoginPage","useLocation","pathname","includes","AppBar","elevation","Toolbar","MeStore","setMe","user","warn","refresh","AppRoute","component","exact","App","setSocket","setLoading","WebSocket","isAuthorized","onmessage","messageEvent","setMessages","parse","onopen","setConnected","onclose","onerror","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71954b8f.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\nlet defaultValue: any;\r\nexport let MyContext: React.Context<any>;\r\nMyContext = React.createContext (defaultValue);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { makeStyles } from '@mui/styles';\r\n\r\nexport const useStyles = makeStyles({\r\n    root:{\r\n        justifyContent:\"space-between\",\r\n        display:\"grid\",\r\n        columnGap:30,\r\n        flexWrap:'wrap',\r\n        rowGap:4,\r\n        margin:'8px 0',\r\n    },\r\n    title: {\r\n        display:\"grid\",\r\n        gridTemplateRows:'1fr 1fr',\r\n        justifyItems:\"flex-end\",\r\n\r\n    },\r\n    onlineCounter:{\r\n        color:\"grey\"\r\n    },\r\n});","import {makeAutoObservable} from \"mobx\";\r\n\r\n\r\nexport enum MESSAGE_ENUM {\r\n    MESSAGE = 'message',\r\n    QUIT = 'quit',\r\n    CONNECTION = 'connection'\r\n}\r\n\r\n\r\nexport interface IMessage {\r\n    event: MESSAGE_ENUM;\r\n    id: string;\r\n    name: string;\r\n    body: string;\r\n    connectionCounter: number;\r\n}\r\n\r\n\r\ninterface IChat {\r\n    messages: IMessage[];\r\n    messageValue: string;\r\n    isLoading: boolean;\r\n    isConnected: boolean;\r\n    connectionCounter?: number;\r\n    setConnected: (isConnected: boolean) => void;\r\n    setLoading: (isLoading: boolean) => void;\r\n    setMessageValue: (value: string) => void;\r\n    setMessages: (messages: any) => void;\r\n}\r\n\r\nclass ChatStore implements IChat {\r\n    messages = [] as IMessage[];\r\n    messageValue = '';\r\n    isLoading = false;\r\n    isConnected = false;\r\n    connectionCounter = 0;\r\n\r\n    constructor() {\r\n        makeAutoObservable ( this, {}, {deep: true} );\r\n    }\r\n\r\n\r\n    setConnected(isConnected: boolean) {\r\n        this.isConnected = isConnected;\r\n    };\r\n\r\n    setLoading(isLoading: boolean) {\r\n        this.isLoading = isLoading;\r\n    };\r\n\r\n    setMessageValue(value: string) {\r\n        this.messageValue = value;\r\n    };\r\n\r\n    setMessages(messages: any) {\r\n        this.messages =  [...this.messages,...messages, ];\r\n\r\n    };\r\n\r\n    setConnectionCounter(count: number) {\r\n        this.connectionCounter = count;\r\n    };\r\n}\r\n\r\nexport default ChatStore;","import { makeStyles } from '@mui/styles';\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    timeRoot:{\r\n       fontSize:24,\r\n        fontFamily:\"monospace\",\r\n        color:'gray',\r\n        whiteSpace:'nowrap'\r\n    },\r\n});","\r\n\r\n\r\nexport const getTime = (date:Date) => {\r\n    const getTwoDig = (time:number) => {\r\n        const string = time.toString()\r\n        return string.length > 1 ? string : `0${string}`\r\n    }\r\n    const hour = getTwoDig(date.getHours())\r\n    const min = getTwoDig(date.getMinutes())\r\n    const sec = getTwoDig(date.getSeconds())\r\n    return `${ hour }: ${min }: ${ sec }`\r\n}\r\n\r\nconst timeFromUnix = (date:number) => {\r\n    return new Date(date * 1000)\r\n}\r\n\r\nexport const getDate = (date:number) => {\r\n    const fullDate = timeFromUnix(date)\r\n    const year = fullDate.getFullYear()\r\n    const month = fullDate.getMonth()\r\n    const day = fullDate.getDay()\r\n    return `${ year }: ${month }: ${ day }`\r\n}\r\nexport const timeConverter = (UNIX_timestamp:number) => {\r\n    // weird\r\n    const a = new Date(UNIX_timestamp / 1000);\r\n    const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n    const year = a.getFullYear();\r\n    const month = months[a.getMonth()];\r\n    const date = a.getDate();\r\n    const hour = a.getHours();\r\n    const min = a.getMinutes();\r\n    const sec = a.getSeconds();\r\n    const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\r\n    return time;\r\n}","import * as React from 'react';\r\nimport {useEffect, useState} from 'react';\r\nimport {useStyles} from './styles'\r\nimport {getTime} from \"../../utils/time\";\r\n\r\n\r\ninterface IProps {\r\n\r\n}\r\n\r\nexport const Clock: React.FC<IProps> = (props) => {\r\n    const {children} = props;\r\n    const [time, setTime] = useState ( new Date () );\r\n    const styles = useStyles()\r\n\r\n    useEffect ( () => {\r\n        const clearId = setTimeout ( () => setTime ( new Date () ), 5000 );\r\n        return () => clearInterval ( clearId );\r\n    }, [time] );\r\n\r\n    return (\r\n        <div className={styles.timeRoot}>\r\n            { getTime(time)}\r\n        </div>\r\n    );\r\n};","// @flow\r\nimport {CircularProgress, Container, Grid} from '@mui/material';\r\nimport * as React from 'react';\r\n\r\n\r\ntype Props = {\r\n\r\n};\r\nexport const Loader = (props: Props) => {\r\n    return (\r\n        <Container>\r\n            <Grid container alignItems={\"center\"} justifyContent={\"center\"} style={{height: window.innerHeight-30}}>\r\n                    <CircularProgress color=\"primary\" />\r\n            </Grid>\r\n        </Container>\r\n    );\r\n};","import {makeStyles} from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n    messagesRoot: {\r\n        maxHeight: window.innerHeight - 30\r\n    },\r\n    messages: {\r\n        width: '100%',\r\n        height: '70vh',\r\n        backgroundColor: '#354765',\r\n        overflowY: 'auto'\r\n    },\r\n    newMessageRoot: {\r\n        position: 'relative',\r\n        width: '100%',\r\n        rowGap: 20,\r\n        color: '#ffffff'\r\n    },\r\n    sendButton:{\r\n        backgroundColor: '#354765',\r\n        color: '#ffffff',\r\n        width:'20%',\r\n        height:56,\r\n        '&:hover':{\r\n            backgroundColor: '#7094d2',\r\n            color: '#354765',\r\n        }\r\n    },\r\n    textField:{\r\n        width:'80%'\r\n    }\r\n})","import { makeStyles } from '@mui/styles';\r\nimport {MOBIL} from \"../../utils/const\";\r\n\r\n\r\nexport const useStyles = makeStyles({\r\n    mainBlock:{\r\n        minWidth: '40vw',\r\n        margin: 10,\r\n        borderRadius: '4%',\r\n        maxWidth: '60%',\r\n        width: 'fit-content',\r\n        padding: 15,\r\n        display: 'grid',\r\n        justifyContent:'flexStart',\r\n        rowGap: 20,\r\n        fontFamily: 'serif',\r\n        position:'relative'\r\n    },\r\n    info: {\r\n        color:'#afbed2',\r\n        margin:'20px 30px'\r\n    },\r\n    name:{\r\n        display:'block',\r\n        maxWidth:'max-content'\r\n    },\r\n    copy:{\r\n        cursor:\"pointer\",\r\n        position:\"absolute\",\r\n        opacity:0.7,\r\n        top:8\r\n\r\n    },\r\n    date:{\r\n        fontSize:'0.7em'\r\n    },\r\n    [`@media (max-width:${MOBIL}px)`]: {\r\n        mainBlock:{\r\n            minWidth: '70vw',\r\n            fontSize: '1.4em'\r\n        },\r\n    }\r\n});","export const MOBIL = 520;","import * as React from 'react';\r\nimport {useContext} from 'react';\r\nimport {Grid} from \"@mui/material\";\r\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\r\nimport {useStyles} from \"./styles\";\r\nimport {MESSAGE_ENUM} from \"../../state/chatStore\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {timeConverter} from \"../../utils/time\";\r\nimport {MyContext} from \"../../state/context\";\r\n\r\n\r\ntype Props = {\r\n    isMe: boolean;\r\n    message: any;\r\n};\r\nexport const Message: React.FC<Props> = observer((props) => {\r\n    const {isMe, message} = props;\r\n    const [chat,me, socket] = useContext ( MyContext );\r\n    const styles = useStyles ();\r\n    const onCopy = () =>  navigator.clipboard.writeText(message.body)\r\n    if (message.event === MESSAGE_ENUM.CONNECTION) {\r\n        chat.setConnectionCounter(message.connectionCounter);\r\n    }\r\n    const style = {\r\n        backgroundColor: isMe ? '#3a64a8' : '#536f9b',\r\n        color:  isMe ? '#f6dbaa' :'#eee4cc',\r\n        marginLeft: isMe ? 'auto' : '10%',\r\n        marginRight: isMe ? '10%' : 0,\r\n        paddingRight:10\r\n\r\n    };\r\n\r\n    return (\r\n        <Grid direction={ \"column\" } container>\r\n            { message.event === MESSAGE_ENUM.MESSAGE\r\n                ? <div className={styles.mainBlock} style={ style }>\r\n                    <h3 className={styles.name}\r\n                        style={\r\n                            {justifySelf:`${!isMe && 'flex-end'}`,borderBottom:`2px solid ${isMe ? '#f6dbaa' :'#eee4cc' }`}\r\n                        }>\r\n                        { message.name?.toUpperCase() }\r\n                    </h3>\r\n                    <span>{ message.body }</span>\r\n                    <span className={styles.date}>{ timeConverter(message.date * 1000)  }</span>\r\n                    <div onClick={onCopy} style={isMe ? {right:2} : {left:6}\r\n                    } title={'скопировать сообщение'} className={styles.copy}>\r\n                        <ContentCopyIcon/>\r\n                    </div>\r\n            </div>\r\n                : message.event === MESSAGE_ENUM.CONNECTION ?\r\n                    <span className={ styles.info }>{ message.name } подключился к чату.. .</span>\r\n                    : <span className={ styles.info }>{ message.name } вышел из чата.. .</span> }\r\n        </Grid>\r\n    );\r\n});","import {makeStyles} from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n    emojiRoot: {\r\n        position: \"absolute\",\r\n        zIndex: 1,\r\n        top: 10,\r\n\r\n    },\r\n\r\n    picker:{\r\n        top:-350\r\n    },\r\n\r\n})","import * as React from 'react';\r\nimport {useContext, useState} from 'react';\r\nimport classNames from \"classnames\";\r\nimport Picker, {SKIN_TONE_MEDIUM_DARK} from \"emoji-picker-react\";\r\nimport {Button} from \"@mui/material\";\r\nimport EmojiEmotionsIcon from \"@mui/icons-material/EmojiEmotions\";\r\nimport {useStyles} from \"./styles\";\r\nimport {MyContext} from \"../../state/context\";\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\n\r\n\r\ninterface IProps  {\r\n    frameWidth?:number\r\n}\r\n\r\nexport const Emoji: React.FC<IProps> = observer((props) => {\r\n    const {children,frameWidth = 0} = props;\r\n    const [chat,me,socket] = useContext ( MyContext );\r\n    const styles = useStyles ();\r\n    const [isShowEmoji, setIsShowEmoji] = useState ( false );\r\n    const showImoji = () => setIsShowEmoji ( true );\r\n    const hideImoji = () => setIsShowEmoji ( false );\r\n    const onEmojiClick = (event: any, emojiObject: any) => {\r\n        chat.setMessageValue ( emojiObject.emoji ) ;\r\n    };\r\n    return (\r\n        <div style={{right:`${frameWidth * 0.2}px`}} className={ classNames ( styles.emojiRoot, {[styles.picker]: isShowEmoji} ) }\r\n             onBlur={ hideImoji }>\r\n            { isShowEmoji\r\n                ? <Picker native groupNames={ {smileys_people: \"PEOPLE\"} } disableAutoFocus={ true }\r\n                          onEmojiClick={ onEmojiClick } skinTone={ SKIN_TONE_MEDIUM_DARK }/>\r\n                : <Button onClick={ showImoji }><EmojiEmotionsIcon/></Button> }\r\n        </div>\r\n    );\r\n});","import * as React from 'react';\r\nimport {useContext, useEffect, useRef, useState} from 'react';\r\nimport {Button, Container, Grid, TextField} from '@mui/material';\r\nimport {Loader} from \"../Loader/Loader\";\r\nimport {useStyles} from \"./styles\";\r\nimport {Message} from \"../Message/Message\";\r\nimport {Emoji} from \"../Emoji/Emoji\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {IMessage} from '../../state/chatStore';\r\nimport {MyContext} from \"../../state/context\";\r\nimport {useFormik} from 'formik';\r\nimport MeStore from \"../../state/meStore\";\r\n\r\n\r\ntype Props = {}\r\n\r\n\r\nexport const Chat: React.FC<Props> = observer ( ((props) => {\r\n    const [chat,me, socket] = useContext ( MyContext );\r\n    const chatRef = useRef<HTMLDivElement> ( null );\r\n    const styles = useStyles ();\r\n    const sendMessage = () => {\r\n        if (!chat.messageValue.trim ()) return;\r\n        const message = {\r\n            event: 'message',\r\n            id: Date.now ().toString (),\r\n            name: me.me.email,\r\n            body: chat.messageValue,\r\n        };\r\n        socket?.send ( JSON.stringify ( message ) );\r\n        chat.setMessageValue ( '' );\r\n    };\r\n\r\n    const formik = useFormik ( {\r\n        initialValues: {\r\n            message: 'введите сообщение',\r\n        },\r\n        onSubmit: (values) => sendMessage (),\r\n    } );\r\n\r\n    const messagesArray = chat.messages;\r\n    const messagesLength = messagesArray.length;\r\n\r\n    const scrollToBottom = () => {\r\n        chatRef.current?.scrollTo ( 0, chatRef.current.scrollHeight );\r\n    };\r\n\r\n    useEffect ( () => {\r\n        scrollToBottom ();\r\n    } );\r\n\r\n    if (chat.isLoading) return <Loader/>;\r\n    return (\r\n        <Container>\r\n            <form onSubmit={ formik.handleSubmit }>\r\n                <Grid container className={ styles.messagesRoot } alignItems={ \"center\" }>\r\n                    <Grid ref={ chatRef } className={ styles.messages }>\r\n                        { messagesLength && chat.messages.map ( (mes: IMessage) => {\r\n                            const isMe = me.me.email === mes.name;\r\n                            return <Message key={ mes.id } isMe={ isMe } message={ mes }/>;\r\n                        } ) }\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid className={ styles.newMessageRoot } container direction={ 'row' } alignItems={ 'flex-end' }>\r\n                    <TextField id={ 'message' } name={ 'message' } label={ 'message' } variant=\"filled\"\r\n                               autoComplete={ 'off' } onChange={ e => chat.setMessageValue ( e.currentTarget.value ) }\r\n                               value={ chat.messageValue } className={ styles.textField }\r\n                    />\r\n                    <Emoji frameWidth={ chatRef.current?.clientWidth }/>\r\n                    <Button type={ 'submit' } variant={ 'outlined' }\r\n                            classes={ {outlined: styles.sendButton} }><strong>send</strong></Button>\r\n\r\n                </Grid>\r\n            </form>\r\n        </Container>\r\n    );\r\n}) );","import {makeStyles} from \"@mui/styles\";\r\n\r\n\r\nexport const useStyles = makeStyles ( {\r\n    root: {\r\n        marginTop: '5%',\r\n        position: 'relative',\r\n\r\n    },\r\n    alert: {\r\n        position: \"absolute\",\r\n        width: 300,\r\n        right:'25%',\r\n        opacity:0.7,\r\n        zIndex: 1,\r\n        top:'5%',\r\n\r\n    },\r\n\r\n} );","import {Alert, Box, Button, Grid, Grow, TextField} from '@mui/material';\r\nimport * as React from 'react';\r\nimport {useContext, useState} from 'react';\r\nimport {useFormik} from \"formik\";\r\nimport {MyContext} from \"../../state/context\";\r\nimport {useStyles} from \"./styles\";\r\nimport classNames from \"classnames\";\r\n\r\n\r\nexport const BasicJoinForm: React.FC<IProps> = (props) => {\r\n    const {onSubmit, children, submitButtonText, isRegistration = false,showAlert = false,onCloseAlert} = props;\r\n    const [chat, me, socket] = useContext ( MyContext );\r\n    const styles = useStyles ();\r\n    console.log (showAlert);\r\n    const formik = useFormik ( {\r\n        initialValues: {\r\n            name: '',\r\n            password: '',\r\n        },\r\n        onSubmit: (values) => {\r\n            try {\r\n                onSubmit && onSubmit ( values.name, values.password );\r\n            } catch (e) {\r\n                console.log ( e );\r\n            }\r\n\r\n        },\r\n    } );\r\n\r\n    const onChatDisabler = (formik.values?.name === '')\r\n        || formik.values.name.trim ().length < 3\r\n        || (formik.values?.password === '')\r\n        || formik.values.password.trim ().length < 3;\r\n\r\n    return (\r\n        <form className={ styles.root }  onSubmit={ formik.handleSubmit }>\r\n            <Box className={styles.alert} >\r\n                <Grow in={showAlert}>{<Alert onClose={onCloseAlert} severity=\"info\">{ isRegistration\r\n                    ? 'Введите имя которое будет использовано для регистрации и отправки сообщений в чате'\r\n                    : 'Введите имя указанное в процессе регистрации' }</Alert>}</Grow>\r\n                {/* Conditionally applies the timeout prop to change the entry speed. */}\r\n                <Grow\r\n                    in={showAlert}\r\n                    style={{ transformOrigin: '0 0 0' }}\r\n                    {...(showAlert ? { timeout: 1000 } : {})}\r\n                >\r\n                    { <Alert severity=\"info\">{ isRegistration\r\n                        ? 'Введите пароль который будет использован для регистрации'\r\n                        : 'Введите пароль указанный в процессе регистрации' }</Alert>}\r\n                </Grow>\r\n            </Box>\r\n            <Grid  container justifyContent={ \"center\" } alignItems={ \"center\" }\r\n                  direction={ 'column' } gap={ 1 }>\r\n                { children }\r\n                    <TextField autoFocus variant=\"filled\"\r\n                               onChange={ formik.handleChange }\r\n                               value={ formik.values.name }\r\n                               id=\"name\" name=\"name\" label=\"name\"\r\n                />\r\n\r\n                    <TextField inputProps={{\r\n                        autoComplete: 'new-password',\r\n                        form: {\r\n                            autoComplete: 'off',\r\n                        },\r\n                    }} variant=\"filled\"\r\n                               onChange={ formik.handleChange }\r\n                               value={ formik.values.password } type=\"password\"\r\n                               id=\"password\" name=\"password\" label=\"password\"\r\n                />\r\n\r\n                <Button type=\"submit\" disabled={ onChatDisabler } color={ 'info' }\r\n                        variant={ 'contained' }>{ submitButtonText }</Button>\r\n            </Grid>\r\n        </form>\r\n    );\r\n};\r\n\r\ninterface IProps {\r\n    onSubmit?: (name: string, password: string) => void;\r\n    onCloseAlert?: () => void;\r\n    submitButtonText: string;\r\n    isRegistration?: boolean;\r\n    showAlert?: boolean;\r\n};\r\n","import { makeStyles } from '@mui/styles';\r\n\r\nexport const useStyles = makeStyles({\r\n    children:{\r\n       display:\"grid\",\r\n        gridTemplateColumns:'1fr 24px',\r\n        columnGap:6,\r\n        cursor:\"pointer\"\r\n    },\r\n\r\n});","import axios from \"axios\";\r\nimport {IUser} from \"../service/AuthService\";\r\n\r\n\r\n// const baseURL = 'http://localhost:5000/auth';\r\nconst baseURL = 'wss://ws-simple-chat-api.herokuapp.com';\r\n\r\nconst instance = axios.create({baseURL});\r\n\r\ninstance.interceptors.request.use((config)=>{\r\n    if ( config && config.headers) {\r\n        config.headers.Authorization = `Bearer ${ localStorage.getItem ( 'token' ) }`;\r\n        return config\r\n    }\r\n});\r\n\r\ninstance.interceptors.response.use((config)=>{\r\n    return config;\r\n},async (error) => {\r\n    const originalRequest = error.config;\r\n    if (error.response.status === 401 && error.config && !error.config._isRetry) {\r\n        originalRequest._isRetry = true;\r\n        try {\r\n            const response = await axios.post<AuthResponse>(`${baseURL}/refresh`, {withCredentials: true})\r\n            localStorage.setItem('token', response.data.accessToken);\r\n            return instance.request(originalRequest);\r\n        } catch (e) {\r\n            console.log('НЕ АВТОРИЗОВАН')\r\n        }\r\n    }\r\n    throw error;\r\n});\r\n\r\n\r\nexport default instance;\r\n\r\nexport interface AuthResponse {\r\n    accessToken: string;\r\n    refreshToken: string;\r\n    user: IUser;\r\n}","import {Chat} from \"../components/Chat/Chat\";\r\nimport {Login} from \"../components/Login/Login\";\r\nimport {Registration} from \"../components/Registration/Registration\";\r\nimport {JoinOptions} from \"../components/JoinOptions/JoinOptions\";\r\n\r\nexport enum ROUTES {\r\n    LOGIN_ROUTE = '/login',\r\n    CHAT_ROUTE = '/chat',\r\n    REGISTRATION_ROUTE = '/registration',\r\n    JOIN_ROUTE = '/join',\r\n}\r\n\r\nexport const publicRoutes = [\r\n\r\n    {\r\n        path: ROUTES.JOIN_ROUTE,\r\n        Component: JoinOptions,\r\n    },\r\n    {\r\n        path: ROUTES.LOGIN_ROUTE,\r\n        Component: Login,\r\n    },\r\n    {\r\n        path: ROUTES.REGISTRATION_ROUTE,\r\n        Component: Registration,\r\n    },\r\n];\r\n\r\nexport const privateRoutes = [\r\n    {\r\n        path: ROUTES.CHAT_ROUTE,\r\n        Component: Chat,\r\n    },\r\n];\r\n\r\n","import {AxiosResponse} from \"axios\";\r\nimport instance from \"../http/instance\";\r\n\r\n\r\nexport default class AuthService {\r\n    static async login(email: string, password: string): Promise<AxiosResponse<IAuthResponse>> {\r\n        return instance.post ( '/login', {email, password} );\r\n    }\r\n\r\n    static async registration(email: string, password: string): Promise<AxiosResponse<IAuthResponse>> {\r\n        return instance.post ( '/registration', {email, password} );\r\n    }\r\n\r\n    static async logout(): Promise<void> {\r\n        return instance.delete ( '/logout' );\r\n    }\r\n    static async refresh(): Promise<AxiosResponse<IAuthResponse>> {\r\n        return instance.post ( '/refresh' );\r\n    }\r\n}\r\n\r\nexport interface IAuthResponse {\r\n    accessToken: string;\r\n    refreshToken: string;\r\n    user: IUser;\r\n}\r\n\r\nexport interface IUser {\r\n    email: string;\r\n    id: string;\r\n    isActivated: boolean;\r\n\r\n}","import {makeStyles} from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles({\r\n   root: {\r\n      marginTop:'10%',\r\n    },\r\n    button:{\r\n       backgroundColor: '#354765',\r\n    }\r\n\r\n})","import {Button, Grid} from \"@mui/material\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {ROUTES} from \"../../utils/routes\";\r\nimport * as React from \"react\";\r\nimport {useStyles} from \"./styles\";\r\n\r\nexport const JoinOptions:React.FC = () => {\r\n    const styles = useStyles ();\r\n    return (\r\n        <Grid className={styles.root} container justifyContent={\"center\"} direction={\"column\"} alignItems={\"center\"} gap={10}>\r\n            <Grid item><NavLink to={ ROUTES.REGISTRATION_ROUTE }>< Button\r\n                variant={ 'contained' }>Регистрация</Button></NavLink></Grid>\r\n            <Grid item><NavLink to={ ROUTES.LOGIN_ROUTE }>< Button\r\n                variant={ 'contained' }>Вход</Button></NavLink></Grid>\r\n        </Grid>\r\n    )\r\n}","import * as React from 'react';\r\nimport {useContext} from 'react';\r\nimport {MyContext} from \"../../state/context\";\r\nimport {BasicJoinForm} from \"../BasicJoinForm/BasicJoinForm\";\r\n\r\n\r\nexport const Login: React.FC<IProps> = (props) => {\r\n    const {connect} = props;\r\n    const [chat, me, socket] = useContext ( MyContext );\r\n\r\n    const onSubmit = (email:string,password:string)=>{\r\n       me.login(email,password)\r\n        connect ();\r\n    }\r\n\r\n    return (\r\n        <BasicJoinForm onSubmit={onSubmit} submitButtonText={\"Войти\"}>\r\n            <strong> Вход </strong>\r\n        </BasicJoinForm>\r\n    );\r\n};\r\n\r\ninterface IProps {\r\n    connect: () => void;\r\n};\r\n","import * as React from 'react';\r\nimport {BasicJoinForm} from \"../BasicJoinForm/BasicJoinForm\";\r\nimport axios from \"axios\";\r\nimport HelpIcon from \"@mui/icons-material/Help\";\r\nimport {useStyles} from \"./styles\";\r\nimport {useCallback, useState} from \"react\";\r\nimport AuthService from \"../../service/AuthService\";\r\n\r\n\r\nexport const Registration: React.FC<Props> = () => {\r\n    const styles = useStyles ();\r\n    const [showAlert,setShowAlert] = useState(false);\r\n    let timeOutId: NodeJS.Timeout;\r\n    const onSubmit = (username:string,password:string)=>{\r\n    AuthService.registration(username,password).then(result=>console.log(result))\r\n}\r\n\r\n    const onShowAlert = useCallback(() => {\r\n        setShowAlert(true);\r\n        timeOutId = setTimeout(()=>{\r\n            setShowAlert(false)\r\n        },5000)\r\n    },[])\r\n    const onCloseAlert = useCallback(() => {\r\n        setShowAlert(false);\r\n        clearTimeout(timeOutId)\r\n    },[])\r\n\r\n    return (\r\n        <BasicJoinForm onCloseAlert={onCloseAlert} showAlert={showAlert} isRegistration onSubmit={onSubmit} submitButtonText={\"Зарегистрироваться\"}>\r\n            <div  className={styles.children} onClick={showAlert ? onCloseAlert : onShowAlert}><strong> Регистрация </strong> <HelpIcon /></div>\r\n        </BasicJoinForm>\r\n    );\r\n};\r\ntype Props = {};\r\n","import * as React from 'react';\r\nimport {useContext, useEffect, useState} from 'react';\r\nimport {AppBar, Button, Grid, Toolbar} from '@mui/material';\r\nimport {useStyles} from \"./styles\";\r\nimport {MyContext} from \"../../state/context\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {Clock} from \"../Clock/Clock\";\r\nimport {NavLink, useHistory, useLocation} from 'react-router-dom';\r\nimport {ROUTES} from \"../../utils/routes\";\r\n\r\n\r\ntype Props = {};\r\nexport const NavBar: React.FC<Props> = observer ( (props) => {\r\n    const [chat, me, socket] = useContext ( MyContext );\r\n    const {connectionCounter} = chat;\r\n    const styles = useStyles ();\r\n    const isAuthorized = false;\r\n    const isLoginPage = useLocation().pathname.includes(ROUTES.LOGIN_ROUTE)\r\n\r\n    return (\r\n        <AppBar color={ \"transparent\" } variant={ \"outlined\" } elevation={ 0 } position=\"static\">\r\n            <Toolbar className={ styles.root }>\r\n                <div/>\r\n                <div className={ styles.title }>\r\n                    <strong>{ 'Чат имени Альфредо Гарсии'.toUpperCase () }</strong>\r\n                    { isAuthorized ? <span\r\n                            className={ styles.onlineCounter }> сейчас онлайн: { connectionCounter || 0 } человек </span>\r\n                        : isLoginPage ? <Grid item><NavLink to={ ROUTES.REGISTRATION_ROUTE }>< Button\r\n                                variant={ 'text' }>к регистрации</Button></NavLink></Grid>\r\n                            : <Grid item><NavLink to={ ROUTES.LOGIN_ROUTE }>< Button\r\n                                variant={ 'text' }>к логину</Button></NavLink></Grid>\r\n                    }\r\n                </div>\r\n                <Clock/>\r\n                <Grid container>\r\n                    { isAuthorized && <Button onClick={ () => {\r\n                    } } variant={ 'outlined' }>Logout</Button> }\r\n                </Grid>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n} );","import {makeAutoObservable} from \"mobx\";\r\nimport AuthService, {IUser} from \"../service/AuthService\";\r\n\r\n\r\ninterface IMEStore {\r\n    me: IUser;\r\n}\r\n\r\nclass MeStore implements IMEStore {\r\n    me = {} as IUser;\r\n\r\n\r\n    constructor() {\r\n        makeAutoObservable ( this, {}, {deep: true} );\r\n    }\r\n\r\n    setMe(item: IUser) {\r\n        this.me = item;\r\n    };\r\n\r\n    async login(email: string, password: string) {\r\n        try {\r\n            const response = await AuthService.login ( email, password );\r\n            localStorage.setItem ( 'token', response.data.accessToken );\r\n            this.setMe ( response.data.user );\r\n        } catch (e: any) {\r\n            console.warn ( e.response?.data?.message );\r\n        }\r\n    };\r\n\r\n    async refresh() {\r\n        try {\r\n            const response = await AuthService.refresh ();\r\n            localStorage.setItem ( 'token', response.data.accessToken );\r\n            this.setMe ( response.data.user );\r\n        } catch (e: any) {\r\n            console.warn ( e.response?.data?.message );\r\n        }\r\n    };\r\n\r\n}\r\n\r\nexport default MeStore;","import {Redirect, Route, Switch} from 'react-router-dom';\r\nimport * as React from \"react\";\r\nimport {privateRoutes, publicRoutes, ROUTES} from \"../../utils/routes\";\r\n\r\n\r\n\r\nconst AppRoute:React.FC = () => {\r\n\r\n    const isAuthorized = false\r\n\r\n    return isAuthorized ?\r\n        <Switch>\r\n            { privateRoutes.map ( ({path, Component}) => {\r\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\r\n            } ) }\r\n            <Redirect to={ROUTES. CHAT_ROUTE }/>\r\n        </Switch>\r\n        :\r\n        <Switch>\r\n            { publicRoutes.map ( ({path, Component}) => {\r\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\r\n            } ) }\r\n            <Redirect to={ ROUTES.JOIN_ROUTE }/>\r\n        </Switch>\r\n}\r\n\r\n\r\nexport default AppRoute;\r\n","import * as React from 'react';\r\nimport {useEffect, useState} from 'react';\r\nimport {NavBar} from \"../NavBar/NavBar\";\r\nimport './App.css';\r\nimport {Loader} from \"../Loader/Loader\";\r\nimport {HashRouter} from 'react-router-dom';\r\nimport ChatStore, {MESSAGE_ENUM} from \"../../state/chatStore\";\r\nimport {observer} from \"mobx-react-lite\";\r\nimport {MyContext} from '../../state/context';\r\nimport MeStore from \"../../state/meStore\";\r\nimport {Chat} from \"../Chat/Chat\";\r\nimport AppRoute from \"../AppRoute/AppRoute\";\r\n\r\n\r\nconst App: React.FC = observer ( (props) => {\r\n    const [chat] = useState ( () => new ChatStore () );\r\n    const [me] = useState ( () => new MeStore () );\r\n    const [socket, setSocket] = useState<WebSocket | null> ( null );\r\n    const value = React.useMemo ( () => [chat, me, socket], [chat, me, socket] );\r\n\r\n\r\n    const connect = async () => {\r\n        chat.setLoading ( true );\r\n        setSocket ( await new WebSocket ( 'wss://ws-simple-chat-api.herokuapp.com' ) );\r\n        // setSocket ( await new WebSocket ( 'ws://localhost:5000' ) );\r\n    };\r\n\r\n    const isAuthorized = me.me.email;\r\n\r\n    useEffect ( () => {\r\n        if (localStorage.getItem ( 'token' )) {\r\n            me.refresh ();\r\n        }\r\n    }, [] );\r\n\r\n  useEffect ( () => {\r\n        if (!socket) {\r\n            connect()\r\n        }\r\n    }, [isAuthorized] );\r\n\r\n    if (socket) {\r\n        socket.onmessage = (messageEvent: MessageEvent) => {\r\n            chat.setMessages ( JSON.parse ( messageEvent.data ) );\r\n        };\r\n        socket.onopen = () => {\r\n            chat.setConnected ( true );\r\n            const message = {\r\n                event: MESSAGE_ENUM.CONNECTION,\r\n                id: me.me.id,\r\n                name: me.me.email,\r\n                body: '',\r\n            };\r\n            socket?.send ( JSON.stringify ( message ) );\r\n            chat.setLoading ( false );\r\n        };\r\n        socket.onmessage = (event: MessageEvent) => {\r\n            const messages = JSON.parse ( event.data );\r\n            chat.setMessages ( messages );\r\n        };\r\n        socket.onclose = () => {\r\n            chat.setConnected ( false );\r\n            const message = {\r\n                event: MESSAGE_ENUM.CONNECTION,\r\n                id: me.me.id,\r\n                name: me.me.email,\r\n                body: '',\r\n            };\r\n            socket.send ( JSON.stringify ( message ) );\r\n        };\r\n        socket.onerror = () => {\r\n            chat.setConnected ( false );\r\n            setTimeout ( () => connect (), 1000 );\r\n        };\r\n    }\r\n    if (chat.isLoading) return <Loader/>;\r\n\r\n\r\n    return (\r\n        <HashRouter>\r\n            <MyContext.Provider value={ value }>\r\n                <NavBar/>\r\n                { isAuthorized ?\r\n                    <Chat/>\r\n                    : <AppRoute/>\r\n                }\r\n            </MyContext.Provider>\r\n        </HashRouter>\r\n    );\r\n} );\r\n\r\nexport default App;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./components/App/App\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}