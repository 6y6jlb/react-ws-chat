{"version":3,"sources":["state/context.ts","reportWebVitals.ts","utils/styles.ts","components/NavBar/styles.ts","state/chatStore.ts","components/Clock/styles.ts","utils/time.ts","components/Clock/Clock.tsx","components/Loader/Loader.tsx","components/Chat/styles.ts","utils/const.ts","components/Message/styles.ts","components/App/const.ts","components/Message/Message.tsx","components/Emoji/styles.ts","components/Emoji/Emoji.tsx","components/Chat/Chat.tsx","components/BasicJoinForm/styles.ts","components/BasicJoinForm/const.ts","components/BasicJoinForm/BasicJoinForm.tsx","utils/routes.ts","components/BasicJoinForm/validator.tsx","utils/hooks/useDebounce.tsx","components/Login/styles.ts","components/Registration/styles.ts","components/JoinOptions/styles.ts","components/JoinOptions/JoinOptions.tsx","components/Login/Login.tsx","components/Registration/Registration.tsx","components/Weather/styles.ts","components/Weather/Weather.tsx","components/NavBar/NavBar.tsx","http/chatApiInstance.ts","service/AuthService.ts","state/meStore.ts","components/AppRoute/AppRoute.tsx","http/funFactApiInstance.ts","service/DayFactService.ts","service/WeatherService.ts","state/utilityStore.ts","components/App/App.tsx","index.tsx"],"names":["MyContext","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","title","fontFamily","fontSize","useStyles","makeStyles","display","gridAutoRows","justifyItems","minHeight","alignItems","textTransform","onlineCounter","color","React","defaultValue","MESSAGE_ENUM","timeRoot","whiteSpace","getTime","date","getTwoDig","time","string","toString","length","hour","getHours","min","getMinutes","sec","getSeconds","timeConverter","UNIX_timestamp","a","Date","year","getFullYear","month","getMonth","getDate","Clock","props","children","clocRef","useState","setTime","styles","useEffect","clearId","setTimeout","clearTimeout","ref","className","Loader","Container","Grid","container","justifyContent","style","height","window","innerHeight","CircularProgress","messagesRoot","maxHeight","messages","width","backgroundColor","overflowY","newMessageRoot","position","rowGap","textField","btn","border","weatherData","mainBlock","minWidth","margin","borderRadius","maxWidth","padding","info","name","copy","cursor","opacity","top","LANG","COUNTRY","COUNTRY_CODE","ChatStore","messageValue","isLoading","isConnected","connectionCounter","makeAutoObservable","this","deep","value","count","Message","observer","isMe","message","useContext","chat","event","CONNECTION","setConnectionCounter","marginLeft","marginRight","paddingRight","direction","MESSAGE","justifySelf","borderBottom","toUpperCase","body","onClick","navigator","clipboard","writeText","right","left","emojiRoot","zIndex","picker","Emoji","frameWidth","isShowEmoji","setIsShowEmoji","classNames","onBlur","native","groupNames","smileys_people","disableAutoFocus","onEmojiClick","emojiObject","setMessageValue","emoji","skinTone","SKIN_TONE_MEDIUM_DARK","Button","Chat","me","socket","chatRef","useRef","formik","useFormik","initialValues","onSubmit","values","trim","id","now","email","send","JSON","stringify","sendMessage","messagesLength","current","scrollTo","scrollHeight","scrollToBottom","handleSubmit","map","mes","TextField","label","variant","autoComplete","onChange","e","currentTarget","clientWidth","type","root","marginTop","selectWrapper","alignContent","alert","fieldWrapper","validatorMessage","LANG_OBJ","Object","create","COUNTRY_OBJ","COUNTRY_CODE_OBJ","LANG_FORM_PROP","RU","EN","COUNTRY_FORM_PROP","BY","UA","LANGUAGE","ROUTES","BasicJoinForm","withOptions","submitButtonText","showAlert","onCloseAlert","data","city","setCity","filteredData","setFilteredData","password","country","language","validate","errors","console","log","debouncedValue","delay","setDebouncedValue","handler","useDebounce","getCityList","filter","item","toLowerCase","includes","splice","Box","Grow","in","Alert","onClose","severity","transformOrigin","timeout","gap","FormControl","fullWidth","classes","InputLabel","Select","labelId","handleChange","MenuItem","autoFocus","required","inputProps","form","onKeyPress","key","disabled","isValid","dirty","gridTemplateColumns","columnGap","publicRoutes","path","JOIN_ROUTE","Component","to","REGISTRATION_ROUTE","size","LOGIN_ROUTE","login","timeOutId","setShowAlert","registration","onShowAlert","useCallback","CHAT_ROUTE","PROFILE_ROUTE","description","iconWrapper","icon","Weather","utility","fetchWeather","location","Table","TableRow","TableCell","align","weather","src","Math","ceil","main","temp","feels_like","NavBar","clockRef","isAuthorized","isLoginPage","useLocation","pathname","isLJoinPage","emptyBoxWidth","offsetWidth","onLogout","logout","AppBar","elevation","baseURL","chatApiInstance","axios","interceptors","request","use","config","headers","Authorization","localStorage","getItem","response","error","originalRequest","status","_isRetry","post","withCredentials","setItem","accessToken","AuthService","instance","delete","MeStore","setMe","user","setAuthData","warn","refresh","AppRoute","component","exact","dayFactApiInstance","DayFactService","get","WeatherService","payload","chatInstance","UtilityStore","fact","fetchFact","setFact","contents","setWeather","App","utilityStore","setSocket","connect","setLoading","WebSocket","onmessage","messageEvent","setMessages","parse","onopen","setConnected","onclose","onerror","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gnk/oBAGWA,E,iCCWIC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,6ECTDQ,EAAQ,CACbC,WAAW,YACXC,SAAS,QCCJC,EAAYC,YAAW,CAChCJ,MAAO,CACHK,QAAQ,OAERC,aAAa,OACbC,aAAa,SACbC,UAAU,GACVC,WAAW,SACX,oBAAoB,2BACbT,GADP,IAEIU,cAAc,eAGtBC,cAAc,CACVC,MAAM,UHbdtB,EAAYuB,gBAFRC,W,IICQC,E,QCACZ,EAAYC,YAAW,CAChCY,SAAS,CACNd,SAAS,OACRD,WAAW,YACXW,MAAM,OACNK,WAAW,YCLNC,EAAU,SAACC,GACpB,IAAMC,EAAY,SAACC,GACf,IAAMC,EAASD,EAAKE,WACpB,OAAOD,EAAOE,OAAS,EAAIF,EAApB,WAAiCA,IAEtCG,EAAOL,EAAUD,EAAKO,YACtBC,EAAMP,EAAUD,EAAKS,cACrBC,EAAMT,EAAUD,EAAKW,cAC3B,MAAM,GAAN,OAAWL,EAAX,aAAqBE,EAArB,aAA+BE,IActBE,EAAgB,SAACC,GAE1B,IAAMC,EAAI,IAAIC,KAAKF,EAAiB,KAE9BG,EAAOF,EAAEG,cACTC,EAFS,CAAC,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,OAE7DJ,EAAEK,YAMvB,OALaL,EAAEM,UAIK,IAAMF,EAAQ,IAAMF,EAAO,IAHlCF,EAAEP,WAG6C,IAFhDO,EAAEL,aAE0D,IAD5DK,EAAEH,c,OCxBLU,EAA0B,SAACC,GACTA,EAApBC,SAAP,IAAgBC,EAAWF,EAAXE,QAChB,EAAwBC,mBAAW,IAAIV,MAAvC,mBAAOb,EAAP,KAAawB,EAAb,KACMC,EAAS3C,IAQf,OALA4C,qBAAY,WACR,IAAMC,EAAUC,YAAa,kBAAMJ,EAAU,IAAIX,QAAW,KAC5D,OAAO,kBAAMgB,aAAeF,MAC7B,CAAC3B,IAGA,qBAAK8B,IAAKR,EAASS,UAAWN,EAAO9B,SAArC,SACME,EAAQG,M,2CCfTgC,EAAS,SAACZ,GACnB,OACI,cAACa,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAMC,WAAS,EAAC/C,WAAY,SAAUgD,eAAgB,SAAUC,MAAO,CAACC,OAAQC,OAAOC,YAAY,IAAnG,SACQ,cAACC,EAAA,EAAD,CAAkBlD,MAAM,iBCV/BT,EAAYC,YAAW,CAChC2D,aAAc,CACVC,UAAWJ,OAAOC,YAAc,IAEpCI,SAAU,CACNC,MAAO,OACPP,OAAQ,OACRQ,gBAAiB,UACjBC,UAAW,QAEfC,eAAgB,CACZC,SAAU,WACVJ,MAAO,OACPK,OAAQ,GACR3D,MAAO,WAEX4D,UAAU,CACNN,MAAM,OAEVO,IAAI,CACA,wBAAyB,CACrBN,gBAAiB,UACjBO,OAAO,OACP9D,MAAO,UACPsD,MAAM,MACNP,OAAO,GACP,UAAU,CACNQ,gBAAiB,UACjBvD,MAAO,e,yBC3BV+D,E,OCCAxE,EAAYC,YAAW,aAChCwE,UAAU,CACNC,SAAU,OACVC,OAAQ,GACRC,aAAc,KACdC,SAAU,MACVd,MAAO,cACPe,QAAS,GACT5E,QAAS,OACToD,eAAe,YACfc,OAAQ,GACRtE,WAAY,QACZqE,SAAS,YAEbY,KAAM,CACFtE,MAAM,UACNkE,OAAO,aAEXK,KAAK,CACD9E,QAAQ,QACR2E,SAAS,eAEbI,KAAK,CACDC,OAAO,UACPf,SAAS,WACTgB,QAAQ,GACRC,IAAI,GAGRpE,KAAK,CACDjB,SAAS,UA9BkB,4BDFd,ICEc,OAgCI,CAC/B0E,UAAU,CACNC,SAAU,OACV3E,SAAU,Y,0CPpCVa,K,kBAAAA,E,YAAAA,E,yBAAAA,M,SQHAyE,EAKAC,EAMAC,ERsDGC,E,WA3BX,aAAe,yBANf1B,SAAW,GAMG,KALd2B,aAAe,GAKD,KAJdC,WAAY,EAIE,KAHdC,aAAc,EAGA,KAFdC,kBAAoB,EAGhBC,YAAqBC,KAAM,GAAI,CAACC,MAAM,I,gDAI1C,SAAaJ,GACTG,KAAKH,YAAcA,I,wBAGvB,SAAWD,GACPI,KAAKJ,UAAYA,I,6BAGrB,SAAgBM,GACZF,KAAKL,aAAeO,I,yBAGxB,SAAYlC,GACRgC,KAAKhC,SAAL,sBAAqBgC,KAAKhC,UAA1B,YAAsCA,M,kCAI1C,SAAqBmC,GACjBH,KAAKF,kBAAoBK,M,KS9CpBC,EAA2BC,aAAS,SAAC7D,GAAW,IAAD,EACjD8D,EAAiB9D,EAAjB8D,KAAMC,EAAW/D,EAAX+D,QACb,EAA0BC,qBAAanH,GAAvC,mBAAOoH,EAAP,KACM5D,GADN,UACe3C,KAEXqG,EAAQG,QAAU5F,EAAa6F,YAC/BF,EAAKG,qBAAqBL,EAAQT,mBAEtC,IAAMrC,EAAQ,CACVS,gBAAiBoC,EAAO,UAAY,UACpC3F,MAAQ2F,EAAO,UAAW,UAC1BO,WAAYP,EAAO,OAAS,MAC5BQ,YAAaR,EAAO,MAAQ,EAC5BS,aAAa,IAIjB,OACI,cAACzD,EAAA,EAAD,CAAM0D,UAAY,SAAWzD,WAAS,EAAtC,SACMgD,EAAQG,QAAU5F,EAAamG,QAC3B,sBAAK9D,UAAWN,EAAO8B,UAAWlB,MAAQA,EAA1C,UACE,oBAAIN,UAAWN,EAAOqC,KAClBzB,MACI,CAACyD,YAAY,GAAD,QAAKZ,GAAQ,YAAaa,aAAa,aAAD,OAAcb,EAAO,UAAW,YAF1F,mBAIMC,EAAQrB,YAJd,aAIM,EAAckC,gBAEpB,+BAAQb,EAAQc,OAChB,sBAAMlE,UAAWN,EAAO3B,KAAxB,SAAgCY,EAA6B,IAAfyE,EAAQrF,QACtD,qBAAKoG,QAzBN,kBAAOC,UAAUC,UAAUC,UAAUlB,EAAQc,OAyBtB5D,MAAO6C,EAAO,CAACoB,MAAM,GAAK,CAACC,KAAK,GACpD5H,MAAO,4HAAyBoD,UAAWN,EAAOsC,KADpD,SAEI,cAAC,IAAD,SAGNoB,EAAQG,QAAU5F,EAAa6F,WAC7B,uBAAMxD,UAAYN,EAAOoC,KAAzB,UAAkCsB,EAAQrB,KAA1C,6GACE,uBAAM/B,UAAYN,EAAOoC,KAAzB,UAAkCsB,EAAQrB,KAA1C,oF,qDCjDThF,GAAYC,YAAW,CAChCyH,UAAW,CACPvD,SAAU,WACVwD,OAAQ,EACRvC,IAAK,IAITwC,OAAO,CACHxC,KAAK,OCKAyC,GAA0B1B,aAAS,SAAC7D,GACXA,EAA3BC,SAAP,MAAkCD,EAAlBwF,kBAAhB,MAA6B,EAA7B,EACA,EAAyBxB,qBAAanH,GAAtC,mBAAOoH,EAAP,KACM5D,GADN,UACe3C,MACf,EAAsCyC,oBAAW,GAAjD,mBAAOsF,EAAP,KAAoBC,EAApB,KAMA,OACI,qBAAKzE,MAAO,CAACiE,MAAM,GAAD,OAAiB,GAAbM,EAAJ,OAA2B7E,UAAYgF,IAAatF,EAAO+E,UAAV,eAAuB/E,EAAOiF,OAASG,IACrGG,OANS,kBAAMF,GAAiB,IAKrC,SAEMD,EACI,cAAC,IAAD,CAAQI,QAAM,EAACC,WAAa,CAACC,eAAgB,UAAYC,kBAAmB,EACpEC,aARD,SAAC/B,EAAYgC,GAC9BjC,EAAKkC,gBAAkBD,EAAYE,QAOaC,SAAWC,0BACjD,cAACC,EAAA,EAAD,CAAQzB,QAXJ,kBAAMY,GAAiB,IAW3B,SAA8B,cAAC,IAAD,W,SCfnCc,GAAwB3C,aAAY,SAAC7D,GAAW,IAAD,EACxD,EAA0BgE,qBAAanH,GAAvC,mBAAOoH,EAAP,KAAYwC,EAAZ,KAAgBC,EAAhB,KACMC,EAAUC,iBAAyB,MACnCvG,EAAS3C,IAaTmJ,EAASC,aAAY,CACvBC,cAAe,CACXhD,QAAS,qGAEbiD,SAAU,SAACC,GAAD,OAhBM,WAChB,GAAKhD,EAAKd,aAAa+D,OAAvB,CACA,IAAMnD,EAAU,CACZG,MAAO,UACPiD,GAAI1H,KAAK2H,MAAOtI,WAChB4D,KAAM+D,EAAGA,GAAGY,MACZxC,KAAMZ,EAAKd,cAET,OAANuD,QAAM,IAANA,KAAQY,KAAOC,KAAKC,UAAYzD,IAChCE,EAAKkC,gBAAkB,KAODsB,MAIpBC,EADgBzD,EAAKzC,SACUzC,OAUrC,OAJAuB,qBAAY,YAJW,WAAO,IAAD,EACzB,UAAAqG,EAAQgB,eAAR,SAAiBC,SAAW,EAAGjB,EAAQgB,QAAQE,cAI/CC,MAGA7D,EAAKb,UAAkB,cAAC,EAAD,IAEvB,cAACvC,EAAA,EAAD,UACI,uBAAMmG,SAAWH,EAAOkB,aAAxB,UACI,cAACjH,EAAA,EAAD,CAAMC,WAAS,EAACJ,UAAYN,EAAOiB,aAAetD,WAAa,SAA/D,SACI,cAAC8C,EAAA,EAAD,CAAMJ,IAAMiG,EAAUhG,UAAYN,EAAOmB,SAAzC,SACMkG,GAAkBzD,EAAKzC,SAASwG,KAAM,SAACC,GACrC,IAAMnE,EAAO2C,EAAGA,GAAGY,QAAUY,EAAIvF,KACjC,OAAO,cAACkB,EAAD,CAAwBE,KAAOA,EAAOC,QAAUkE,GAAjCA,EAAId,WAItC,eAACrG,EAAA,EAAD,CAAMH,UAAYN,EAAOuB,eAAiBb,WAAS,EAACyD,UAAY,MAAQxG,WAAa,WAArF,UACI,cAACkK,EAAA,EAAD,CAAWf,GAAK,UAAYzE,KAAO,UAAYyF,MAAQ,UAAYC,QAAQ,SAChEC,aAAe,MAAQC,SAAW,SAAAC,GAAC,OAAItE,EAAKkC,gBAAkBoC,EAAEC,cAAc9E,QAC9EA,MAAQO,EAAKd,aAAexC,UAAYN,EAAO0B,YAE1D,cAACwD,GAAD,CAAOC,WAAU,UAAGmB,EAAQgB,eAAX,aAAG,EAAiBc,cACrC,cAAClC,EAAA,EAAD,CAAQmC,KAAO,SAAWN,QAAU,YAAczH,UAAWN,EAAO2B,IAApE,SAAyE,uD,sEClEhFtE,GAAYC,YAAa,CAClCgL,KAAM,CACFC,UAAW,KACX/G,SAAU,YAGdgH,cAAc,CACVtG,SAAS,IACTuG,aAAa,UAEjBC,MAAO,CACHlH,SAAU,WACVJ,MAAO,IACPyD,MAAM,MACNrC,QAAQ,GACRwC,OAAQ,EACRvC,IAAI,MAGRkG,aAAa,CACTnH,SAAS,YAEboH,iBAAiB,CACbpH,SAAU,WACViB,IAAI,EACJoC,MAAM,SACNzD,MAAM,Q,SL7BFsB,K,QAAAA,E,SAAAA,M,cAKAC,K,gDAAAA,E,0CAAAA,E,6DAAAA,M,cAMAC,K,mDAAAA,E,6CAAAA,E,gEAAAA,M,KAML,IAAMiG,GAAWC,OAAOC,OAAOrG,GACzBsG,GAAcF,OAAOC,OAAOpG,GAC5BsG,GAAmBH,OAAOC,OAAOnG,GMjBjCsG,GAA2B,CACpC,GAAKL,GAASM,GACd,GAAKN,GAASO,IAGLC,GAAiC,CAC1C,GAAKL,GAAYG,GACjB,GAAKH,GAAYM,GACjB,GAAKN,GAAYO,IAIRC,GAAW,CACrBL,GAAKD,GAAe,IACpBE,GAAKF,GAAe,KAEVvG,GAAU,CACpBwG,GAAKE,GAAkB,IACvBC,GAAKD,GAAkB,IACvBE,GAAKF,GAAkB,KCPnB,ICPKI,GDOCC,GAAkC,SAAC/J,GAC5C,IAAOgH,EAAsGhH,EAAtGgH,SAAoBzJ,GAAkFyC,EAA5FC,SAA4FD,EAAlFzC,OAA3B,EAA6GyC,EAA3EgK,mBAAlC,SAAuDC,EAAsDjK,EAAtDiK,iBAAvD,EAA6GjK,EAApCkK,iBAAzE,SAA4FC,EAAiBnK,EAAjBmK,aAC5F,EAA2BnG,qBAAWnH,GAAtC,mBACMuN,GADN,eACU,YAAOlI,IACjB,EAAwB/B,mBAAiB,IAAzC,mBAAOkK,EAAP,KAAaC,EAAb,KACA,EAAwCnK,mBAAqB,IAA7D,mBAAOoK,EAAP,KAAqBC,EAArB,KACMnK,EAAS3C,KACTmJ,EAASC,aAAU,CACrBC,cAAe,CACXrE,KAAM,GACN2E,MAAO,GACPoD,SAAU,GACVC,QAAS,GACTL,KAAM,EACNM,SAAUd,GAASL,IAEvBoB,SAAU,SAAC3D,GAAD,OE3BM,SAACA,EAAuB+C,GAC5C,IAAOtH,EAAkDuE,EAAlDvE,KAAM+H,EAA4CxD,EAA5CwD,SACPI,GADmD5D,EAAlCoD,KAAkCpD,EAA5ByD,QAA4BzD,EAAnB0D,SAAmB1D,EAATI,MAC5B,IAUpB,OATI2C,GAAetH,EAAK3D,QAAU,IAC9B8L,EAAOnI,KAAO,2BAKd+H,EAAS1L,QAAU,IACnB8L,EAAOJ,SAAW,2BAEfI,EFemBD,CAAS3D,EAAQ+C,IAEvChD,SAAU,SAACC,GACP,IAAOvE,EAAkDuE,EAAlDvE,KAAM+H,EAA4CxD,EAA5CwD,SAAUJ,EAAkCpD,EAAlCoD,KAAMK,EAA4BzD,EAA5ByD,QAASC,EAAmB1D,EAAnB0D,SAAUtD,EAASJ,EAATI,MAChD,IACIL,GAAYA,EAAS,CAACtE,OAAM+H,WAAUJ,OAAMK,QAASpB,GAAiBoB,GAAUC,WAAUtD,UAC5F,MAAOkB,GACLuC,QAAQC,IAAIxC,OASlByC,EG3CK,SAAqBtH,EAAWuH,GAE3C,MAA4C9K,mBAASuD,GAArD,mBAAOsH,EAAP,KAAuBE,EAAvB,KA6BA,OA3BA5K,qBACI,WAGI,IAAM6K,EAAU3K,YAAW,WACvB0K,EAAkBxH,KACnBuH,GAWH,OAAO,WACHxK,aAAa0K,MAMrB,CAACzH,IAGEsH,EHYgBI,CAAYf,EAAM,KAEnCgB,EAAc,WAChBb,EACI,YAAIJ,GAAMkB,QAAO,SAAAC,GACb,OAAOA,EAAKb,UAAYpB,GAAiBzC,EAAOI,OAAOyD,UAAYa,EAAK7I,KAAK8I,cAAcC,SAAST,EAAeQ,kBACpHE,OAAO,EAAG,IACjBpB,EAAQ,KAeZ,OAXAhK,qBAAU,WACF0K,GACAK,MAEL,IACH/K,qBAAU,WACF0K,GACAK,MAEL,CAACL,EAAgBnE,EAAOI,OAAOyD,UAG9B,uBAAM/J,UAAWN,EAAOsI,KAAM3B,SAAUH,EAAOkB,aAA/C,UACI,eAAC4D,GAAA,EAAD,CAAKhL,UAAWN,EAAO0I,MAAvB,UACI,cAAC6C,GAAA,EAAD,CAAMC,GAAI3B,EAAV,SACI,cAAC4B,GAAA,EAAD,CAAOC,QAAS5B,EAAc6B,SAAS,OAAvC,SAA+ChC,EACzC,wbACA,sPAIV,cAAC4B,GAAA,EAAD,yBACIC,GAAI3B,EACJjJ,MAAO,CAACgL,gBAAiB,UACpB/B,EAAY,CAACgC,QAAS,KAAQ,IAHvC,aAKK,cAACJ,GAAA,EAAD,CAAOE,SAAS,OAAhB,SAAwBhC,EACnB,qTACA,4QAGd,eAAClJ,EAAA,EAAD,CAAMC,WAAS,EAACC,eAAgB,SAAUhD,WAAY,SAChDwG,UAAW,SAAU2H,IAAK,EADhC,UAEK5O,EACAyM,GACG,eAACoC,GAAA,EAAD,CAAaC,WAAS,EAACC,QAAS,CAAC3D,KAAMtI,EAAOwI,eAA9C,UACI,cAAC0D,GAAA,EAAD,CAAYpF,GAAG,eAAf,sCACA,eAACqF,GAAA,EAAD,CACIC,QAAQ,eACRtF,GAAG,OACHgB,MAAM,OACNzF,KAAK,OACL4F,SAAUzB,EAAO6F,aACjBrO,aAAcwL,GAASL,GAN3B,UAQI,cAACmD,GAAA,EAAD,CAAUjJ,MAAOmG,GAASL,GAA1B,SAA+BzG,EAAKyG,KACpC,cAACmD,GAAA,EAAD,CAAUjJ,MAAOmG,GAASJ,GAA1B,SAA+B1G,EAAK0G,WAIhD,sBAAK9I,UAAWN,EAAO2I,aAAvB,UACI,cAACd,EAAA,EAAD,CAAW0E,WAAS,EAACxE,QAAQ,SAClBE,SAAUzB,EAAO6F,aACjBhJ,MAAOmD,EAAOI,OAAOI,MACrBwF,UAAQ,EACR1F,GAAG,QAAQzE,KAAK,QAAQyF,MAAM,UAEzC,cAACwD,GAAA,EAAD,CAAKhL,UAAWN,EAAO4I,iBAAvB,SACI,cAAC2C,GAAA,EAAD,CAAMC,KAAMhF,EAAOgE,OAAOxD,MAA1B,SACI,cAACyE,GAAA,EAAD,CAAOE,SAAS,QAAhB,SAAyBnF,EAAOgE,OAAOxD,eAKlD2C,GACG,sBAAKrJ,UAAWN,EAAO2I,aAAvB,UACI,cAACd,EAAA,EAAD,CAAWE,QAAQ,SACRE,SAAUzB,EAAO6F,aACjBhJ,MAAOmD,EAAOI,OAAOvE,KACrBmK,UAAQ,EACR1F,GAAG,OAAOzE,KAAK,OAAOyF,MAAM,SAEvC,cAACwD,GAAA,EAAD,CAAKhL,UAAWN,EAAO4I,iBAAvB,SACI,cAAC2C,GAAA,EAAD,CAAMC,KAAMhF,EAAOgE,OAAOnI,KAA1B,SACI,cAACoJ,GAAA,EAAD,CAAOE,SAAS,QAAhB,SAAyBnF,EAAOgE,OAAOnI,cAOvD,sBAAK/B,UAAWN,EAAO2I,aAAvB,UACI,cAACd,EAAA,EAAD,CAAW4E,WAAY,CACnBzE,aAAc,eACd0E,KAAM,CACF1E,aAAc,QAEnBD,QAAQ,SACAE,SAAUzB,EAAO6F,aACjBhJ,MAAOmD,EAAOI,OAAOwD,SAAU/B,KAAK,WACpCvB,GAAG,WAAWzE,KAAK,WAAWyF,MAAM,aAE/C,cAACwD,GAAA,EAAD,CAAKhL,UAAWN,EAAO4I,iBAAvB,SACI,cAAC2C,GAAA,EAAD,CAAMC,KAAMhF,EAAOgE,OAAOJ,SAA1B,SACI,cAACqB,GAAA,EAAD,CAAOE,SAAS,QAAhB,SAAyBnF,EAAOgE,OAAOJ,kBAKlDT,GACG,qCAEI,eAACoC,GAAA,EAAD,CAAaC,WAAS,EAACC,QAAS,CAAC3D,KAAMtI,EAAOwI,eAA9C,UACI,cAAC0D,GAAA,EAAD,CAAYpF,GAAG,uBAAf,kDACA,eAACqF,GAAA,EAAD,CACIC,QAAQ,uBACRtF,GAAG,UACHgB,MAAM,UACNzF,KAAK,UACL4F,SAAUzB,EAAO6F,aALrB,UAOI,cAACC,GAAA,EAAD,CAAUjJ,MAAOV,GAAQwG,GAAzB,SAA8BxG,GAAQwG,KACtC,cAACmD,GAAA,EAAD,CAAUjJ,MAAOV,GAAQ4G,GAAzB,SAA8B5G,GAAQ4G,KACtC,cAAC+C,GAAA,EAAD,CAAUjJ,MAAOV,GAAQ2G,GAAzB,SAA8B3G,GAAQ2G,WAI7C9C,EAAOI,OAAOyD,SACX,eAAC0B,GAAA,EAAD,CAAaC,WAAS,EAACC,QAAS,CAAC3D,KAAMtI,EAAOwI,eAA9C,UACI,cAAC0D,GAAA,EAAD,CAAYpF,GAAG,oBAAf,4CACA,eAACqF,GAAA,EAAD,CACIC,QAAQ,oBACRtF,GAAG,OACHgB,MAAM,OACNzF,KAAK,OACL4F,SAAUzB,EAAO6F,aACjBM,WAAY,SAAC9I,GAAD,OA7I5BR,EA6I8CQ,EAAM+I,SA5IhE3C,EAAQ,GAAD,OAAID,GAAJ,OAAW3G,IADP,IAACA,GAuIY,UAQI,cAACiJ,GAAA,EAAD,CAAUjJ,MAAM,GAAhB,SAAmB,wCAEf6G,EAAavC,KAAI,SAACqC,EAAMlD,GACpB,OAAO,cAAEwF,GAAA,EAAF,CAAyBjJ,MAAO2G,EAAK3H,KAArC,SAA4C2H,EAAK3H,MAAjC2H,EAAKlD,gBAQxD,cAACZ,EAAA,EAAD,CAAQmC,KAAK,SAASwE,UAAWrG,EAAOsG,UAAYtG,EAAOuG,MAAOjP,MAAO,OACjEiK,QAAS,YADjB,SAC+B6B,WIjMlCvM,GAAYC,YAAW,CAChCJ,MAAM,2BACCA,GADF,IAEDU,cAAc,gB,qBCHTP,GAAYC,YAAW,CAChCsC,SAAS,CACNrC,QAAQ,OACPyP,oBAAoB,WACpBC,UAAU,EACV1K,OAAO,WAEXrF,MAAM,2BACCA,GADF,IAEDU,cAAc,gBCXTP,GAAYC,YAAW,CAChCgL,KAAM,CACFC,UAAW,MAEf5G,IAAK,CACDd,OAAQ,IACRO,MAAO,Q,SLDHqI,K,qBAAAA,E,mBAAAA,E,mCAAAA,E,mBAAAA,E,0BAAAA,Q,KAQL,IAAMyD,GAAe,CAExB,CACIC,KAAM1D,GAAO2D,WACbC,UMb6B,WACjC,IAAMrN,EAAS3C,KACf,OACI,eAACoD,EAAA,EAAD,CAAMH,UAAWN,EAAOsI,KAAM5H,WAAS,EAACC,eAAgB,SAAUwD,UAAW,SAAUxG,WAAY,SAC7FmO,IAAK,GADX,UAGI,cAACrL,EAAA,EAAD,CAAMyK,MAAI,EAAV,SAAW,cAAC,IAAD,CAASoC,GAAI7D,GAAO8D,mBAApB,SAAwC,cAAErH,EAAA,EAAF,CAASsH,KAAM,QAC9DzF,QAAS,YAAakE,QAAS,CAAC3D,KAAMtI,EAAO2B,KADE,oFAGnD,cAAClB,EAAA,EAAD,CAAMyK,MAAI,EAAV,SAAW,cAAC,IAAD,CAASoC,GAAI7D,GAAOgE,YAApB,SAAiC,cAAEvH,EAAA,EAAF,CAASsH,KAAM,QACvDzF,QAAS,YAAakE,QAAS,CAAC3D,KAAMtI,EAAO2B,KADL,+CNMpD,CACIwL,KAAM1D,GAAOgE,YACbJ,UOhBuB,WAC3B,IAAMrN,EAAS3C,KACf,EAA2BsG,qBAAWnH,GAAtC,mBAAa4J,GAAb,gBAOA,OACI,cAAC,GAAD,CAAeO,SANF,SAACC,GACd,IAAOwD,EAAkBxD,EAAlBwD,SAASpD,EAASJ,EAATI,MAChBZ,EAAGsH,MAAM1G,EAAOoD,IAKDR,iBAAkB,iCAClB1M,MACX,qBAAKoD,UAAWN,EAAO9C,MAAvB,4CPKR,CACIiQ,KAAM1D,GAAO8D,mBACbF,UQnBqC,WACzC,IAGIM,EAHE3N,EAAS3C,KACf,EAAkCyC,oBAAS,GAA3C,mBAAO+J,EAAP,KAAkB+D,EAAlB,KACA,EAA2BjK,qBAAWnH,GAAtC,mBAAa4J,GAAb,WAEMO,GAFN,KAEc,uCAAG,WAAOC,GAAP,yBAAAzH,EAAA,6DACNkL,EAA6CzD,EAA7CyD,QAAQC,EAAqC1D,EAArC0D,SAASN,EAA4BpD,EAA5BoD,KAAKI,EAAuBxD,EAAvBwD,SAAS/H,EAAcuE,EAAdvE,KAAK2E,EAASJ,EAATI,MAD9B,SAEPZ,EAAGyH,aAAa,CAACxL,OAAK2E,QAAOoD,WAAUJ,OAAMK,UAASC,aAF/C,2CAAH,uDAKRwD,EAAcC,uBAAY,WAC5BH,GAAa,GACbD,EAAYxN,YAAW,WACnByN,GAAa,KACd,OACJ,IACG9D,EAAeiE,uBAAY,WAC7BH,GAAa,GACbxN,aAAauN,KACd,IAEH,OACI,cAAC,GAAD,CACI7D,aAAcA,EACdD,UAAWA,EACXlD,SAAUA,EACViD,iBAAkB,+GAClBD,aAAW,EACXzM,MACI,sBAAKoD,UAAWN,EAAOJ,SAAU6E,QAASoF,EAAYC,EAAegE,EAArE,UACI,qBAAKxN,UAAWN,EAAO9C,MAAvB,iFACA,cAAC,KAAD,Y,IRNNuM,GAAOuE,WAIPvE,GAAOwE,c,4BSlCR5Q,GAAYC,YAAW,CAChCgL,KAAM,CACFtG,OAAQ,SACRE,SAAU,QAEdgM,YAAa,CACT9Q,SAAU,QACVU,MAAO,OACP,eAAgB,CACZV,SAAU,UAGlB+Q,YAAa,CACT3M,SAAU,YAEd4M,KAAM,CACF5M,SAAU,WACVJ,MAAO,GACPP,OAAQ,GACR4B,KAAM,GACNoC,OAAO,MCZFwJ,GAA4B7K,aAAS,SAAC7D,GAC5BA,EAAZC,SADmD,IAAD,cAEzD,EAAmC+D,qBAAanH,GAAhD,mBAAa4J,GAAb,WAAwBkI,GAAxB,WACMtO,EAAS3C,KAMf,OALA4C,qBAAU,WACNqO,EAAQC,aAAa,CACjBjE,SAASlE,EAAGA,GAAGkE,SACfkE,SAASpI,EAAGA,GAAGoI,aACrB,IAEE,cAAC/N,EAAA,EAAD,CAAMC,WAAS,EAACyD,UAAW,SAAU8H,QAAS,CAAC3D,KAAKtI,EAAOsI,MAA3D,SACQ,eAACmG,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAWxM,QAAS,WAChByM,MAAO,OADX,SAGI,sCAAON,QAAP,IAAOA,GAAP,UAAOA,EAASO,eAAhB,aAAO,EAAkBxM,SAE7B,cAACsM,GAAA,EAAD,CAAW1C,QAAS,CAAC3D,KAAKtI,EAAOmO,aAAchM,QAAS,WACpDyM,MAAO,QADX,SAGI,qBAAKtO,UAAWN,EAAOoO,KAAMU,IAAG,OAAER,QAAF,IAAEA,GAAF,UAAEA,EAASO,eAAX,iBAAE,EAAkBA,eAApB,aAAE,EAA2BT,YAGrE,eAACM,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAWxM,QAAS,WAChByM,MAAO,OADX,SAGI,oJAEJ,cAACD,GAAA,EAAD,CAAWxM,QAAS,WAChByM,MAAO,QADX,SAGI,iCACIG,KAAKC,KAAL,OAAUV,QAAV,IAAUA,GAAV,UAAUA,EAASO,eAAnB,iBAAU,EAAkBI,YAA5B,aAAU,EAAwBC,aAI9C,eAACR,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAWxM,QAAS,WAChByM,MAAO,OADX,SAGI,iHAEJ,cAACD,GAAA,EAAD,CAAWxM,QAAS,WAChByM,MAAO,QADX,SAGI,iCACIG,KAAKC,KAAL,OAAUV,QAAV,IAAUA,GAAV,UAAUA,EAASO,eAAnB,iBAAU,EAAkBI,YAA5B,aAAU,EAAwBE,2BC9CrDC,GAA0B5L,aAAW,SAAC7D,GAAW,IAAD,EACzD,EAA2BgE,qBAAanH,GAAxC,mBAAOoH,EAAP,KAAawC,EAAb,KACOnD,GADP,KAC4BW,EAArBX,mBACDjD,EAAS3C,IACTgS,EAAW9I,iBAAyB,MACpC+I,IAAiBlJ,EAAGA,GAAGY,MACvBuI,EAAcC,cAAeC,SAASrE,SAAW3B,GAAOgE,aACxDiC,EAAcF,cAAeC,SAASrE,SAAW3B,GAAO2D,YACxDuC,GAAwB,OAARN,QAAQ,IAARA,GAAA,UAAAA,EAAU/H,eAAV,eAAmBsI,cAAe,EAClDC,EAAW9B,uBAAc,kBAAM3H,EAAG0J,WAAW,IACnD,OACI,cAACC,EAAA,EAAD,CAAQjS,MAAQ,cAAgBiK,QAAU,WAAaiI,UAAY,EAAIxO,SAAS,SAAhF,SACI,eAACf,EAAA,EAAD,CAAMC,WAAS,EAACwK,MAAI,EAACvN,WAAa,SAAWgD,eAAiB,eAA9D,UACI,qBAAKC,MAAQ,CAACmB,SAAU4N,GAAiB,QAAzC,SACKL,GAAgB,cAACjB,GAAD,MAErB,sBAAK/N,UAAYN,EAAO9C,MAAxB,UACI,8BAAO,4IACLoS,EACE,uBAAMhP,UAAYN,EAAOnC,cAAzB,wFACyBoF,GAAqB,EAD9C,kDAGGyM,IAAgBH,EACb,cAAC9O,EAAA,EAAD,CAAMyK,MAAI,EAAV,SAAW,cAAC,IAAD,CAASoC,GAAK7D,GAAO8D,mBAArB,SAA0C,cAAErH,EAAA,EAAF,CACnD6B,QAAU,OADyC,2FAErD,cAACtH,EAAA,EAAD,CAAMyK,MAAI,EAAV,SAAW,cAAC,IAAD,CAASoC,GAAK7D,GAAOgE,YAArB,SAAmC,cAAEvH,EAAA,EAAF,CAC5C6B,QAAU,OADkC,iEAM5D,cAAC,EAAD,CAAOlI,QAAUwP,IACfC,GAAgB,cAACpJ,EAAA,EAAD,CAAQzB,QAAUoL,EAAW9H,QAAU,WAAvC,4B,6BCxC5BkI,GAAU,4CAEVC,GAAkBC,KAAMpH,OAAO,CAACkH,aAEtCC,GAAgBE,aAAaC,QAAQC,KAAI,SAACC,GACtC,GAAKA,GAAUA,EAAOC,QAElB,OADAD,EAAOC,QAAQC,cAAf,iBAA0CC,aAAaC,QAAU,UAC1DJ,KAIfL,GAAgBE,aAAaQ,SAASN,KAAI,SAACC,GACvC,OAAOA,IADX,uCAEE,WAAOM,GAAP,iBAAA1R,EAAA,yDACQ2R,EAAkBD,EAAMN,OACA,MAA1BM,EAAMD,SAASG,SAAkBF,EAAMN,QAAWM,EAAMN,OAAOS,SAFrE,wBAGMF,EAAgBE,UAAW,EAHjC,kBAKiCb,KAAMc,KAAN,UAA4BhB,GAA5B,iBAAoD,CAACiB,iBAAiB,IALvG,cAKgBN,EALhB,OAMUF,aAAaS,QAAQ,QAASP,EAAS7G,KAAKqH,aANtD,kBAOiBlB,GAAgBG,QAAQS,IAPzC,kCASUrG,QAAQC,IAAI,mFATtB,cAYQmG,EAZR,0DAFF,uDAkBeX,UC5BMmB,G,iIACjB,WAAmBrK,EAAeoD,GAAlC,0FACWkH,GAASL,KAAO,aAAc,CAACjK,QAAOoD,cADjD,2C,0HAIA,WAA0BxD,GAA1B,wFACWwD,EAA6CxD,EAA7CwD,SAAS/H,EAAoCuE,EAApCvE,KAAKgI,EAA+BzD,EAA/ByD,QAAQC,EAAuB1D,EAAvB0D,SAASN,EAAcpD,EAAdoD,KAAKhD,EAASJ,EAATI,MAD/C,kBAEWsK,GAASL,KAAO,oBAAqB,CAACjK,QAAMoD,WAAS/H,OAAKgI,UAAQC,WAASN,UAFtF,2C,kHAKA,uGACWsH,GAASC,OAAS,gBAD7B,2C,kHAGA,uGACWD,GAASL,KAAO,iBAD3B,2C,6DCTEO,G,WAIF,aAAe,yBAHfpL,GAAK,GAIDlD,YAAqBC,KAAM,GAAI,CAACC,MAAM,I,yCAG1C,SAAM8H,GAEE/H,KAAKiD,GADL8E,GAGU,K,yBAIlB,SAAYnB,GACR2G,aAAaS,QAAU,QAASpH,EAAKA,KAAKqH,aAC1CjO,KAAKsO,MAAQ1H,EAAKA,KAAK2H,Q,0DAG3B,WAAY1K,EAAeoD,GAA3B,mBAAAjL,EAAA,+EAE+BkS,GAAY3D,MAAQ1G,EAAOoD,GAF1D,OAEcwG,EAFd,OAGQzN,KAAKwO,YAAcf,GAH3B,gDAKQnG,QAAQmH,KAAR,UAAe,KAAEhB,gBAAjB,iBAAe,EAAY7G,YAA3B,aAAe,EAAkBrG,SALzC,yD,0HASA,WAAmBkD,GAAnB,+BAAAzH,EAAA,6DACWiL,EAA6CxD,EAA7CwD,SAAS/H,EAAoCuE,EAApCvE,KAAKgI,EAA+BzD,EAA/ByD,QAAQC,EAAuB1D,EAAvB0D,SAASN,EAAcpD,EAAdoD,KAAKhD,EAASJ,EAATI,MAD/C,kBAG+BqK,GAAYxD,aAAc,CAACzD,WAASpD,QAAO3E,OAAMgI,UAASC,WAAUN,SAHnG,OAGc4G,EAHd,OAIQzN,KAAKwO,YAAcf,GAJ3B,gDAMQnG,QAAQmH,KAAR,UAAe,KAAEhB,gBAAjB,iBAAe,EAAY7G,YAA3B,aAAe,EAAkBrG,SANzC,yD,mHAUA,gCAAAvE,EAAA,+EAE+BkS,GAAYQ,UAF3C,OAEcjB,EAFd,OAGQF,aAAaS,QAAU,QAASP,EAAS7G,KAAKqH,aAC9CjO,KAAKsO,MAAQb,EAAS7G,KAAK2H,MAJnC,gDAMQjH,QAAQmH,KAAR,UAAe,KAAEhB,gBAAjB,iBAAe,EAAY7G,YAA3B,aAAe,EAAkBrG,SANzC,yD,iHASA,8BAAAvE,EAAA,+EAE+BkS,GAAYvB,SAF3C,cAGQ3M,KAAKsO,MAAQ,MAHrB,gDAKQhH,QAAQmH,KAAR,UAAe,KAAEhB,gBAAjB,iBAAe,EAAY7G,YAA3B,aAAe,EAAkBrG,SALzC,yD,6DAWW8N,MC3CAM,GArBW,WAItB,OAQI,eAAC,IAAD,WACM5E,GAAavF,KAAM,YAAwB,IAAtBwF,EAAqB,EAArBA,KAAME,EAAe,EAAfA,UACzB,OAAO,cAAC,IAAD,CAAoBF,KAAOA,EAAO4E,UAAY1E,EAAY2E,OAAQ,GAArD7E,MAExB,cAAC,IAAD,CAAUG,GAAK7D,GAAO2D,iBCjBnB6E,GADY9B,KAAMpH,OAAO,CAACkH,QADzB,uCCCKiC,G,qIACjB,uGACWZ,GAASa,IAAK,WADzB,2C,6DCCiBC,G,wIACjB,WAA0BC,GAA1B,0FACWC,GAAarB,KAAb,gCACAoB,KAFX,2C,8DCKEE,G,WAKF,aAAe,yBAJfC,KAAO,GAIO,KAHd3D,QAAU,GAIN3L,YAAqBC,KAAM,GAAI,CAACC,MAAM,I,2CAG1C,SAAQ8H,GAEA/H,KAAKqP,KADLtH,GAGY,K,wBAGpB,SAAWA,GAEH/H,KAAK0L,QADL3D,GAGe,K,8DAIvB,gCAAA/L,EAAA,+EAE+B+S,GAAeO,YAF9C,OAEc7B,EAFd,OAGQzN,KAAKuP,QAAU9B,EAAS7G,KAAK4I,SAASH,MAH9C,gDAKQ/H,QAAQmH,KAAR,UAAe,KAAEhB,gBAAjB,iBAAe,EAAY7G,YAA3B,aAAe,EAAkBrG,SALzC,yD,uHAQH,WAAmB2O,GAAnB,mBAAAlT,EAAA,+EAEkCiT,GAAe7D,aAAa8D,GAF9D,OAEiBzB,EAFjB,OAGWzN,KAAKyP,WAAWhC,EAAS7G,MAHpC,gDAKWU,QAAQmH,KAAR,UAAe,KAAEhB,gBAAjB,iBAAe,EAAY7G,YAA3B,aAAe,EAAkBrG,SAL5C,yD,8DAYc6O,MCzCTM,GAAgBrP,aAAW,SAAC7D,GAC9B,MAAeG,oBAAW,kBAAM,IAAI+C,KAA7Be,EAAP,oBACA,EAAa9D,oBAAW,kBAAM,IAAI0R,MAA3BpL,EAAP,oBACA,EAAkBtG,oBAAW,kBAAM,IAAIgT,MAAhCxE,EAAP,oBACA,EAA4BxO,mBAA6B,MAAzD,mBAAOuG,EAAP,KAAe0M,EAAf,KACM1P,EAAQtF,WAAgB,iBAAM,CAAC6F,EAAMwC,EAAIC,EAAQiI,KAAU,CAAC1K,EAAMwC,EAAIC,EAAQiI,IAC9EgB,IAAiBlJ,EAAGA,GAAGY,MACvBgM,EAAO,uCAAG,sBAAA7T,EAAA,6DACZyE,EAAKqP,YAAa,GADN,KAEZF,EAFY,SAEM,IAAIG,UAAY,0CAFtB,6EAAH,qDAoDb,OA9CAjT,qBAAY,WACJyQ,aAAaC,QAAU,UACvBvK,EAAGyL,YAER,IAEH5R,qBAAY,YACHoG,GAAUiJ,GACX0D,MAEL,CAAC1D,IAEAjJ,IACAA,EAAO8M,UAAY,SAACC,GAChBxP,EAAKyP,YAAcnM,KAAKoM,MAAQF,EAAarJ,QAEjD1D,EAAOkN,OAAS,WACZ3P,EAAK4P,cAAe,GACpB,IAAM9P,EAAU,CACZG,MAAO5F,EAAa6F,WACpBgD,GAAIV,EAAGA,GAAGU,GACVzE,KAAM+D,EAAGA,GAAGY,MACZxC,KAAM4B,EAAGA,GAAGY,OAEV,OAANX,QAAM,IAANA,KAAQY,KAAOC,KAAKC,UAAYzD,IAChCE,EAAKqP,YAAa,IAEtB5M,EAAO8M,UAAY,SAACtP,GAChB,IAAM1C,EAAW+F,KAAKoM,MAAQzP,EAAMkG,MACpCnG,EAAKyP,YAAclS,IAEvBkF,EAAOoN,QAAU,WACb7P,EAAK4P,cAAe,GACpB,IAAM9P,EAAU,CACZG,MAAO5F,EAAa6F,WACpBgD,GAAIV,EAAGA,GAAGU,GACVzE,KAAM+D,EAAGA,GAAGY,MACZxC,KAAM,IAEV6B,EAAOY,KAAOC,KAAKC,UAAYzD,KAEnC2C,EAAOqN,QAAU,WACb9P,EAAK4P,cAAe,GACpBrT,YAAa,kBAAM6S,MAAY,OAGnCpP,EAAKb,UAAkB,cAAC,EAAD,IAIvB,cAAC,IAAD,UACI,eAACvG,EAAUmX,SAAX,CAAoBtQ,MAAQA,EAA5B,UACI,cAAC+L,GAAD,IACEE,EACE,cAACnJ,GAAD,IACE,cAAC,GAAD,YAOP0M,MClFfe,IAASC,OACP,cAAC,IAAMC,WAAP,UACA,cAAC,GAAD,MAEAC,SAASC,eAAe,SAM1BvX,M","file":"static/js/main.0fd1d673.chunk.js","sourcesContent":["import * as React from \"react\";\n\nlet defaultValue: any;\nexport let MyContext: React.Context<any>;\nMyContext = React.createContext (defaultValue);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const title = {\n        fontFamily:'monospace',\n        fontSize:'2rem'\n}\n","import { makeStyles } from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\nexport const useStyles = makeStyles({\n    title: {\n        display:\"grid\",\n        // gridTemplateRows:'1fr 1fr',\n        gridAutoRows:'auto',\n        justifyItems:\"center\",\n        minHeight:90,\n        alignItems:'center',\n        '&>div:first-child':{\n            ...title,\n            textTransform:\"uppercase\",\n        }\n    },\n    onlineCounter:{\n        color:\"grey\"\n    },\n});","import {makeAutoObservable} from \"mobx\";\n\n\nexport enum MESSAGE_ENUM {\n    MESSAGE = 'message',\n    QUIT = 'quit',\n    CONNECTION = 'connection'\n}\n\n\nexport interface IMessage {\n    event: MESSAGE_ENUM;\n    id: string;\n    name: string;\n    body: string;\n    connectionCounter: number;\n}\n\n\ninterface IChat {\n    messages: IMessage[];\n    messageValue: string;\n    isLoading: boolean;\n    isConnected: boolean;\n    connectionCounter?: number;\n    setConnected: (isConnected: boolean) => void;\n    setLoading: (isLoading: boolean) => void;\n    setMessageValue: (value: string) => void;\n    setMessages: (messages: any) => void;\n}\n\nclass ChatStore implements IChat {\n    messages = [] as IMessage[];\n    messageValue = '';\n    isLoading = false;\n    isConnected = false;\n    connectionCounter = 0;\n\n    constructor() {\n        makeAutoObservable ( this, {}, {deep: true} );\n    }\n\n\n    setConnected(isConnected: boolean) {\n        this.isConnected = isConnected;\n    };\n\n    setLoading(isLoading: boolean) {\n        this.isLoading = isLoading;\n    };\n\n    setMessageValue(value: string) {\n        this.messageValue = value;\n    };\n\n    setMessages(messages: any) {\n        this.messages =  [...this.messages,...messages, ];\n\n    };\n\n    setConnectionCounter(count: number) {\n        this.connectionCounter = count;\n    };\n}\n\nexport default ChatStore;","import { makeStyles } from '@mui/styles';\n\n\nexport const useStyles = makeStyles({\n    timeRoot:{\n       fontSize:'2rem',\n        fontFamily:\"monospace\",\n        color:'gray',\n        whiteSpace:'nowrap'\n    },\n});","\n\n\nexport const getTime = (date:Date) => {\n    const getTwoDig = (time:number) => {\n        const string = time.toString()\n        return string.length > 1 ? string : `0${string}`\n    }\n    const hour = getTwoDig(date.getHours())\n    const min = getTwoDig(date.getMinutes())\n    const sec = getTwoDig(date.getSeconds())\n    return `${ hour }: ${min }: ${ sec }`\n}\n\nconst timeFromUnix = (date:number) => {\n    return new Date(date * 1000)\n}\n\nexport const getDate = (date:number) => {\n    const fullDate = timeFromUnix(date)\n    const year = fullDate.getFullYear()\n    const month = fullDate.getMonth()\n    const day = fullDate.getDay()\n    return `${ year }: ${month }: ${ day }`\n}\nexport const timeConverter = (UNIX_timestamp:number) => {\n    // weird\n    const a = new Date(UNIX_timestamp / 1000);\n    const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    const year = a.getFullYear();\n    const month = months[a.getMonth()];\n    const date = a.getDate();\n    const hour = a.getHours();\n    const min = a.getMinutes();\n    const sec = a.getSeconds();\n    const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\n    return time;\n}","import * as React from 'react';\nimport {LegacyRef, useEffect, useRef, useState} from 'react';\nimport {useStyles} from './styles'\nimport {getTime} from \"../../utils/time\";\n\n\ninterface IProps {\n clocRef?:React.Ref<HTMLDivElement> | null\n}\n\nexport const Clock: React.FC<IProps> = (props) => {\n    const {children,clocRef} = props;\n    const [time, setTime] = useState ( new Date () );\n    const styles = useStyles();\n\n\n    useEffect ( () => {\n        const clearId = setTimeout ( () => setTime ( new Date () ), 1000 );\n        return () => clearTimeout ( clearId );\n    }, [time] );\n\n    return (\n        <div ref={clocRef} className={styles.timeRoot}>\n            { getTime(time)}\n        </div>\n    );\n};","// @flow\nimport {CircularProgress, Container, Grid} from '@mui/material';\nimport * as React from 'react';\n\n\ntype Props = {\n\n};\nexport const Loader = (props: Props) => {\n    return (\n        <Container>\n            <Grid container alignItems={\"center\"} justifyContent={\"center\"} style={{height: window.innerHeight-30}}>\n                    <CircularProgress color=\"primary\" />\n            </Grid>\n        </Container>\n    );\n};","import {makeStyles} from \"@mui/styles\";\n\nexport const useStyles = makeStyles({\n    messagesRoot: {\n        maxHeight: window.innerHeight - 30\n    },\n    messages: {\n        width: '100%',\n        height: '70vh',\n        backgroundColor: '#354765',\n        overflowY: 'auto'\n    },\n    newMessageRoot: {\n        position: 'relative',\n        width: '100%',\n        rowGap: 20,\n        color: '#ffffff'\n    },\n    textField:{\n        width:'80%'\n    },\n    btn:{\n        \"&.MuiButton-contained\": {\n            backgroundColor: '#3a64a8',\n            border:'none',\n            color: '#ffffff',\n            width:'20%',\n            height:56,\n            '&:hover':{\n                backgroundColor: '#7094d2',\n                color: '#354765',\n            }\n        },\n    }\n})","import data from \"./city.list.json\"\n\nexport const MOBIL = 520;\nexport const weatherData = data as IWeatherOption[]\n\ninterface IWeatherOption {\n    \"id\": number,\n    \"name\": string,\n    \"state\": string,\n    \"country\": string,\n    \"coord\": {\n        \"lon\": number,\n        \"lat\": number\n    }\n};","import { makeStyles } from '@mui/styles';\nimport {MOBIL} from \"../../utils/const\";\n\n\nexport const useStyles = makeStyles({\n    mainBlock:{\n        minWidth: '40vw',\n        margin: 10,\n        borderRadius: '4%',\n        maxWidth: '60%',\n        width: 'fit-content',\n        padding: 15,\n        display: 'grid',\n        justifyContent:'flexStart',\n        rowGap: 20,\n        fontFamily: 'serif',\n        position:'relative'\n    },\n    info: {\n        color:'#afbed2',\n        margin:'20px 30px'\n    },\n    name:{\n        display:'block',\n        maxWidth:'max-content'\n    },\n    copy:{\n        cursor:\"pointer\",\n        position:\"absolute\",\n        opacity:0.7,\n        top:8\n\n    },\n    date:{\n        fontSize:'0.7em'\n    },\n    [`@media (max-width:${MOBIL}px)`]: {\n        mainBlock:{\n            minWidth: '70vw',\n            fontSize: '1.4em'\n        },\n    }\n});","export enum LANG {\n    EN = 'EN',\n    RU = 'RU'\n};\n\nexport enum COUNTRY {\n    UA = 'Украина',\n    RU = 'Россия',\n    BY = 'Белорусия',\n};\n\nexport enum COUNTRY_CODE {\n    'Украина' = 'UA',\n    'Россия' = 'RU',\n    'Белорусия' = 'BY',\n};\n\nexport const LANG_OBJ = Object.create(LANG);\nexport const COUNTRY_OBJ = Object.create(COUNTRY);\nexport const COUNTRY_CODE_OBJ = Object.create(COUNTRY_CODE);\n","import * as React from 'react';\nimport {useContext} from 'react';\nimport {Grid} from \"@mui/material\";\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport {useStyles} from \"./styles\";\nimport {MESSAGE_ENUM} from \"../../state/chatStore\";\nimport {observer} from \"mobx-react-lite\";\nimport {timeConverter} from \"../../utils/time\";\nimport {MyContext} from \"../../state/context\";\n\n\ntype Props = {\n    isMe: boolean;\n    message: any;\n};\nexport const Message: React.FC<Props> = observer((props) => {\n    const {isMe, message} = props;\n    const [chat,me, socket] = useContext ( MyContext );\n    const styles = useStyles ();\n    const onCopy = () =>  navigator.clipboard.writeText(message.body)\n    if (message.event === MESSAGE_ENUM.CONNECTION) {\n        chat.setConnectionCounter(message.connectionCounter);\n    }\n    const style = {\n        backgroundColor: isMe ? '#3a64a8' : '#536f9b',\n        color:  isMe ? '#f6dbaa' :'#eee4cc',\n        marginLeft: isMe ? 'auto' : '10%',\n        marginRight: isMe ? '10%' : 0,\n        paddingRight:10\n\n    };\n\n    return (\n        <Grid direction={ \"column\" } container>\n            { message.event === MESSAGE_ENUM.MESSAGE\n                ? <div className={styles.mainBlock} style={ style }>\n                    <h3 className={styles.name}\n                        style={\n                            {justifySelf:`${!isMe && 'flex-end'}`,borderBottom:`2px solid ${isMe ? '#f6dbaa' :'#eee4cc' }`}\n                        }>\n                        { message.name?.toUpperCase() }\n                    </h3>\n                    <span>{ message.body }</span>\n                    <span className={styles.date}>{ timeConverter(message.date * 1000)  }</span>\n                    <div onClick={onCopy} style={isMe ? {right:2} : {left:6}\n                    } title={'скопировать сообщение'} className={styles.copy}>\n                        <ContentCopyIcon/>\n                    </div>\n            </div>\n                : message.event === MESSAGE_ENUM.CONNECTION ?\n                    <span className={ styles.info }>{ message.name } подключился к чату.. .</span>\n                    : <span className={ styles.info }>{ message.name } вышел из чата.. .</span> }\n        </Grid>\n    );\n});","import {makeStyles} from \"@mui/styles\";\n\nexport const useStyles = makeStyles({\n    emojiRoot: {\n        position: \"absolute\",\n        zIndex: 1,\n        top: 10,\n\n    },\n\n    picker:{\n        top:-350\n    },\n\n})","import * as React from 'react';\nimport {useContext, useState} from 'react';\nimport classNames from \"classnames\";\nimport Picker, {SKIN_TONE_MEDIUM_DARK} from \"emoji-picker-react\";\nimport {Button} from \"@mui/material\";\nimport EmojiEmotionsIcon from \"@mui/icons-material/EmojiEmotions\";\nimport {useStyles} from \"./styles\";\nimport {MyContext} from \"../../state/context\";\nimport {observer} from \"mobx-react-lite\";\n\n\n\ninterface IProps  {\n    frameWidth?:number\n}\n\nexport const Emoji: React.FC<IProps> = observer((props) => {\n    const {children,frameWidth = 0} = props;\n    const [chat,me,socket] = useContext ( MyContext );\n    const styles = useStyles ();\n    const [isShowEmoji, setIsShowEmoji] = useState ( false );\n    const showImoji = () => setIsShowEmoji ( true );\n    const hideImoji = () => setIsShowEmoji ( false );\n    const onEmojiClick = (event: any, emojiObject: any) => {\n        chat.setMessageValue ( emojiObject.emoji ) ;\n    };\n    return (\n        <div style={{right:`${frameWidth * 0.2}px`}} className={ classNames ( styles.emojiRoot, {[styles.picker]: isShowEmoji} ) }\n             onBlur={ hideImoji }>\n            { isShowEmoji\n                ? <Picker native groupNames={ {smileys_people: \"PEOPLE\"} } disableAutoFocus={ true }\n                          onEmojiClick={ onEmojiClick } skinTone={ SKIN_TONE_MEDIUM_DARK }/>\n                : <Button onClick={ showImoji }><EmojiEmotionsIcon/></Button> }\n        </div>\n    );\n});","import * as React from 'react';\nimport {useContext, useEffect, useRef, useState} from 'react';\nimport {Button, Container, Grid, TextField} from '@mui/material';\nimport {Loader} from \"../Loader/Loader\";\nimport {useStyles} from \"./styles\";\nimport {Message} from \"../Message/Message\";\nimport {Emoji} from \"../Emoji/Emoji\";\nimport {observer} from \"mobx-react-lite\";\nimport {IMessage} from '../../state/chatStore';\nimport {MyContext} from \"../../state/context\";\nimport {useFormik} from 'formik';\nimport MeStore from \"../../state/meStore\";\n\n\ntype Props = {}\n\n\nexport const Chat: React.FC<Props> = observer ( ((props) => {\n    const [chat,me, socket] = useContext ( MyContext );\n    const chatRef = useRef<HTMLDivElement> ( null );\n    const styles = useStyles ();\n    const sendMessage = () => {\n        if (!chat.messageValue.trim ()) return;\n        const message = {\n            event: 'message',\n            id: Date.now ().toString (),\n            name: me.me.email,\n            body: chat.messageValue,\n        };\n        socket?.send ( JSON.stringify ( message ) );\n        chat.setMessageValue ( '' );\n    };\n\n    const formik = useFormik ( {\n        initialValues: {\n            message: 'введите сообщение',\n        },\n        onSubmit: (values) => sendMessage (),\n    } );\n\n    const messagesArray = chat.messages;\n    const messagesLength = messagesArray.length;\n\n    const scrollToBottom = () => {\n        chatRef.current?.scrollTo ( 0, chatRef.current.scrollHeight );\n    };\n\n    useEffect ( () => {\n        scrollToBottom ();\n    } );\n\n    if (chat.isLoading) return <Loader/>;\n    return (\n        <Container>\n            <form onSubmit={ formik.handleSubmit }>\n                <Grid container className={ styles.messagesRoot } alignItems={ \"center\" }>\n                    <Grid ref={ chatRef } className={ styles.messages }>\n                        { messagesLength && chat.messages.map ( (mes: IMessage) => {\n                            const isMe = me.me.email === mes.name;\n                            return <Message key={ mes.id } isMe={ isMe } message={ mes }/>;\n                        } ) }\n                    </Grid>\n                </Grid>\n                <Grid className={ styles.newMessageRoot } container direction={ 'row' } alignItems={ 'flex-end' }>\n                    <TextField id={ 'message' } name={ 'message' } label={ 'message' } variant=\"filled\"\n                               autoComplete={ 'off' } onChange={ e => chat.setMessageValue ( e.currentTarget.value ) }\n                               value={ chat.messageValue } className={ styles.textField }\n                    />\n                    <Emoji frameWidth={ chatRef.current?.clientWidth }/>\n                    <Button type={ 'submit' } variant={ \"contained\" } className={styles.btn}><strong>send</strong></Button>\n\n                </Grid>\n            </form>\n        </Container>\n    );\n}) );","import {makeStyles} from \"@mui/styles\";\n\n\nexport const useStyles = makeStyles ( {\n    root: {\n        marginTop: '5%',\n        position: 'relative',\n\n    },\n    selectWrapper:{\n        maxWidth:200,\n        alignContent:\"center\"\n    },\n    alert: {\n        position: \"absolute\",\n        width: 300,\n        right:'25%',\n        opacity:0.7,\n        zIndex: 0,\n        top:'5%',\n\n    },\n    fieldWrapper:{\n        position:'relative'\n    },\n    validatorMessage:{\n        position: \"absolute\",\n        top:0,\n        right:'-124px',\n        width:120\n    }\n} );","import {LANG_OBJ,COUNTRY_OBJ} from \"../App/const\";\n\nexport const LANG_FORM_PROP:ILangForm = {\n    10 : LANG_OBJ.RU,\n    20 : LANG_OBJ.EN,\n\n}\nexport const COUNTRY_FORM_PROP:ICountryForm = {\n    10 : COUNTRY_OBJ.RU,\n    20 : COUNTRY_OBJ.BY,\n    30 : COUNTRY_OBJ.UA,\n\n}\n\nexport const LANGUAGE = {\n   RU : LANG_FORM_PROP[\"10\"],\n   EN : LANG_FORM_PROP[\"20\"]\n}\nexport const COUNTRY = {\n   RU : COUNTRY_FORM_PROP[\"10\"],\n   BY : COUNTRY_FORM_PROP[\"20\"],\n   UA : COUNTRY_FORM_PROP[\"30\"]\n}\n\ninterface ILangForm {\n    [propName: number]: typeof LANG_OBJ,\n}\ninterface ICountryForm {\n    [propName: number]: typeof COUNTRY_OBJ,\n}","import {Alert, Box, Button, FormControl, Grid, Grow, InputLabel, MenuItem, Select, TextField} from '@mui/material';\nimport * as React from 'react';\nimport {useContext, useEffect, useState} from 'react';\nimport {useFormik} from \"formik\";\nimport {MyContext} from \"../../state/context\";\nimport {useStyles} from \"./styles\";\nimport {COUNTRY_CODE, COUNTRY_CODE_OBJ, LANG} from \"../App/const\";\nimport {COUNTRY, LANGUAGE} from \"./const\";\nimport {validate} from \"./validator\";\nimport {weatherData} from \"../../utils/const\";\nimport {log} from \"util\";\nimport useDebounce from \"../../utils/hooks/useDebounce\";\n\n\nexport const BasicJoinForm: React.FC<IProps> = (props) => {\n    const {onSubmit, children, title, withOptions = false, submitButtonText, showAlert = false, onCloseAlert,} = props;\n    const [chat, me, socket] = useContext(MyContext);\n    const data = [...weatherData]\n    const [city, setCity] = useState<string>('')\n    const [filteredData, setFilteredData] = useState<Array<any>>([])\n    const styles = useStyles();\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n            email: '',\n            password: '',\n            country: '',\n            city: 0,\n            language: LANGUAGE.RU,\n        },\n        validate: (values) => validate(values, withOptions),\n\n        onSubmit: (values) => {\n            const {name, password, city, country, language, email} = values\n            try {\n                onSubmit && onSubmit({name, password, city, country: COUNTRY_CODE_OBJ[country], language, email});\n            } catch (e) {\n                console.log(e);\n            }\n\n        },\n    });\n    const onCity = (value: string) => {\n        setCity(`${city}${value}`)\n    }\n\n    const debouncedValue = useDebounce(city, 2000)\n\n    const getCityList = () => {\n        setFilteredData(\n            [...data].filter(item => {\n                return item.country === COUNTRY_CODE_OBJ[formik.values.country] && item.name.toLowerCase().includes(debouncedValue.toLowerCase())\n            }).splice(0, 9))\n        setCity('')\n    }\n\n\n    useEffect(() => {\n        if (debouncedValue) {\n            getCityList()\n        }\n    }, []);\n    useEffect(() => {\n        if (debouncedValue) {\n            getCityList()\n        }\n    }, [debouncedValue, formik.values.country]);\n\n    return (\n        <form className={styles.root} onSubmit={formik.handleSubmit}>\n            <Box className={styles.alert}>\n                <Grow in={showAlert}>{\n                    <Alert onClose={onCloseAlert} severity=\"info\">{withOptions\n                        ? 'Введите имя которое будет использовано для регистрации и отправки сообщений в чате'\n                        : 'Введите имя указанное в процессе регистрации'}</Alert>\n                }\n                </Grow>\n                {/* Conditionally applies the timeout prop to change the entry speed. */}\n                <Grow\n                    in={showAlert}\n                    style={{transformOrigin: '0 0 0'}}\n                    {...(showAlert ? {timeout: 1000} : {})}\n                >\n                    {<Alert severity=\"info\">{withOptions\n                        ? 'Введите пароль который будет использован для регистрации'\n                        : 'Введите пароль указанный в процессе регистрации'}</Alert>}\n                </Grow>\n            </Box>\n            <Grid container justifyContent={\"center\"} alignItems={\"center\"}\n                  direction={'column'} gap={2}>\n                {title}\n                {withOptions && (\n                    <FormControl fullWidth classes={{root: styles.selectWrapper}}>\n                        <InputLabel id=\"select-label\">Язык</InputLabel>\n                        <Select\n                            labelId=\"select-label\"\n                            id=\"lang\"\n                            label=\"lang\"\n                            name=\"lang\"\n                            onChange={formik.handleChange}\n                            defaultValue={LANGUAGE.RU}\n                        >\n                            <MenuItem value={LANGUAGE.RU}>{LANG.RU}</MenuItem>\n                            <MenuItem value={LANGUAGE.EN}>{LANG.EN}</MenuItem>\n                        </Select>\n                    </FormControl>\n                )}\n                <div className={styles.fieldWrapper}>\n                    <TextField autoFocus variant=\"filled\"\n                               onChange={formik.handleChange}\n                               value={formik.values.email}\n                               required\n                               id=\"email\" name=\"email\" label=\"email\"\n                    />\n                    <Box className={styles.validatorMessage}>\n                        <Grow in={!!formik.errors.email}>{\n                            <Alert severity=\"error\">{formik.errors.email}</Alert>\n                        }\n                        </Grow>\n                    </Box>\n                </div>\n                {withOptions && (\n                    <div className={styles.fieldWrapper}>\n                        <TextField variant=\"filled\"\n                                   onChange={formik.handleChange}\n                                   value={formik.values.name}\n                                   required\n                                   id=\"name\" name=\"name\" label=\"name\"\n                        />\n                        <Box className={styles.validatorMessage}>\n                            <Grow in={!!formik.errors.name}>{\n                                <Alert severity=\"error\">{formik.errors.name}</Alert>\n                            }\n                            </Grow>\n                        </Box>\n                    </div>\n                )}\n\n                <div className={styles.fieldWrapper}>\n                    <TextField inputProps={{\n                        autoComplete: 'new-password',\n                        form: {\n                            autoComplete: 'off',\n                        },\n                    }} variant=\"filled\"\n                               onChange={formik.handleChange}\n                               value={formik.values.password} type=\"password\"\n                               id=\"password\" name=\"password\" label=\"password\"\n                    />\n                    <Box className={styles.validatorMessage}>\n                        <Grow in={!!formik.errors.password}>{\n                            <Alert severity=\"error\">{formik.errors.password}</Alert>\n                        }\n                        </Grow>\n                    </Box>\n                </div>\n                {withOptions && (\n                    <>\n\n                        <FormControl fullWidth classes={{root: styles.selectWrapper}}>\n                            <InputLabel id=\"select-country-label\">Страна</InputLabel>\n                            <Select\n                                labelId=\"select-country-label\"\n                                id=\"country\"\n                                label=\"country\"\n                                name=\"country\"\n                                onChange={formik.handleChange}\n                            >\n                                <MenuItem value={COUNTRY.RU}>{COUNTRY.RU}</MenuItem>\n                                <MenuItem value={COUNTRY.UA}>{COUNTRY.UA}</MenuItem>\n                                <MenuItem value={COUNTRY.BY}>{COUNTRY.BY}</MenuItem>\n                            </Select>\n                        </FormControl>\n\n                        {formik.values.country && (\n                            <FormControl fullWidth classes={{root: styles.selectWrapper}}>\n                                <InputLabel id=\"select-city-label\">Город</InputLabel>\n                                <Select\n                                    labelId=\"select-city-label\"\n                                    id=\"city\"\n                                    label=\"city\"\n                                    name=\"city\"\n                                    onChange={formik.handleChange}\n                                    onKeyPress={(event) => onCity(event.key)}\n                                >\n                                    <MenuItem value=\"\"><em>None</em></MenuItem>\n                                    {  // @ts-ignore\n                                        filteredData.map((city, id) => {\n                                            return < MenuItem key={city.id} value={city.name}>{city.name}</MenuItem>\n                                        })}\n                                </Select>\n                            </FormControl>\n                        )}\n                    </>\n                )\n                }\n                <Button type=\"submit\" disabled={!formik.isValid || !formik.dirty} color={'info'}\n                        variant={'contained'}>{submitButtonText}</Button>\n            </Grid>\n        </form>\n    );\n};\n\ninterface IProps {\n    onSubmit?: (values: IJoinFormValues) => void;\n    onCloseAlert?: () => void;\n    submitButtonText: string;\n    withOptions?: boolean;\n    showAlert?: boolean;\n    title?: React.ReactNode\n};\n\nexport interface IJoinFormValues {\n    name: string,\n    email: string,\n    password: string,\n    city?: number,\n    country?: string,\n    language?: number\n}\n","import {Chat} from \"../components/Chat/Chat\";\nimport {Login} from \"../components/Login/Login\";\nimport {Registration} from \"../components/Registration/Registration\";\nimport {JoinOptions} from \"../components/JoinOptions/JoinOptions\";\nimport {Profile} from \"../components/Profile/Profile\";\n\n\nexport enum ROUTES {\n    LOGIN_ROUTE = '/login',\n    CHAT_ROUTE = '/chat',\n    REGISTRATION_ROUTE = '/registration',\n    JOIN_ROUTE = '/join',\n    PROFILE_ROUTE = '/profile',\n}\n\nexport const publicRoutes = [\n\n    {\n        path: ROUTES.JOIN_ROUTE,\n        Component: JoinOptions,\n    },\n    {\n        path: ROUTES.LOGIN_ROUTE,\n        Component: Login,\n    },\n    {\n        path: ROUTES.REGISTRATION_ROUTE,\n        Component: Registration,\n    },\n];\n\nexport const privateRoutes = [\n    {\n        path: ROUTES.CHAT_ROUTE,\n        Component: Chat,\n    },\n    {\n        path: ROUTES.PROFILE_ROUTE,\n        Component: Profile,\n    },\n];\n\n","import {validateEmail} from \"../../utils/validator\";\nimport {IJoinFormValues} from \"./BasicJoinForm\";\n\nexport const validate = (values:IJoinFormValues,withOptions:boolean) => {\n    const {name, password, city, country, language, email} = values\n    const errors: any = {};\n    if (withOptions && name.length <= 3 ) {\n        errors.name = 'Required more 3 symbols';\n    }\n    // if (!validateEmail(email)) {\n    //     errors.email = 'Incorrect';\n    // }\n    if (password.length <= 3) {\n        errors.password = 'Required more 3 symbols';\n    }\n    return errors\n\n}","import React, { useState, useEffect } from 'react';\n\n// Наш хук\nexport default function useDebounce(value:any, delay:number) {\n    // Состояние и сеттер для отложенного значения\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Выставить debouncedValue равным value (переданное значение)\n            // после заданной задержки\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Вернуть функцию очистки, которая будет вызываться каждый раз, когда ...\n            // ... useEffect вызван снова. useEffect будет вызван снова, только если ...\n            // ... value будет изменено (смотри ниже массив зависимостей).\n            // Так мы избегаем изменений debouncedValue, если значение value ...\n            // ... поменялось в рамках интервала задержки.\n            // Таймаут очищается и стартует снова.\n            // Что бы сложить это воедино: если пользователь печатает что-то внутри ...\n            // ... нашего приложения в поле поиска, мы не хотим, чтобы debouncedValue...\n            // ... не менялось до тех пор, пока он не прекратит печатать дольше, чем 500ms.\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        // Вызывается снова, только если значение изменится\n        // мы так же можем добавить переменную \"delay\" в массива зависимостей ...\n        // ... если вы собираетесь менять ее динамически.\n        [value]\n    );\n\n    return debouncedValue;\n}","import {makeStyles} from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles({\n    title:{\n        ...title,\n        textTransform:\"uppercase\",\n    }\n\n});","import {makeStyles} from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles({\n    children:{\n       display:\"grid\",\n        gridTemplateColumns:'1fr 24px',\n        columnGap:6,\n        cursor:\"pointer\"\n    },\n    title:{\n        ...title,\n        textTransform:\"uppercase\",\n    }\n\n});","import {makeStyles} from \"@mui/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        marginTop: '4%',\n    },\n    btn: {\n        height: 100,\n        width: 300,\n\n    }\n\n})","import {Button, Grid} from \"@mui/material\";\nimport {NavLink} from \"react-router-dom\";\nimport {ROUTES} from \"../../utils/routes\";\nimport * as React from \"react\";\nimport {useStyles} from \"./styles\";\n\nexport const JoinOptions: React.FC = () => {\n    const styles = useStyles();\n    return (\n        <Grid className={styles.root} container justifyContent={\"center\"} direction={\"column\"} alignItems={\"center\"}\n              gap={10}>\n            {/*<FanFact text={'test'}/>*/}\n            <Grid item><NavLink to={ROUTES.REGISTRATION_ROUTE}>< Button size={'large'}\n                variant={'contained'} classes={{root: styles.btn}}>Регистрация</Button>\n            </NavLink></Grid>\n            <Grid item><NavLink to={ROUTES.LOGIN_ROUTE}>< Button size={'large'}\n                variant={'contained'} classes={{root: styles.btn}}>Вход</Button>\n            </NavLink></Grid>\n        </Grid>\n    )\n}","import * as React from 'react';\nimport {useContext} from 'react';\nimport {MyContext} from \"../../state/context\";\nimport {BasicJoinForm, IJoinFormValues} from \"../BasicJoinForm/BasicJoinForm\";\nimport {useStyles} from './styles'\n\n\nexport const Login: React.FC = () => {\n    const styles = useStyles()\n    const [chat, me, socket] = useContext(MyContext);\n\n    const onSubmit = (values:IJoinFormValues) => {\n        const {password,email} = values;\n        me.login(email, password)\n    }\n\n    return (\n        <BasicJoinForm onSubmit={onSubmit}\n                       submitButtonText={\"Войти\"}\n                       title={(\n            <div className={styles.title}> Вход </div>\n        )}>\n\n        </BasicJoinForm>\n    );\n};\n\n","import * as React from 'react';\nimport {useCallback, useContext, useState} from 'react';\nimport {BasicJoinForm, IJoinFormValues} from \"../BasicJoinForm/BasicJoinForm\";\nimport HelpIcon from \"@mui/icons-material/Help\";\nimport {useStyles} from \"./styles\";\nimport {MyContext} from \"../../state/context\";\n\n\nexport const Registration: React.FC<Props> = () => {\n    const styles = useStyles();\n    const [showAlert, setShowAlert] = useState(false);\n    const [chat, me, socket] = useContext(MyContext);\n    let timeOutId: NodeJS.Timeout;\n    const onSubmit = async (values:IJoinFormValues) => {\n        const {country,language,city,password,name,email} = values\n        await me.registration({name,email, password, city, country, language});\n    };\n\n    const onShowAlert = useCallback(() => {\n        setShowAlert(true);\n        timeOutId = setTimeout(() => {\n            setShowAlert(false);\n        }, 5000);\n    }, []);\n    const onCloseAlert = useCallback(() => {\n        setShowAlert(false);\n        clearTimeout(timeOutId);\n    }, []);\n\n    return (\n        <BasicJoinForm\n            onCloseAlert={onCloseAlert}\n            showAlert={showAlert}\n            onSubmit={onSubmit}\n            submitButtonText={\"Зарегистрироваться\"}\n            withOptions\n            title={(\n                <div className={styles.children} onClick={showAlert ? onCloseAlert : onShowAlert}>\n                    <div className={styles.title}> Регистрация</div>\n                    <HelpIcon/>\n                </div>\n            )}/>\n    );\n};\ntype Props = {};\n","import {makeStyles} from \"@mui/styles\";\n\n\nexport const useStyles = makeStyles({\n    root: {\n        margin: '10px 0',\n        maxWidth: '15vw'\n    },\n    description: {\n        fontSize: '0.8em',\n        color: \"grey\",\n        '&>div>strong': {\n            fontSize: '1.1em',\n        }\n    },\n    iconWrapper: {\n        position: \"relative\"\n    },\n    icon: {\n        position: 'absolute',\n        width: 60,\n        height: 60,\n        top: -24,\n        right:-24\n    }\n\n});","import * as React from 'react';\nimport {useContext, useEffect} from 'react';\nimport {MyContext} from \"../../state/context\";\nimport {Grid, Table, TableCell, TableRow} from \"@mui/material\";\nimport {observer} from \"mobx-react-lite\";\nimport {useStyles} from \"./styles\";\n\n\ninterface IProps {\n}\n\nexport const Weather: React.FC<IProps> = observer((props) => {\n    const {children} = props;\n    const [chat, me, socket,utility] = useContext ( MyContext );\n    const styles = useStyles();\n    useEffect(()=>{\n        utility.fetchWeather({\n            language:me.me.language,\n            location:me.me.location});\n    },[])\n    return (\n        <Grid container direction={\"column\"} classes={{root:styles.root}}>\n                <Table>\n                    <TableRow >\n                        <TableCell padding={\"checkbox\"}\n                            align={'left'}\n                        >\n                            <span>{utility?.weather?.name}</span>\n                        </TableCell>\n                        <TableCell classes={{root:styles.iconWrapper}} padding={\"checkbox\"}\n                            align={'right'}\n                        >\n                            <img className={styles.icon} src={utility?.weather?.weather?.icon}/>\n                        </TableCell>\n                </TableRow>\n                    <TableRow>\n                        <TableCell padding={\"checkbox\"}\n                            align={'left'}\n                        >\n                            <span>температура воздуха </span>\n                        </TableCell>\n                        <TableCell padding={\"checkbox\"}\n                            align={'right'}\n                        >\n                            <strong>{\n                                Math.ceil(utility?.weather?.main?.temp)\n                            }</strong>\n                        </TableCell>\n                </TableRow>\n                    <TableRow>\n                        <TableCell padding={\"checkbox\"}\n                            align={'left'}\n                        >\n                            <span> ощущается как </span>\n                        </TableCell>\n                        <TableCell padding={\"checkbox\"}\n                            align={'right'}\n                        >\n                            <strong>{\n                                Math.ceil(utility?.weather?.main?.feels_like)\n                            }</strong>\n                        </TableCell>\n                    </TableRow>\n                </Table>\n                {/*<div><span>температура воздуха </span>*/}\n                {/*    <strong>{*/}\n                {/*        //273.15 kelvin*/}\n                {/*        //need to add &units=metric*/}\n                {/*        Math.ceil(utility?.weather?.main?.temp - 273.15)*/}\n                {/*    }</strong>*/}\n                {/*</div>*/}\n                {/*<div><span> ощущается как </span>*/}\n                {/*    <strong>{*/}\n                {/*        //273.15 kelvin*/}\n                {/*        //need to add &units=metric*/}\n                {/*        Math.ceil(utility?.weather?.main?.feels_like - 273.15)*/}\n                {/*    }</strong>*/}\n                {/*</div>*/}\n        </Grid>\n    );\n});","import * as React from 'react';\nimport {useCallback, useContext, useRef} from 'react';\nimport {AppBar, Button, Grid} from '@mui/material';\nimport {useStyles} from \"./styles\";\nimport {MyContext} from \"../../state/context\";\nimport {observer} from \"mobx-react-lite\";\nimport {Clock} from \"../Clock/Clock\";\nimport {NavLink, useLocation} from 'react-router-dom';\nimport {ROUTES} from \"../../utils/routes\";\nimport {Weather} from \"../Weather/Weather\";\n\n\ntype Props = {};\nexport const NavBar: React.FC<Props> = observer ( (props) => {\n    const [chat, me, socket] = useContext ( MyContext );\n    const {connectionCounter} = chat;\n    const styles = useStyles ();\n    const clockRef = useRef<HTMLDivElement> ( null );\n    const isAuthorized = !!me.me.email;\n    const isLoginPage = useLocation ().pathname.includes ( ROUTES.LOGIN_ROUTE );\n    const isLJoinPage = useLocation ().pathname.includes ( ROUTES.JOIN_ROUTE );\n    const emptyBoxWidth = clockRef?.current?.offsetWidth || 0;\n    const onLogout = useCallback ( () => me.logout (), [] );\n    return (\n        <AppBar color={ \"transparent\" } variant={ \"outlined\" } elevation={ 0 } position=\"static\">\n            <Grid container item alignItems={ \"center\" } justifyContent={ 'space-evenly' }>\n                <div style={ {minWidth: emptyBoxWidth || '11vw'} }>\n                    {isAuthorized && <Weather/>}\n                </div>\n                <div className={ styles.title }>\n                    <div>{ 'Чат имени Альфредо Гарсии' }</div>\n                    { isAuthorized ?\n                        <span className={ styles.onlineCounter }>\n                                сейчас онлайн: { connectionCounter || 0 } человек\n                            </span>\n                        : !isLJoinPage && (isLoginPage\n                            ? <Grid item><NavLink to={ ROUTES.REGISTRATION_ROUTE }>< Button\n                                variant={ 'text' }>к регистрации</Button></NavLink></Grid>\n                            : <Grid item><NavLink to={ ROUTES.LOGIN_ROUTE }>< Button\n                                variant={ 'text' }>к логину</Button></NavLink>\n                            </Grid>\n                    ) }\n\n                </div>\n                <Clock clocRef={ clockRef }/>\n                { isAuthorized && <Button onClick={ onLogout } variant={ 'outlined' }>Logout</Button> }\n            </Grid>\n        </AppBar>\n    );\n} );","import axios from \"axios\";\nimport {IUser} from \"../service/AuthService\";\n\n\n// const baseURL = 'http://httplocalhost:5000';\nconst baseURL = 'https://ws-simple-chat-api.herokuapp.com/';\n\nconst chatApiInstance = axios.create({baseURL});\n\nchatApiInstance.interceptors.request.use((config)=>{\n    if ( config && config.headers) {\n        config.headers.Authorization = `Bearer ${ localStorage.getItem ( 'token' ) }`;\n        return config\n    }\n});\n\nchatApiInstance.interceptors.response.use((config)=>{\n    return config;\n},async (error) => {\n    const originalRequest = error.config;\n    if (error.response.status === 401 && error.config && !error.config._isRetry) {\n        originalRequest._isRetry = true;\n        try {\n            const response = await axios.post<AuthResponse>(`${baseURL}/auth/refresh`, {withCredentials: true})\n            localStorage.setItem('token', response.data.accessToken);\n            return chatApiInstance.request(originalRequest);\n        } catch (e) {\n            console.log('НЕ АВТОРИЗОВАН')\n        }\n    }\n    throw error;\n});\n\n\nexport default chatApiInstance;\n\nexport interface AuthResponse {\n    accessToken: string;\n    refreshToken: string;\n    user: IUser;\n}","import {AxiosResponse} from \"axios\";\nimport instance from \"../http/chatApiInstance\";\nimport {IJoinFormValues} from \"../components/BasicJoinForm/BasicJoinForm\";\nimport {LANG} from \"../components/App/const\";\n\n\nexport default class AuthService {\n    static async login(email: string, password: string): Promise<AxiosResponse<IAuthResponse>> {\n        return instance.post ( 'auth/login', {email, password} );\n    }\n\n    static async registration(values:IJoinFormValues): Promise<AxiosResponse<IAuthResponse>> {\n        const {password,name,country,language,city,email} = values;\n        return instance.post ( 'auth/registration', {email,password,name,country,language,city} );\n    }\n\n    static async logout(): Promise<void> {\n        return instance.delete ( 'auth/logout' );\n    }\n    static async refresh(): Promise<AxiosResponse<IAuthResponse>> {\n        return instance.post ( 'auth/refresh' );\n    }\n}\n\nexport interface IAuthResponse {\n    accessToken: string;\n    refreshToken: string;\n    user: IUser;\n}\n\nexport interface IUser {\n    email: string;\n    name: string;\n    language: LANG;\n    location:ILocation\n    id: string;\n    isActivated: boolean;\n\n}\n\nexport interface ILocation {country:string,city:string}","import {makeAutoObservable} from \"mobx\";\nimport AuthService, {IAuthResponse, IUser} from \"../service/AuthService\";\nimport {AxiosResponse} from \"axios\";\nimport {IJoinFormValues} from \"../components/BasicJoinForm/BasicJoinForm\";\n\n\ninterface IMEStore {\n    me: IUser | null;\n}\n\nclass MeStore implements IMEStore {\n    me = {} as IUser;\n\n\n    constructor() {\n        makeAutoObservable ( this, {}, {deep: true} );\n    }\n\n    setMe(item: IUser | null) {\n        if (item) {\n            this.me = item;\n        } else {\n            this.me = {} as IUser\n        }\n    };\n\n    setAuthData(data: AxiosResponse<IAuthResponse, any>) {\n        localStorage.setItem ( 'token', data.data.accessToken );\n        this.setMe ( data.data.user );\n    }\n\n    async login(email: string, password: string) {\n        try {\n            const response = await AuthService.login ( email, password );\n            this.setAuthData ( response );\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n\n    async registration(values:IJoinFormValues) {\n        const {password,name,country,language,city,email} = values;\n        try {\n            const response = await AuthService.registration ({password,email, name, country, language, city});\n            this.setAuthData ( response );\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n\n    async refresh() {\n        try {\n            const response = await AuthService.refresh ();\n            localStorage.setItem ( 'token', response.data.accessToken );\n            this.setMe ( response.data.user );\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n    async logout() {\n        try {\n            const response = await AuthService.logout();\n            this.setMe ( null );\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n\n}\n\nexport default MeStore;","import {Redirect, Route, Switch} from 'react-router-dom';\nimport * as React from \"react\";\nimport {privateRoutes, publicRoutes, ROUTES} from \"../../utils/routes\";\n\n\n\nconst AppRoute:React.FC = () => {\n\n    const isAuthorized = false\n\n    return isAuthorized ?\n        <Switch>\n            { privateRoutes.map ( ({path, Component}) => {\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\n            } ) }\n            <Redirect to={ROUTES. CHAT_ROUTE }/>\n        </Switch>\n        :\n        <Switch>\n            { publicRoutes.map ( ({path, Component}) => {\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\n            } ) }\n            <Redirect to={ ROUTES.JOIN_ROUTE }/>\n        </Switch>\n}\n\n\nexport default AppRoute;\n","import axios from \"axios\";\n\n\nconst baseURL = 'http://api.fungenerators.com/fact/';\nconst dayFactApiInstance = axios.create({baseURL});\nexport default dayFactApiInstance;\n\n","import {AxiosResponse} from \"axios\";\nimport instance from \"../http/funFactApiInstance\";\n\n\nexport default class DayFactService {\n    static async fetchFact(): Promise<AxiosResponse<IDayFactResponse>> {\n        return instance.get ('random',)\n    }\n\n}\n\ninterface IDayFactResponse {\n    \"success\": {\n        total: number\n    },\n    \"contents\": {\n        fact: string,\n        id: string,\n        category: string,\n        subcategory: string\n    }\n}\n","import {AxiosResponse} from \"axios\";\nimport chatInstance from '../http/chatApiInstance'\nimport {ILocation} from \"./AuthService\";\nimport {LANG} from \"../components/App/const\";\n\n\nexport default class WeatherService {\n    static async fetchWeather(payload:{location: ILocation, lang: LANG}): Promise<AxiosResponse<IWeatherResponse>> {\n        return chatInstance.post(`/utils/weather`, {\n            ...payload\n        })\n    }\n\n}\n\nexport interface IWeatherResponse {\n    \"coord\": {\n        \"lon\": number,\n        \"lat\": number\n    },\n    \"weather\": [\n        {\n            \"id\": number,\n            \"main\": string,\n            \"description\": string,\n            \"icon\": string\n        }\n    ],\n    \"base\": string,\n    \"main\": {\n        \"temp\": number,\n        \"pressure\": number,\n        \"humidity\": number,\n        \"temp_min\": number,\n        \"temp_max\": number\n    },\n    \"visibility\": number,\n    \"wind\": {\n        \"speed\": number,\n        \"deg\": number\n    },\n    \"clouds\": {\n        \"all\": number\n    },\n    \"dt\": number,\n    \"sys\": {\n        \"type\": number,\n        \"id\": number,\n        \"message\": number,\n        \"country\": string,\n        \"sunrise\": number,\n        \"sunset\": number\n    },\n    \"id\": number,\n    \"name\": string,\n    \"cod\": number\n}\n\n","import {makeAutoObservable} from \"mobx\";\nimport DayFactService from \"../service/DayFactService\";\nimport WeatherService, {IWeatherResponse} from \"../service/WeatherService\";\nimport {ILocation} from \"../service/AuthService\";\nimport {LANG} from \"../components/App/const\";\n\n\ninterface IUtilityStore {\n    fact:string\n    weather:IWeatherResponse\n}\n\nclass UtilityStore implements IUtilityStore {\n    fact = '';\n    weather = {} as IWeatherResponse;\n\n\n    constructor() {\n        makeAutoObservable ( this, {}, {deep: true} );\n    }\n\n    setFact(item: string) {\n        if (item) {\n            this.fact = item;\n        } else {\n            this.fact = ''\n        }\n    };\n    setWeather(item: IWeatherResponse) {\n        if (item) {\n            this.weather = item;\n        } else {\n            this.weather = {} as IWeatherResponse\n        }\n    };\n\n    async fetchFact() {\n        try {\n            const response = await DayFactService.fetchFact();\n            this.setFact ( response.data.contents.fact );\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n async fetchWeather(payload: { location: ILocation, lang: LANG }) {\n        try {\n            const response = await WeatherService.fetchWeather(payload);\n            this.setWeather(response.data) ;\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n\n\n}\n\nexport default UtilityStore;","import * as React from 'react';\nimport {useEffect, useState} from 'react';\nimport {NavBar} from \"../NavBar/NavBar\";\nimport './App.css';\nimport {Loader} from \"../Loader/Loader\";\nimport {HashRouter} from 'react-router-dom';\nimport ChatStore, {MESSAGE_ENUM} from \"../../state/chatStore\";\nimport {observer} from \"mobx-react-lite\";\nimport {MyContext} from '../../state/context';\nimport MeStore from \"../../state/meStore\";\nimport {Chat} from \"../Chat/Chat\";\nimport AppRoute from \"../AppRoute/AppRoute\";\nimport utilityStore from \"../../state/utilityStore\";\n\n\nconst App: React.FC = observer ( (props) => {\n    const [chat] = useState ( () => new ChatStore () );\n    const [me] = useState ( () => new MeStore () );\n    const [utility] = useState ( () => new utilityStore () );\n    const [socket, setSocket] = useState<WebSocket | null> ( null );\n    const value = React.useMemo ( () => [chat, me, socket, utility], [chat, me, socket, utility] );\n    const isAuthorized = !!me.me.email;\n    const connect = async () => {\n        chat.setLoading ( true );\n        setSocket ( await new WebSocket ( 'wss://ws-simple-chat-api.herokuapp.com' ) );\n        // setSocket ( await new WebSocket ( 'ws://localhost:5000' ) );\n    };\n\n    useEffect ( () => {\n        if (localStorage.getItem ( 'token' )) {\n            me.refresh ();\n        }\n    }, [] );\n\n    useEffect ( () => {\n        if (!socket && isAuthorized) {\n            connect ();\n        }\n    }, [isAuthorized] );\n\n    if (socket) {\n        socket.onmessage = (messageEvent: MessageEvent) => {\n            chat.setMessages ( JSON.parse ( messageEvent.data ) );\n        };\n        socket.onopen = () => {\n            chat.setConnected ( true );\n            const message = {\n                event: MESSAGE_ENUM.CONNECTION,\n                id: me.me.id,\n                name: me.me.email,\n                body: me.me.email,\n            };\n            socket?.send ( JSON.stringify ( message ) );\n            chat.setLoading ( false );\n        };\n        socket.onmessage = (event: MessageEvent) => {\n            const messages = JSON.parse ( event.data );\n            chat.setMessages ( messages );\n        };\n        socket.onclose = () => {\n            chat.setConnected ( false );\n            const message = {\n                event: MESSAGE_ENUM.CONNECTION,\n                id: me.me.id,\n                name: me.me.email,\n                body: '',\n            };\n            socket.send ( JSON.stringify ( message ) );\n        };\n        socket.onerror = () => {\n            chat.setConnected ( false );\n            setTimeout ( () => connect (), 1000 );\n        };\n    }\n    if (chat.isLoading) return <Loader/>;\n\n\n    return (\n        <HashRouter>\n            <MyContext.Provider value={ value }>\n                <NavBar/>\n                { isAuthorized ?\n                    <Chat/>\n                    : <AppRoute/>\n                }\n            </MyContext.Provider>\n        </HashRouter>\n    );\n} );\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./components/App/App\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}