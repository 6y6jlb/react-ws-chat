{"version":3,"sources":["state/context.ts","reportWebVitals.ts","utils/styles.ts","components/NavBar/styles.ts","utils/const.ts","components/Clock/styles.ts","utils/time.ts","components/Clock/Clock.tsx","components/Loader/Loader.tsx","components/Chat/styles.ts","components/Message/styles.ts","state/chatStore.ts","components/App/const.ts","components/Message/Message.tsx","components/Emoji/styles.ts","components/Emoji/Emoji.tsx","components/Chat/Chat.tsx","components/BasicJoinForm/styles.ts","components/BasicJoinForm/const.ts","components/common/LanguageSelect/LangSelect.tsx","components/common/LanguageSelect/styles.ts","components/common/CountrySelect/CountrySelect.tsx","components/common/CountrySelect/styles.ts","components/common/CitySelect/CitySelect.tsx","state/const.ts","components/common/CitySelect/styles.ts","utils/hooks/useDebounce.tsx","components/common/LocationSelect/LocationSelect.tsx","components/common/CommonTextFileld/CommonTextField.tsx","components/common/CommonTextFileld/styles.ts","components/BasicJoinForm/BasicJoinForm.tsx","components/BasicJoinForm/validator.tsx","components/Login/styles.ts","components/Login/Login.tsx","components/common/Badge/consts.ts","components/Registration/styles.ts","components/JoinOptions/styles.ts","components/Profile/styles.ts","components/ProfileData/styles.ts","utils/routes.ts","components/common/Badge/Badge.tsx","components/common/Badge/styles.ts","components/ProfileData/ProfileDataTable.tsx","components/ProfileData/ProfileData.tsx","components/ProfileEdit/styles.ts","components/common/RadioButtons/RadioButtons.tsx","components/common/RadioButtons/styles.ts","components/ProfileEdit/ProfileEditForm.tsx","components/ProfileEdit/ProfileEdit.tsx","components/Profile/Profile.tsx","components/JoinOptions/JoinOptions.tsx","components/Registration/Registration.tsx","components/Weather/styles.ts","components/Weather/Weather.tsx","components/NavBar/NavBar.tsx","utils/selectors/historySelector.ts","http/chatApiInstance.ts","service/AuthService.ts","utils/localStorage.ts","state/meStore.ts","components/AppRoute/AppRoute.tsx","http/funFactApiInstance.ts","service/DayFactService.ts","service/WeatherService.ts","state/utilityStore.ts","state/settingsStore.ts","i18n/locales.ts","i18n/messages.ts","components/App/theme/theme.ts","components/App/App.tsx","index.tsx"],"names":["MyContext","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","title","fontFamily","fontSize","useStyles","makeStyles","display","gridAutoRows","justifyItems","minHeight","alignItems","textTransform","onlineCounter","color","buttonsWrapper","gridTemplateRows","rowGap","React","defaultValue","SWITCHER","THEME","LS","timeRoot","whiteSpace","getTime","date","getTwoDig","time","string","toString","length","hour","getHours","min","getMinutes","sec","getSeconds","timeConverter","UNIX_timestamp","a","Date","year","getFullYear","month","getMonth","getDate","Clock","props","children","useState","setTime","styles","useEffect","clearId","setTimeout","clearTimeout","className","Loader","Container","Grid","container","justifyContent","style","height","window","innerHeight","CircularProgress","messagesRoot","maxHeight","messages","width","backgroundColor","overflowY","newMessageRoot","position","textField","btn","border","weatherData","TABLE_WIDTH","MESSAGE_ENUM","mainBlock","minWidth","margin","borderRadius","maxWidth","padding","info","name","copy","cursor","opacity","top","LANG","COUNTRY_RU","COUNTRY_EN","COUNTRY_CODE","ChatStore","messageValue","isLoading","isConnected","connectionCounter","makeAutoObservable","this","deep","value","count","Message","observer","isMe","message","useContext","chat","event","CONNECTION","setConnectionCounter","marginLeft","marginRight","paddingRight","direction","MESSAGE","justifySelf","borderBottom","toUpperCase","body","onClick","navigator","clipboard","writeText","right","left","id","emojiRoot","zIndex","picker","Emoji","frameWidth","isShowEmoji","setIsShowEmoji","classNames","onBlur","native","groupNames","smileys_people","disableAutoFocus","onEmojiClick","emojiObject","setMessageValue","emoji","skinTone","SKIN_TONE_MEDIUM_DARK","Button","Chat","me","socket","chatRef","useRef","formik","useFormik","initialValues","onSubmit","values","trim","now","email","send","JSON","stringify","sendMessage","messagesLength","current","scrollTo","scrollHeight","scrollToBottom","handleSubmit","ref","map","mes","TextField","label","variant","autoComplete","onChange","e","currentTarget","clientWidth","type","root","marginTop","selectWrapper","alignContent","alert","fieldWrapper","validatorMessage","COUNTRY_CODE_RU","COUNTRY_CODE_EN","LANG_OBJ","EN","Object","keys","RU","create","COUNTRY_OBJ_RU","COUNTRY_OBJ_EN","COUNTRY_CODE_OBJ","LANG_FORM_PROP","COUNTRY_FORM_PROP","BY","UA","LANGUAGE","COUNTRY","RU_RU","BY_RU","UA_RU","RU_EN","BY_EN","UA_EN","COUNTRY_ITEMS","COUNTRY_COMPLIMENTARY","withStyles","theme","table","isTable","classes","gap","FormControl","fullWidth","InputLabel","Select","labelId","MenuItem","lang","setValues","currentValue","setCurrentValue","includes","country","ME_ERROR_ENUM","countryValue","city","setCity","filteredData","setFilteredData","data","debouncedValue","delay","setDebouncedValue","handler","useDebounce","getCityList","filter","item","toLowerCase","splice","required","onKeyPress","onCity","key","LocationSelect","createStyles","inputProps","Box","Grow","in","Alert","severity","BasicJoinForm","withOptions","submitButtonText","showAlert","onCloseAlert","password","validate","errors","language","console","log","localStorage","setItem","saveLang","onClose","transformOrigin","timeout","handleChange","form","disabled","isValid","dirty","Colors","gridTemplateColumns","columnGap","profileDataRoot","tableRoot","test","ROUTES","Badge","forwardRef","statusClass","colorClass","classNameProp","status","rest","successStyles","fontWeight","lineHeight","WARNING","SUCCESS","SUCCEEDED","INFO","FAILED","memo","ProfileDataTable","location","counterWidget","isActivated","weatherWidget","Table","TableBody","TableRow","TableCell","align","ON","OFF","ProfileData","settings","onEdit","options","Typography","contentWrapper","paddingBottom","RadioGroup","row","o","FormControlLabel","control","Radio","commonRradioOptions","colorOptions","LIGHT","DART","ProfileEditForm","colorScheme","ProfileEdit","toProfile","setOptions","Profile","isEdit","setIsEdit","toEdit","useCallback","publicRoutes","path","JOIN_ROUTE","Component","to","REGISTRATION_ROUTE","size","LOGIN_ROUTE","history","useHistory","error","AUTH","login","push","CHAT_ROUTE","timeOutId","setShowAlert","onShowAlert","registration","privateRoutes","PROFILE_ROUTE","description","iconWrapper","icon","Weather","utility","fetchWeather","weather","src","Math","ceil","main","temp","feels_like","NavBar","isAuthorized","isLoginPage","pathname","isLJoinPage","isProfilePage","isChatPage","pageSelector","useLocation","toLogout","logout","AppBar","elevation","retryCount","baseURL","chatApiInstance","axios","withCredentials","interceptors","request","use","config","headers","Authorization","getItem","TOKEN","response","originalRequest","_isRetry","get","accessToken","AuthService","instance","post","delete","getLSData","MeStore","user","setMe","setAuthData","warn","setError","refresh","getLang","AppRoute","component","exact","dayFactApiInstance","DayFactService","WeatherService","payload","chatInstance","UtilityStore","fact","fetchFact","setFact","contents","setWeather","SettingsStore","preparedOptions","OPTIONS","saveOptions","LOCALES","ru","en","createTheme","palette","primary","secondary","bg","light","text","App","utilityStore","setSocket","connect","setLoading","WebSocket","onmessage","messageEvent","setMessages","parse","onopen","setConnected","onclose","onerror","defaultLocale","locale","ThemeProvider","Provider","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7b0a0dfd.chunk.js","sourcesContent":["import * as React from \"react\";\n\nlet defaultValue: any;\nexport let MyContext: React.Context<any>;\nMyContext = React.createContext (defaultValue);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const title = {\n        fontFamily:'monospace',\n        fontSize:'1.75rem'\n}\n","import { makeStyles } from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\nexport const useStyles = makeStyles({\n    title: {\n        display:\"grid\",\n        // gridTemplateRows:'1fr 1fr',\n        gridAutoRows:'auto',\n        justifyItems:\"center\",\n        minHeight:90,\n        alignItems:'center',\n        '&>div:first-child':{\n            ...title,\n            textTransform:\"uppercase\",\n        }\n    },\n    onlineCounter:{\n        color:\"grey\"\n    },\n    buttonsWrapper:{\n        display:'grid',\n        gridTemplateRows: '1fr 1fr',\n        rowGap:'10px'\n    },\n\n});","import data from \"./city.list.json\"\n\nexport const MOBIL = 520;\nexport const weatherData = data as IWeatherOption[]\n\nexport const TABLE_WIDTH = 400;\n\ninterface IWeatherOption {\n    \"id\": number,\n    \"name\": string,\n    \"state\": string,\n    \"country\": string,\n    \"coord\": {\n        \"lon\": number,\n        \"lat\": number\n    }\n};\n\nexport enum SWITCHER {\n    ON = 'on',\n    OFF = 'of'\n};\n\nexport enum THEME {\n    LIGHT = 'light',\n    DART = 'dark'\n}\n\nexport enum LS {\n    OPTIONS = \"OPTIONS\",\n    TOKEN = 'token',\n    LANG = 'lang'\n}","import { makeStyles } from '@mui/styles';\n\n\nexport const useStyles = makeStyles({\n    timeRoot:{\n       fontSize:'1rem',\n        fontFamily:\"monospace\",\n        color:'gray',\n        whiteSpace:'nowrap'\n    },\n});","\n\n\nexport const getTime = (date:Date) => {\n    const getTwoDig = (time:number) => {\n        const string = time.toString()\n        return string.length > 1 ? string : `0${string}`\n    }\n    const hour = getTwoDig(date.getHours())\n    const min = getTwoDig(date.getMinutes())\n    const sec = getTwoDig(date.getSeconds())\n    return `${ hour }: ${min }: ${ sec }`\n}\n\nconst timeFromUnix = (date:number) => {\n    return new Date(date * 1000)\n}\n\nexport const getDate = (date:number) => {\n    const fullDate = timeFromUnix(date)\n    const year = fullDate.getFullYear()\n    const month = fullDate.getMonth()\n    const day = fullDate.getDay()\n    return `${ year }: ${month }: ${ day }`\n}\nexport const timeConverter = (UNIX_timestamp:number) => {\n    // weird\n    const a = new Date(UNIX_timestamp / 1000);\n    const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n    const year = a.getFullYear();\n    const month = months[a.getMonth()];\n    const date = a.getDate();\n    const hour = a.getHours();\n    const min = a.getMinutes();\n    const sec = a.getSeconds();\n    const time = date + ' ' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\n    return time;\n}","import * as React from 'react';\nimport {LegacyRef, useEffect, useRef, useState} from 'react';\nimport {useStyles} from './styles'\nimport {getTime} from \"../../utils/time\";\n\n\ninterface IProps {\n}\n\nexport const Clock: React.FC<IProps> = (props) => {\n    const {children} = props;\n    const [time, setTime] = useState ( new Date () );\n    const styles = useStyles();\n\n\n    useEffect ( () => {\n        const clearId = setTimeout ( () => setTime ( new Date () ), 1000 );\n        return () => clearTimeout ( clearId );\n    }, [time] );\n\n    return (\n        <div className={styles.timeRoot}>\n            { getTime(time)}\n        </div>\n    );\n};","// @flow\nimport {CircularProgress, Container, Grid} from '@mui/material';\nimport * as React from 'react';\n\n\ntype Props = {\n\n};\nexport const Loader = (props: Props) => {\n    return (\n        <Container>\n            <Grid container alignItems={\"center\"} justifyContent={\"center\"} style={{height: window.innerHeight-30}}>\n                    <CircularProgress color=\"primary\" />\n            </Grid>\n        </Container>\n    );\n};","import {makeStyles} from \"@mui/styles\";\n\nexport const useStyles = makeStyles({\n    messagesRoot: {\n        maxHeight: window.innerHeight - 30\n    },\n    messages: {\n        width: '100%',\n        height: '70vh',\n        backgroundColor: '#354765',\n        overflowY: 'auto'\n    },\n    newMessageRoot: {\n        position: 'relative',\n        width: '100%',\n        rowGap: 20,\n        color: '#ffffff'\n    },\n    textField:{\n        width:'80%'\n    },\n    btn:{\n        \"&.MuiButton-contained\": {\n            backgroundColor: '#3a64a8',\n            border:'none',\n            color: '#ffffff',\n            width:'20%',\n            height:56,\n            '&:hover':{\n                backgroundColor: '#7094d2',\n                color: '#354765',\n            }\n        },\n    }\n})","import { makeStyles } from '@mui/styles';\nimport {MOBIL} from \"../../utils/const\";\n\n\nexport const useStyles = makeStyles({\n    mainBlock:{\n        minWidth: '40vw',\n        margin: 10,\n        borderRadius: '4%',\n        maxWidth: '60%',\n        width: 'fit-content',\n        padding: 15,\n        display: 'grid',\n        justifyContent:'flexStart',\n        rowGap: 20,\n        fontFamily: 'serif',\n        position:'relative'\n    },\n    info: {\n        color:'#afbed2',\n        margin:'20px 30px'\n    },\n    name:{\n        display:'block',\n        maxWidth:'max-content'\n    },\n    copy:{\n        cursor:\"pointer\",\n        position:\"absolute\",\n        opacity:0.7,\n        top:8\n\n    },\n    date:{\n        fontSize:'0.7em'\n    },\n    [`@media (max-width:${MOBIL}px)`]: {\n        mainBlock:{\n            minWidth: '70vw',\n            fontSize: '1.4em'\n        },\n    }\n});","import {makeAutoObservable} from \"mobx\";\n\n\nexport enum MESSAGE_ENUM {\n    MESSAGE = 'message',\n    QUIT = 'quit',\n    CONNECTION = 'connection'\n}\n\n\nexport interface IMessage {\n    event: MESSAGE_ENUM;\n    id: string;\n    name: string;\n    body: string;\n    connectionCounter: number;\n}\n\n\ninterface IChat {\n    messages: IMessage[];\n    messageValue: string;\n    isLoading: boolean;\n    isConnected: boolean;\n    connectionCounter?: number;\n    setConnected: (isConnected: boolean) => void;\n    setLoading: (isLoading: boolean) => void;\n    setMessageValue: (value: string) => void;\n    setMessages: (messages: any) => void;\n}\n\nclass ChatStore implements IChat {\n    messages = [] as IMessage[];\n    messageValue = '';\n    isLoading = false;\n    isConnected = false;\n    connectionCounter = 0;\n\n    constructor() {\n        makeAutoObservable ( this, {}, {deep: true} );\n    }\n\n\n    setConnected(isConnected: boolean) {\n        this.isConnected = isConnected;\n    };\n\n    setLoading(isLoading: boolean) {\n        this.isLoading = isLoading;\n    };\n\n    setMessageValue(value: string) {\n        this.messageValue = value;\n    };\n\n    setMessages(messages: any) {\n        this.messages =  [...this.messages,...messages, ];\n\n    };\n\n    setConnectionCounter(count: number) {\n        this.connectionCounter = count;\n    };\n}\n\nexport default ChatStore;","export enum LANG {\n    EN = 'en',\n    RU = 'ru'\n};\n\nexport enum COUNTRY_RU {\n    UA = 'Украина',\n    RU = 'Россия',\n    BY = 'Белорусия',\n};\nexport enum COUNTRY_EN {\n    UA = 'Ukraine',\n    RU = 'Russia',\n    BY = 'Belarus',\n};\n\nexport enum COUNTRY_CODE {\n    'Украина' = 'ua',\n    'Россия' = 'ru',\n    'Белорусия' = 'by',\n    'Ukraine' = 'ua',\n    'Russia' = 'ru',\n    'Belarus' = 'by',\n};\nexport const COUNTRY_CODE_RU = {\n    ['ua']: 'Украина',\n    ['ru']: 'Россия',\n    ['by']: 'Белорусия',\n};\nexport const COUNTRY_CODE_EN = {\n    ['ua']: 'Ukraine',\n    ['ru']: 'Russia',\n    ['by']: 'Belarus',\n};\n\nexport const COUNTRY_LANG_OBJ = {\n    [LANG.EN]:Object.keys(COUNTRY_EN),\n    [LANG.RU]:Object.keys(COUNTRY_RU),\n}\nexport const LANG_OBJ = Object.create(LANG);\nexport const COUNTRY_OBJ_RU = Object.create(COUNTRY_RU);\nexport const COUNTRY_OBJ_EN = Object.create(COUNTRY_EN);\nexport const COUNTRY_CODE_OBJ = Object.create(COUNTRY_CODE);\n\nexport type CountryCodeType = 'ua' | 'ru' | 'by'\n","import * as React from 'react';\nimport {useContext} from 'react';\nimport {Grid} from \"@mui/material\";\nimport ContentCopyIcon from '@mui/icons-material/ContentCopy';\nimport {useStyles} from \"./styles\";\nimport {MESSAGE_ENUM} from \"../../state/chatStore\";\nimport {observer} from \"mobx-react-lite\";\nimport {timeConverter} from \"../../utils/time\";\nimport {MyContext} from \"../../state/context\";\nimport {FormattedMessage} from \"react-intl\";\n\n\ntype Props = {\n    isMe: boolean;\n    message: any;\n};\nexport const Message: React.FC<Props> = observer((props) => {\n    const {isMe, message} = props;\n    const [chat, me, socket] = useContext(MyContext);\n    const styles = useStyles();\n    const onCopy = () => navigator.clipboard.writeText(message.body)\n    if (message.event === MESSAGE_ENUM.CONNECTION) {\n        chat.setConnectionCounter(message.connectionCounter);\n    }\n    const style = {\n        backgroundColor: isMe ? '#3a64a8' : '#536f9b',\n        color: isMe ? '#f6dbaa' : '#eee4cc',\n        marginLeft: isMe ? 'auto' : '10%',\n        marginRight: isMe ? '10%' : 0,\n        paddingRight: 10\n\n    };\n\n    return (\n        <Grid direction={\"column\"} container>\n            {message.event === MESSAGE_ENUM.MESSAGE\n                ? <div className={styles.mainBlock} style={style}>\n                    <h3 className={styles.name}\n                        style={\n                            {\n                                justifySelf: `${!isMe && 'flex-end'}`,\n                                borderBottom: `2px solid ${isMe ? '#f6dbaa' : '#eee4cc'}`\n                            }\n                        }>\n                        {message.name?.toUpperCase()}\n                    </h3>\n                    <span>{message.body}</span>\n                    <span className={styles.date}>{timeConverter(message.date * 1000)}</span>\n                    <div onClick={onCopy} style={isMe ? {right: 2} : {left: 6}\n                    } title={'скопировать сообщение'} className={styles.copy}>\n                        <ContentCopyIcon/>\n                    </div>\n                </div>\n                : message.event === MESSAGE_ENUM.CONNECTION\n                    ? <span className={styles.info}>\n                        {message.name} {'\\u00A0'}\n                        <FormattedMessage id={'chat.message.join'}/>\n                        </span>\n                    : <span className={styles.info}>{message.name}  {'\\u00A0'}\n                        <FormattedMessage id={'chat.message.out'}/>\n                    </span>\n            }\n        </Grid>\n    );\n});","import {makeStyles} from \"@mui/styles\";\n\nexport const useStyles = makeStyles({\n    emojiRoot: {\n        position: \"absolute\",\n        zIndex: 1,\n        top: 10,\n\n    },\n\n    picker:{\n        top:-350\n    },\n\n})","import * as React from 'react';\nimport {useContext, useState} from 'react';\nimport classNames from \"classnames\";\nimport Picker, {SKIN_TONE_MEDIUM_DARK} from \"emoji-picker-react\";\nimport {Button} from \"@mui/material\";\nimport EmojiEmotionsIcon from \"@mui/icons-material/EmojiEmotions\";\nimport {useStyles} from \"./styles\";\nimport {MyContext} from \"../../state/context\";\nimport {observer} from \"mobx-react-lite\";\n\n\n\ninterface IProps  {\n    frameWidth?:number\n}\n\nexport const Emoji: React.FC<IProps> = observer((props) => {\n    const {children,frameWidth = 0} = props;\n    const [chat,me,socket] = useContext ( MyContext );\n    const styles = useStyles ();\n    const [isShowEmoji, setIsShowEmoji] = useState ( false );\n    const showImoji = () => setIsShowEmoji ( true );\n    const hideImoji = () => setIsShowEmoji ( false );\n    const onEmojiClick = (event: any, emojiObject: any) => {\n        chat.setMessageValue ( emojiObject.emoji ) ;\n    };\n    return (\n        <div style={{right:`${frameWidth * 0.2}px`}} className={ classNames ( styles.emojiRoot, {[styles.picker]: isShowEmoji} ) }\n             onBlur={ hideImoji }>\n            { isShowEmoji\n                ? <Picker native groupNames={ {smileys_people: \"PEOPLE\"} } disableAutoFocus={ true }\n                          onEmojiClick={ onEmojiClick } skinTone={ SKIN_TONE_MEDIUM_DARK }/>\n                : <Button onClick={ showImoji }><EmojiEmotionsIcon/></Button> }\n        </div>\n    );\n});","import * as React from 'react';\nimport {useContext, useEffect, useRef, useState} from 'react';\nimport {Button, Container, Grid, TextField} from '@mui/material';\nimport {Loader} from \"../Loader/Loader\";\nimport {useStyles} from \"./styles\";\nimport {Message} from \"../Message/Message\";\nimport {Emoji} from \"../Emoji/Emoji\";\nimport {observer} from \"mobx-react-lite\";\nimport {IMessage} from '../../state/chatStore';\nimport {MyContext} from \"../../state/context\";\nimport {useFormik} from 'formik';\nimport MeStore from \"../../state/meStore\";\nimport {FormattedMessage} from \"react-intl\";\n\n\ntype Props = {}\n\n\nexport const Chat: React.FC<Props> = observer ( ((props) => {\n    const [chat,me, socket] = useContext ( MyContext );\n    const chatRef = useRef<HTMLDivElement> ( null );\n    const styles = useStyles ();\n    const sendMessage = () => {\n        if (!chat.messageValue.trim ()) return;\n        const message = {\n            event: 'message',\n            id: Date.now ().toString (),\n            name: me.me.email,\n            body: chat.messageValue,\n        };\n        socket?.send ( JSON.stringify ( message ) );\n        chat.setMessageValue ( '' );\n    };\n\n    const formik = useFormik ( {\n        initialValues: {\n            message: 'введите сообщение',\n        },\n        onSubmit: (values) => sendMessage (),\n    } );\n\n    const messagesArray = chat.messages;\n    const messagesLength = messagesArray.length;\n\n    const scrollToBottom = () => {\n        chatRef.current?.scrollTo ( 0, chatRef.current.scrollHeight );\n    };\n\n    useEffect ( () => {\n        scrollToBottom ();\n    } );\n\n    if (chat.isLoading) return <Loader/>;\n    return (\n        <Container>\n            <form onSubmit={ formik.handleSubmit }>\n                <Grid container className={ styles.messagesRoot } alignItems={ \"center\" }>\n                    <Grid ref={ chatRef } className={ styles.messages }>\n                        { messagesLength && chat.messages.map ( (mes: IMessage) => {\n                            const isMe = me.me.email === mes.name;\n                            return <Message key={ mes.id } isMe={ isMe } message={ mes }/>;\n                        } ) }\n                    </Grid>\n                </Grid>\n                <Grid className={ styles.newMessageRoot } container direction={ 'row' } alignItems={ 'flex-end' }>\n                    <TextField id={ 'message' } name={ 'message' } label={ <FormattedMessage id={'message.label'}/> } variant=\"filled\"\n                               autoComplete={ 'off' } onChange={ e => chat.setMessageValue ( e.currentTarget.value ) }\n                               value={ chat.messageValue } className={ styles.textField }\n                    />\n                    <Emoji frameWidth={ chatRef.current?.clientWidth }/>\n                    <Button type={ 'submit' } variant={ \"contained\" } className={styles.btn}>\n                        <strong>\n                        <FormattedMessage id={'button.message.send'}/>\n                        </strong>\n                    </Button>\n                </Grid>\n            </form>\n        </Container>\n    );\n}) );","import {makeStyles} from \"@mui/styles\";\n\n\nexport const useStyles = makeStyles ( {\n    root: {\n        marginTop: '5%',\n        position: 'relative',\n\n    },\n    selectWrapper:{\n        maxWidth:200,\n        alignContent:\"center\"\n    },\n    alert: {\n        position: \"absolute\",\n        width: 300,\n        right:'25%',\n        opacity:0.7,\n        zIndex: 0,\n        top:'5%',\n\n    },\n    fieldWrapper:{\n        position:'relative'\n    },\n    validatorMessage:{\n        position: \"absolute\",\n        top:0,\n        right:'-124px',\n        width:120\n    }\n} );","import {LANG_OBJ, COUNTRY_OBJ_RU, COUNTRY_OBJ_EN, LANG} from \"../App/const\";\n\nexport const LANG_FORM_PROP: ILangForm = {\n    10: LANG_OBJ.RU,\n    20: LANG_OBJ.EN,\n\n}\nexport const COUNTRY_FORM_PROP: ICountryForm = {\n    10: COUNTRY_OBJ_RU.RU,\n    20: COUNTRY_OBJ_RU.BY,\n    30: COUNTRY_OBJ_RU.UA,\n    40: COUNTRY_OBJ_EN.RU,\n    50: COUNTRY_OBJ_EN.BY,\n    60: COUNTRY_OBJ_EN.UA,\n\n}\n\nexport const LANGUAGE = {\n    RU: LANG_FORM_PROP[\"10\"],\n    EN: LANG_FORM_PROP[\"20\"]\n}\nexport const COUNTRY = {\n    RU_RU: COUNTRY_FORM_PROP[\"10\"],\n    BY_RU: COUNTRY_FORM_PROP[\"20\"],\n    UA_RU: COUNTRY_FORM_PROP[\"30\"],\n    RU_EN: COUNTRY_FORM_PROP[\"40\"],\n    BY_EN: COUNTRY_FORM_PROP[\"50\"],\n    UA_EN: COUNTRY_FORM_PROP[\"60\"]\n}\n\n\nexport const COUNTRY_ITEMS:ICountryItems = {\n    [LANG.RU]:[COUNTRY.RU_RU, COUNTRY.UA_RU, COUNTRY.BY_RU],\n    [LANG.EN]:[COUNTRY.RU_EN, COUNTRY.UA_EN, COUNTRY.BY_EN]\n}\nexport const COUNTRY_COMPLIMENTARY = {\n    [COUNTRY.RU_RU]:COUNTRY.RU_EN,\n    [COUNTRY.UA_RU]:COUNTRY.UA_EN,\n    [COUNTRY.BY_RU]:COUNTRY.BY_EN,\n    [COUNTRY.RU_EN]:COUNTRY.RU_RU,\n    [COUNTRY.UA_EN]:COUNTRY.UA_RU,\n    [COUNTRY.BY_EN]:COUNTRY.BY_RU\n}\n\ninterface ILangForm {\n    [propName: number]: typeof LANG_OBJ,\n}\n\ninterface ICountryForm {\n    [propName: number]: typeof COUNTRY_OBJ_RU | typeof COUNTRY_OBJ_EN,\n}\n\ninterface ICountryItems {\n    [propName: string]: LANG[],\n}\n","import * as React from 'react';\nimport {FormControl, Grid, InputLabel, MenuItem, Select, SelectChangeEvent} from \"@mui/material\";\nimport {FormattedMessage} from \"react-intl\";\nimport {LANGUAGE} from \"../../BasicJoinForm/const\";\nimport {LANG} from \"../../App/const\";\nimport styles from \"./styles\";\nimport {ReactNode} from \"react\";\nimport classNames from \"classnames\";\nimport {withStyles, WithStyles} from \"@mui/styles\";\n\n\nconst LangSelect: React.FC<IProps> = (props) => {\n    const {children,onChange,isTable,classes} = props;\n    return (\n        <Grid classes={{root: classNames(classes.root, {[classes.table]: isTable})}}\n              container\n              justifyContent={isTable ? \"space-between\" : \"center\"} alignItems={\"center\"}\n              direction={'row'} gap={2}>\n            {isTable && <FormattedMessage id={'language'}/>}\n            <FormControl fullWidth classes={{root: classes.selectWrapper}}>\n                {!isTable && <InputLabel id=\"select-label\">\n                    <FormattedMessage id={'language'}/>\n                </InputLabel>}\n                <Select\n                    labelId=\"select-label\"\n                    id=\"lang\"\n                    label={!isTable && <FormattedMessage id={'language'}/>}\n                    name=\"lang\"\n                    onChange={onChange}\n                    defaultValue={LANGUAGE.RU}\n                >\n                    <MenuItem value={LANGUAGE.RU}>{LANG.RU}</MenuItem>\n                    <MenuItem value={LANGUAGE.EN}>{LANG.EN}</MenuItem>\n                </Select>\n            </FormControl>\n        </Grid>\n    );\n};\n\nexport default withStyles(styles)(LangSelect);\n\n\ninterface IProps extends WithStyles<typeof styles> {\n    onChange: (event: SelectChangeEvent<unknown>, child: ReactNode) => void;\n    isTable?: boolean;\n}","import {ITheme} from \"../../App/theme/theme\";\nimport {TABLE_WIDTH} from \"../../../utils/const\";\n\n\nexport default (theme:ITheme) => ( {\n    root:{},\n    table:{\n        width: `${TABLE_WIDTH}px !important`\n    },\n    selectWrapper:{\n        maxWidth:200,\n        alignContent:\"center\"\n    },\n} );","import * as React from 'react';\nimport {ReactNode, useEffect, useState} from 'react';\nimport {FormControl, Grid, InputLabel, MenuItem, Select, SelectChangeEvent} from \"@mui/material\";\nimport {FormattedMessage} from \"react-intl\";\nimport styles from \"./styles\";\nimport {LANG} from \"../../App/const\";\nimport {COUNTRY, COUNTRY_COMPLIMENTARY, COUNTRY_ITEMS} from \"../../BasicJoinForm/const\";\nimport classNames from \"classnames\";\nimport {WithStyles, withStyles} from \"@mui/styles\";\n\n\nconst CountrySelect: React.FC<IProps> = (props) => {\n    const {children, onChange, lang, isTable, classes, value} = props;\n    const [values, setValues] = useState(COUNTRY_ITEMS[LANG.EN])\n    const [currentValue, setCurrentValue] = useState(lang === LANG.RU ? COUNTRY.UA_RU : COUNTRY.UA_EN)\n\n\n    useEffect(() => {\n        setValues(COUNTRY_ITEMS[lang])\n    }, [lang])\n\n    useEffect(() => {\n        if (!values.includes(value)) {\n            setCurrentValue(COUNTRY_COMPLIMENTARY[value as any])\n        } else {\n            setCurrentValue(value)\n        }\n    }, [values, value])\n\n\n    return (\n        <Grid classes={{root: classNames(classes.root, {[classes.table]: isTable})}}\n              container\n              justifyContent={isTable ? \"space-between\" : \"center\"} alignItems={\"center\"}\n              direction={'row'} gap={2}>\n\n            {isTable && <FormattedMessage id={'country'}/>}\n\n            <FormControl fullWidth classes={{root: classes.selectWrapper}}>\n                {!isTable && <InputLabel id=\"select-country-label\">\n                    <FormattedMessage id={'country'}/>\n                </InputLabel>}\n                <Select\n                    labelId=\"select-country-label\"\n                    id=\"country\"\n                    label={!isTable && <FormattedMessage id={'country'}/>}\n                    name=\"country\"\n                    value={currentValue}\n                    onChange={onChange}>\n                    {values.map(country => <MenuItem value={country}>{country}</MenuItem>)}\n                </Select>\n\n            </FormControl>\n        </Grid>\n    );\n};\n\nexport default withStyles(styles)(CountrySelect);\n\ninterface IProps extends WithStyles<typeof styles> {\n    onChange: (event: SelectChangeEvent<unknown>, child: ReactNode) => void;\n    lang: any;\n    isTable?: boolean;\n    value: LANG\n}\n","import {TABLE_WIDTH} from \"../../../utils/const\";\nimport {ITheme} from \"../../App/theme/theme\";\n\n\nexport default (theme: ITheme) => ({\n    root: {},\n    table: {\n        width: `${TABLE_WIDTH}px !important`\n    },\n    selectWrapper: {\n        maxWidth: 200,\n        alignContent: \"center\"\n    },\n});","import * as React from 'react';\nimport {ReactNode, useEffect, useState} from 'react';\nimport {FormControl, Grid, InputLabel, MenuItem, Select, SelectChangeEvent} from \"@mui/material\";\nimport {FormattedMessage} from \"react-intl\";\nimport styles from \"./styles\";\nimport useDebounce from \"../../../utils/hooks/useDebounce\";\nimport {COUNTRY_CODE_OBJ} from \"../../App/const\";\nimport {weatherData} from \"../../../utils/const\";\nimport {WithStyles, withStyles} from \"@mui/styles\";\nimport classNames from \"classnames\";\n\n\nconst CitySelect: React.FC<IProps> = (props) => {\n    const {children, onChange, countryValue, isTable, classes,value} = props;\n    const [city, setCity] = useState<string>('')\n    const [filteredData, setFilteredData] = useState<Array<any>>([])\n    const data = [...weatherData]\n\n    const onCity = (value: string) => {\n        setCity(`${city}${value}`)\n    }\n    const debouncedValue = useDebounce(city , 2000)\n    const getCityList = () => {\n        const country = COUNTRY_CODE_OBJ[countryValue]?.toUpperCase() || countryValue;\n        setFilteredData(\n            [...data].filter(item => {\n                if (item.country === country) {\n                    return item.name.toLowerCase().includes((debouncedValue || value).toLowerCase())\n                }\n            }).splice(0, 9))\n        setCity('')\n    }\n\n    useEffect(() => {\n        if (debouncedValue) {\n            getCityList()\n        }\n    }, [debouncedValue, countryValue]);\n\n    useEffect(() => {\n        getCityList()\n\n    }, []);\n\n\n    return (\n        <Grid classes={{root: classNames(classes.root, {[classes.table]: isTable})}}\n              container\n              justifyContent={isTable ? \"space-between\" : \"center\"} alignItems={\"center\"}\n              direction={'row'} gap={2}>\n\n            {isTable && <FormattedMessage id={'city'}/>}\n\n            <FormControl fullWidth classes={{root: classes.selectWrapper}}>\n                {!isTable && <InputLabel id=\"select-city-label\">\n                    {city || < FormattedMessage id={'city'}/>}\n                </InputLabel>}\n                <Select\n                    required\n                    labelId=\"select-city-label\"\n                    id=\"city\"\n                    label={!isTable && <FormattedMessage id={'city'}/>}\n                    name=\"city\"\n                    onChange={onChange}\n                    value={value}\n                    onKeyPress={(event) => onCity(event.key)}\n                >\n                    <MenuItem value=\"\"><em> <FormattedMessage id={'none'}/></em></MenuItem>\n                    {filteredData.map((city, id) => {\n                        return < MenuItem key={city.id} value={city.name}>{city.name}</MenuItem>\n                    })}\n                </Select>\n            </FormControl>\n        </Grid>\n    );\n};\n\nexport default withStyles(styles)(CitySelect)\n\ninterface IProps extends WithStyles<typeof styles> {\n    onChange: (event: SelectChangeEvent<unknown>, child: ReactNode) => void;\n    countryValue: string;\n    isTable?: boolean;\n    value: string;\n}\n","export enum ME_ERROR_ENUM  {\n    AUTH = \"AUTH\",\n}","import {TABLE_WIDTH} from \"../../../utils/const\";\nimport {ITheme} from \"../../App/theme/theme\";\n\n\nexport default (theme:ITheme) => ( {\n    root:{},\n    table:{\n        width: `${TABLE_WIDTH}px !important`\n    },\n    selectWrapper:{\n        maxWidth:200,\n        alignContent:\"center\"\n    },\n} );","import React, { useState, useEffect } from 'react';\n\n// Наш хук\nexport default function useDebounce(value:any, delay:number) {\n    // Состояние и сеттер для отложенного значения\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(\n        () => {\n            // Выставить debouncedValue равным value (переданное значение)\n            // после заданной задержки\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n\n            // Вернуть функцию очистки, которая будет вызываться каждый раз, когда ...\n            // ... useEffect вызван снова. useEffect будет вызван снова, только если ...\n            // ... value будет изменено (смотри ниже массив зависимостей).\n            // Так мы избегаем изменений debouncedValue, если значение value ...\n            // ... поменялось в рамках интервала задержки.\n            // Таймаут очищается и стартует снова.\n            // Что бы сложить это воедино: если пользователь печатает что-то внутри ...\n            // ... нашего приложения в поле поиска, мы не хотим, чтобы debouncedValue...\n            // ... не менялось до тех пор, пока он не прекратит печатать дольше, чем 500ms.\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        // Вызывается снова, только если значение изменится\n        // мы так же можем добавить переменную \"delay\" в массива зависимостей ...\n        // ... если вы собираетесь менять ее динамически.\n        [value]\n    );\n\n    return debouncedValue;\n}","import * as React from 'react';\nimport CountrySelect from \"../CountrySelect\";\nimport CitySelect from \"../CitySelect\";\nimport {SelectChangeEvent} from \"@mui/material\";\nimport {ReactNode} from \"react\";\nimport {LANG} from \"../../App/const\";\n\n\nexport const LocationSelect: React.FC<IProps> = (props) => {\n    const {children, onChange, lang, country, isTable,city} = props;\n    return (\n        <>\n            <CountrySelect value={country} isTable={isTable} lang={lang} onChange={onChange}/>\n            {country && (\n                <CitySelect value={city} isTable={isTable} onChange={onChange} countryValue={country}/>\n            )}\n        </>\n    );\n};\n\n\ninterface IProps {\n    onChange: (event: SelectChangeEvent<unknown>, child: ReactNode) => void;\n    lang: any;\n    country: LANG;\n    city: string;\n    isTable?: boolean;\n}\n","import * as React from 'react';\nimport {ChangeEventHandler} from 'react';\nimport {WithStyles, withStyles} from \"@mui/styles\";\nimport styles from './styles';\nimport {Alert, Box, Grid, Grow, InputBaseComponentProps, StandardTextFieldProps, TextField} from \"@mui/material\";\nimport classNames from \"classnames\";\n\n\nexport const CommonTextField: React.FC<IProps> = (props) => {\n    const {children, classes, onChange, alert, value, isTable, title, id, variant,required,inputProps,type} = props;\n    return (\n        <Grid classes={{root: classNames(classes.root, {[classes.table]: isTable})}}\n              container\n              justifyContent={isTable ? \"space-between\" : \"center\"} alignItems={\"center\"}\n              direction={'row'} gap={2}>\n            {(isTable && title) && title}\n            <TextField variant={variant}\n                       onChange={onChange}\n                       value={value}\n                       inputProps={inputProps}\n                       type={type}\n                       required={required}\n                       id={id} name={id} label={!isTable && title}\n            />\n            {alert && <Box className={classes.validatorMessage}>\n                <Grow in={!!alert}>{\n                    <Alert severity=\"error\">{alert}</Alert>\n                }\n                </Grow>\n            </Box>}\n        </Grid>\n    );\n};\n\nexport default withStyles(styles)(CommonTextField);\n\ninterface IProps extends WithStyles<typeof styles> {\n    isTable?: boolean;\n    onChange: ChangeEventHandler<HTMLInputElement | HTMLTextAreaElement>;\n    value: string;\n    alert?: string\n    title?: React.ReactNode;\n    id: string;\n    variant?: StandardTextFieldProps[\"variant\"]\n    type?: StandardTextFieldProps[\"type\"]\n    required?: boolean;\n    inputProps?:  InputBaseComponentProps | undefined;\n}","import {createStyles} from \"@mui/styles\";\nimport {TABLE_WIDTH} from \"../../../utils/const\";\nimport {ITheme} from \"../../App/theme/theme\";\n\n\nexport default (theme: ITheme) => createStyles({\n    root: {\n        position: \"relative\",\n    },\n    table: {\n        width: `${TABLE_WIDTH}px !important`\n    },\n    validatorMessage: {\n        position: \"absolute\",\n        top: 0,\n        right: '-124px',\n        width: 120\n    }\n});","import {Alert, Box, Button, Grid, Grow, TextField} from '@mui/material';\nimport * as React from 'react';\nimport {useContext, useEffect} from 'react';\nimport {useFormik} from \"formik\";\nimport {MyContext} from \"../../state/context\";\nimport {useStyles} from \"./styles\";\nimport {COUNTRY_CODE_OBJ, LANG} from \"../App/const\";\nimport {LANGUAGE} from \"./const\";\nimport {validate} from \"./validator\";\nimport {LS} from \"../../utils/const\";\nimport {FormattedMessage} from \"react-intl\";\nimport LangSelect from \"../common/LanguageSelect\";\nimport {LocationSelect} from \"../common/LocationSelect\";\nimport CommonTextField from '../common/CommonTextFileld';\n\n\nexport const BasicJoinForm: React.FC<IProps> = (props) => {\n    const styles = useStyles();\n    const {onSubmit, children, title, withOptions = false, submitButtonText, showAlert = false, onCloseAlert,} = props;\n    const [chat, me, socket] = useContext(MyContext);\n\n    const formik = useFormik({\n        initialValues: {\n            name: '',\n            email: '',\n            password: '',\n            country: '',\n            city: '',\n            lang: LANGUAGE.RU,\n        },\n        validate: (values) => validate(values, withOptions),\n\n        onSubmit: (values) => {\n            const {name, password, city, country, lang, email} = values;\n            try {\n                onSubmit && onSubmit({name, password, city, country: COUNTRY_CODE_OBJ[country], language: lang, email});\n            } catch (e) {\n                console.log(e);\n            }\n\n        },\n    });\n\n    useEffect(() => {\n        localStorage.setItem(LS.LANG, formik.values.lang.toLowerCase());\n        me.saveLang(formik.values.lang.toLowerCase())\n    }, [formik.values.lang]);\n\n\n    return (\n        <form className={styles.root} onSubmit={formik.handleSubmit}>\n            <Box className={styles.alert}>\n                <Grow in={showAlert}>{\n                    <Alert onClose={onCloseAlert} severity=\"info\">\n                        <FormattedMessage id={withOptions\n                            ? 'alert.name.sign.in'\n                            : 'alert.name.sign.up'}/>\n                    </Alert>\n                }\n                </Grow>\n                <Grow\n                    in={showAlert}\n                    style={{transformOrigin: '0 0 0'}}\n                    {...(showAlert ? {timeout: 1000} : {})}\n                >\n                    {<Alert severity=\"info\">\n                        <FormattedMessage id={withOptions\n                            ? 'alert.password.sign.in'\n                            : 'alert.password.sign.up'}/>\n                    </Alert>\n                    }\n                </Grow>\n            </Box>\n            <Grid container justifyContent={\"center\"} alignItems={\"center\"}\n                  direction={'column'} gap={2}>\n                {title}\n                {withOptions && (\n                    <LangSelect onChange={formik.handleChange}/>\n                )}\n\n                <CommonTextField id={'email'} title={<FormattedMessage id={'email'}/>} onChange={formik.handleChange}\n                                 alert={formik.errors.email} value={formik.values.email}/>\n                {withOptions && (\n                    <CommonTextField id={'name'} title={<FormattedMessage id={'name'}/>} onChange={formik.handleChange}\n                                     alert={formik.errors.name} value={formik.values.name}/>\n                )}\n\n                <CommonTextField id={'password'} title={<FormattedMessage id={'password'}/>}\n                                 onChange={formik.handleChange}\n                                 inputProps={{\n                                     autoComplete: 'new-password',\n                                     form: {\n                                         autoComplete: 'off',\n                                     },\n                                 }}\n                                 type=\"password\"\n                                 alert={formik.errors.password} value={formik.values.password}/>\n                {withOptions && (\n                    <LocationSelect city={formik.values.city} onChange={formik.handleChange} lang={formik.values.lang}\n                                    country={formik.values.country as LANG}/>\n                )\n                }\n                <Button type=\"submit\" disabled={!formik.isValid || !formik.dirty} color={'info'}\n                        variant={'contained'}>{submitButtonText}</Button>\n                {children && children}\n            </Grid>\n        </form>\n    );\n};\n\ninterface IProps {\n    onSubmit?: (values: IJoinFormValues) => void;\n    onCloseAlert?: () => void;\n    submitButtonText: React.ReactNode | string;\n    withOptions?: boolean;\n    showAlert?: boolean;\n    title?: React.ReactNode\n};\n\nexport interface IJoinFormValues {\n    name: string,\n    email: string,\n    password: string,\n    city?: string,\n    country?: string,\n    language?: any\n}\n","import {validateEmail} from \"../../utils/validator\";\nimport {IJoinFormValues} from \"./BasicJoinForm\";\nimport {FormattedMessage} from \"react-intl\";\nimport * as React from \"react\";\n\nexport const validate = (values:IJoinFormValues,withOptions:boolean) => {\n    const {name, password, city, country, language, email} = values\n    const errors: any = {};\n    if (withOptions && name.length <= 3 ) {\n        errors.name =  <FormattedMessage id={'alert.validation.symbol.three'}/> ;\n    }\n    // if (!validateEmail(email)) {\n    //     errors.email = 'Incorrect';\n    // }\n    if (password.length <= 3) {\n        errors.password =  <FormattedMessage id={'alert.validation.symbol.three'}/> ;\n    }\n    return errors\n\n}","import {makeStyles} from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles({\n    title:{\n        ...title,\n        textTransform:\"uppercase\",\n    }\n\n});","import * as React from 'react';\nimport {useContext} from 'react';\nimport {MyContext} from \"../../state/context\";\nimport {BasicJoinForm, IJoinFormValues} from \"../BasicJoinForm/BasicJoinForm\";\nimport {useStyles} from './styles'\nimport {FormattedMessage} from \"react-intl\";\nimport {useHistory, useLocation} from \"react-router-dom\";\nimport {ROUTES} from \"../../utils/routes\";\nimport {ME_ERROR_ENUM} from \"../../state/const\";\n\n\nexport const Login: React.FC = () => {\n    const styles = useStyles()\n    const [chat, me, socket] = useContext(MyContext);\n    const history = useHistory()\n\n    const onSubmit = (values:IJoinFormValues) => {\n        const {password,email} = values;\n            me.login(email, password)\n            history.push(ROUTES.CHAT_ROUTE)\n    }\n\n    return (\n        <>\n            {me.error[ME_ERROR_ENUM.AUTH] && <span>{ me.error[ME_ERROR_ENUM.AUTH]}</span>}\n            <BasicJoinForm onSubmit={onSubmit}\n                          submitButtonText={<FormattedMessage id={'button.sign.in'}/>}\n                          title={(\n                              <div className={styles.title}>\n                                  <FormattedMessage id={'button.sign.in'}/>\n                              </div>\n                          )}/>\n\n        </>\n    );\n};\n\n","export enum Colors {\n  WARNING = 'warning',\n  SUCCESS = 'success',\n  INFO = 'info',\n  FAILED = 'failed',\n  SUCCEEDED = 'succeeded',\n}\n","import {makeStyles} from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles({\n    children:{\n       display:\"grid\",\n        gridTemplateColumns:'1fr 24px',\n        columnGap:6,\n        cursor:\"pointer\"\n    },\n    title:{\n        ...title,\n        textTransform:\"uppercase\",\n    }\n\n});","import {makeStyles} from \"@mui/styles\";\n\nexport const useStyles = makeStyles({\n    root: {\n        marginTop: '4%',\n    },\n    btn: {\n        height: 100,\n        width: 300,\n\n    }\n\n})","import {makeStyles} from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles({\n    title:{\n        ...title,\n        textTransform:\"uppercase\",\n    }\n\n});","import {makeStyles} from '@mui/styles';\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles({\n    profileDataRoot:{\n        margin:'5vh auto',\n        '&>*:last-child':{\n            marginTop:20\n        }\n    },\n    tableRoot:{\n        maxWidth: '500px'\n    },\n    test:{\n        borderRadius:'6px',\n        minWidth:'100px'\n    }\n\n});","import {Chat} from \"../components/Chat/Chat\";\nimport {Login} from \"../components/Login/Login\";\nimport {Registration} from \"../components/Registration/Registration\";\nimport {JoinOptions} from \"../components/JoinOptions/JoinOptions\";\nimport {Profile} from \"../components/Profile/Profile\";\n\n\nexport enum ROUTES {\n    LOGIN_ROUTE = '/login',\n    CHAT_ROUTE = '/chat',\n    REGISTRATION_ROUTE = '/registration',\n    JOIN_ROUTE = '/join',\n    PROFILE_ROUTE = '/profile',\n}\n\nexport const publicRoutes = [\n\n    {\n        path: ROUTES.JOIN_ROUTE,\n        Component: JoinOptions,\n    },\n    {\n        path: ROUTES.LOGIN_ROUTE,\n        Component: Login,\n    },\n    {\n        path: ROUTES.REGISTRATION_ROUTE,\n        Component: Registration,\n    },\n];\n\nexport const privateRoutes = [\n    {\n        path: ROUTES.CHAT_ROUTE,\n        Component: Chat,\n    },\n    {\n        path: ROUTES.PROFILE_ROUTE,\n        Component: Profile,\n    },\n];\n\n","import classNames from 'classnames';\nimport React, {PropsWithChildren, RefAttributes} from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Colors} from './consts';\nimport styles from './styles';\nimport {withStyles, WithStyles} from \"@mui/styles\";\n\n\nexport const Badge: React.FC<IProps> = React.forwardRef<HTMLSpanElement, IProps>(\n  (props, ref) => {\n    const {\n      color,\n      classes,\n      className: classNameProp,\n      onClick,\n      children,\n      status,\n      ...rest\n    } = props;\n    let statusClass;\n    if (status && classes[status as Colors]) {\n      statusClass = classes[status as Colors];\n    }\n    let colorClass;\n    if (color && classes) {\n      colorClass = classes[color as Colors];\n    }\n    return (\n      <span\n        {...rest} // rest не убирать, тултип навешивает обработчики\n        ref={ref}\n        onClick={onClick}\n        className={classNames(classes.root, colorClass, statusClass, classNameProp)}>\n        {status ? <FormattedMessage id={`statuses.${status}`} /> : children}\n      </span>\n    );\n  }\n);\n\nexport type Status = string;\n\ntype Color = Colors | Status;\n\ninterface IProps extends PropsWithChildren<any>, WithStyles<typeof styles> {\n  className?: string;\n  color?: Color;\n  onClick?: () => void;\n  status?: Status;\n}\n\nexport default withStyles(styles)(React.memo(Badge));\n","import {Colors} from './consts';\nimport {createStyles} from \"@mui/styles\";\n\nexport default () => {\n  const defaultStyles = {\n    backgroundColor: '#EAEAEA',\n    color: '#878B88',\n  };\n  const warningStyles = {\n    backgroundColor: '#FCEFCD',\n    color: '#B49034',\n  };\n  const successStyles = {\n    backgroundColor: '#CBF5D7',\n    color: '#408453',\n  };\n  const infoStyles = {\n    backgroundColor: '#CED6FD',\n    color: '#2B4DF7',\n  };\n  const failedStyles = {\n    backgroundColor: '#FBE3E9',\n    color: '#D56E87',\n  };\n  return createStyles({\n    root: {\n      ...defaultStyles,\n      display: 'inline',\n      whiteSpace: 'nowrap',\n      fontSize: 10,\n      textTransform: 'uppercase',\n      padding: '4px 10px',\n      fontWeight: 500,\n      borderRadius: 2,\n      lineHeight: 'normal', // не убирать, влияет на высоту бейджа в таблицах\n    },\n    [Colors.WARNING]: warningStyles,\n    [Colors.SUCCESS]: successStyles,\n    [Colors.SUCCEEDED]: successStyles,\n    [Colors.INFO]: infoStyles,\n    [Colors.FAILED]: failedStyles,\n  });\n};\n","import * as React from 'react';\nimport {useStyles} from './styles';\nimport {Table, TableBody, TableCell, TableRow} from \"@mui/material\";\nimport {IUser} from \"../../service/AuthService\";\nimport Badge, {Colors} from \"../common/Badge\";\nimport {IOptions} from '../../state/settingsStore';\nimport {FormattedMessage} from \"react-intl\";\nimport {SWITCHER} from \"../../utils/const\";\n\ninterface IProfileData extends IUser, IOptions {\n}\n\ninterface IProps {\n    data: IProfileData;\n}\n\n\nexport const ProfileDataTable: React.FC<IProps> = (props) => {\n    const styles = useStyles();\n    const {children, data} = props;\n    const {id, name, language, email, location, isActivated, counterWidget, weatherWidget, theme} = data;\n    return (\n        <Table className={styles.tableRoot} aria-label=\"custom pagination table\">\n            <TableBody>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'name'}/></TableCell>\n                    <TableCell align={'right'}>{name}</TableCell>\n\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'language'}/></TableCell>\n                    <TableCell align={'right'}>{language}</TableCell>\n\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'email'}/></TableCell>\n                    <TableCell align={'right'}>{email}</TableCell>\n\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'country'}/></TableCell>\n                    <TableCell align={'right'}>{location.country}</TableCell>\n\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'widget.online_counter'}/></TableCell>\n                    <TableCell align={'right'}><Badge\n                        color={Colors.SUCCESS}>{counterWidget ? SWITCHER.ON : SWITCHER.OFF}</Badge></TableCell>\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'widget.weather'}/></TableCell>\n                    <TableCell align={'right'}><Badge\n                        color={Colors.SUCCESS}>{weatherWidget ? SWITCHER.ON : SWITCHER.OFF}</Badge></TableCell>\n                </TableRow>\n                <TableRow>\n                    <TableCell> <FormattedMessage id={'color_scheme'}/></TableCell>\n                    <TableCell align={'right'}><Badge color={Colors.INFO}>{theme}</Badge></TableCell>\n                </TableRow>\n            </TableBody>\n        </Table>\n    );\n};","import * as React from 'react';\nimport {useContext} from 'react';\nimport {useStyles} from './styles';\nimport {Button, Grid, Typography} from \"@mui/material\";\nimport {MyContext} from \"../../state/context\";\nimport {ProfileDataTable} from \"./ProfileDataTable\";\nimport {FormattedMessage} from \"react-intl\";\n\ninterface IProps {\n    onEdit: ()=>void;\n}\n\n\nexport const ProfileData: React.FC<IProps> = (props) => {\n    const styles = useStyles();\n    const [chat, me, socket,utility,settings] = useContext ( MyContext );\n    const {children,onEdit} = props;\n    const data = {...me.me, ...settings.options}\n    return (\n        <Grid classes={{root:styles.profileDataRoot}} container justifyContent={\"center\"} alignItems={\"center\"} direction={\"column\"}>\n            <Typography variant={'h6'} >\n                <FormattedMessage id={'button.profile'}/>\n            </Typography>\n            <ProfileDataTable data={data}/>\n            <Button type=\"submit\" color={'info'} onClick={onEdit}\n                    variant={'contained'}> <FormattedMessage id={'button.edit'}/></Button>\n        </Grid>\n    );\n};","import {makeStyles} from \"@mui/styles\";\nimport {title} from \"../../utils/styles\";\n\n\nexport const useStyles = makeStyles ( {\n    root: {\n        marginTop: '3%',\n        position: 'relative',\n\n    },\n    selectWrapper:{\n        maxWidth:200,\n        alignContent:\"center\"\n    },\n    contentWrapper:{\n        '&>*:first-child':{\n            ...title,\n            textTransform:\"uppercase\",\n            paddingBottom: 20\n        }\n    }\n} );","import * as React from 'react';\nimport {FormControlLabel, Grid, Radio, RadioGroup, SelectChangeEvent} from \"@mui/material\";\nimport styles from './styles';\nimport {FormattedMessage, useIntl} from \"react-intl\";\nimport classNames from \"classnames\";\nimport {WithStyles, withStyles} from \"@mui/styles\";\nimport {ReactNode} from \"react\";\nimport {THEME} from \"../../../utils/const\";\n\n\ninterface IProps extends WithStyles<typeof styles> {\n    title: string;\n    isTable?: boolean;\n    value: boolean | THEME;\n    options: any[];\n    onChange: (event: SelectChangeEvent<unknown>, child: ReactNode) => void;\n    name: string;\n}\n\nconst RadioButtons: React.FC<IProps> = (props) => {\n    const {children, title, isTable, classes, value, options, onChange,name} = props;\n\n\n    return (\n        <Grid classes={{root: classNames(classes.root, {[classes.table]: isTable})}}\n              container\n              justifyContent={isTable ? \"space-between\" : \"center\"} alignItems={\"center\"}\n              direction={'row'} gap={2}>\n            {title && <FormattedMessage id={title}/>}\n            <RadioGroup name={name}\n                        defaultValue=\"first\"\n                        row\n                        value={value}>\n                {options.map(o => {\n                    return (\n                        <FormControlLabel value={o.value} control={<Radio onChange={onChange}/>} label={o.label}/>\n                    )\n                })}\n            </RadioGroup>\n        </Grid>\n    );\n};\n\nexport default withStyles(styles)(RadioButtons);","import {createStyles} from \"@mui/styles\";\nimport {TABLE_WIDTH} from \"../../../utils/const\";\nimport {ITheme} from \"../../App/theme/theme\";\n\n\nexport default (theme:ITheme) => createStyles ( {\n    root:{},\n    table:{\n        width: `${TABLE_WIDTH}px !important`\n    },\n} );","import * as React from 'react';\nimport {Grid, Typography} from \"@mui/material\";\nimport {FormattedMessage} from \"react-intl\";\nimport {useStyles} from \"./styles\";\nimport LangSelect from \"../common/LanguageSelect\";\nimport {useFormik,} from \"formik\";\nimport {COUNTRY_CODE_OBJ, LANG} from \"../App/const\";\nimport RadioButtons from \"../common/RadioButtons\";\nimport {LocationSelect} from \"../common/LocationSelect\";\nimport CommonTextField from \"../common/CommonTextFileld\";\nimport {THEME} from \"../../utils/const\";\n\n\nconst commonRradioOptions = [\n    {value: true, label: <FormattedMessage id={'yes'}/>},\n    {value: false, label: <FormattedMessage id={'no'}/>},\n]\nconst colorOptions = [\n    {value: THEME.LIGHT, label: <FormattedMessage id={THEME.LIGHT}/>},\n    {value: THEME.DART, label: <FormattedMessage id={THEME.DART}/>},\n]\n\nexport const ProfileEditForm: React.FC<IProps> = (props) => {\n    const {children, onSubmit, initialValues} = props;\n    const styles = useStyles();\n    const formik = useFormik({\n        initialValues,\n        validate: (values) => {\n        },\n\n        onSubmit: (values) => {\n            const {name, city, country, email, language, counterWidget, weatherWidget, colorScheme} = values;\n            try {\n                onSubmit && onSubmit({\n                    name,\n                    city,\n                    country: COUNTRY_CODE_OBJ[country],\n                    language,\n                    email,\n                    counterWidget,\n                    weatherWidget,\n                    colorScheme\n                });\n            } catch (e) {\n                console.log(e);\n            }\n\n        },\n    });\n\n    return (\n        <form id='edit-profile' className={styles.root} onSubmit={formik.handleSubmit}>\n            <Grid classes={{root: styles.contentWrapper}} container justifyContent={\"center\"} alignItems={\"center\"}\n                  direction={'column'} gap={2}>\n                <Typography variant={'h6'}><FormattedMessage id={'settings.changing'}/></Typography>\n                <LangSelect isTable onChange={formik.handleChange}/>\n                <CommonTextField id={'name'} title={<FormattedMessage id={'name'}/>} onChange={formik.handleChange}\n                                 alert={formik.errors.name} value={formik.values.name} isTable/>\n                <CommonTextField id={'email'} title={<FormattedMessage id={'email'}/>} onChange={formik.handleChange}\n                                 alert={formik.errors.email} value={formik.values.email} isTable/>\n                <LocationSelect isTable onChange={formik.handleChange} city={formik.values.city}\n                                lang={formik.values.language}\n                                country={formik.values.country as LANG}/>\n                <RadioButtons onChange={formik.handleChange} options={commonRradioOptions} value={formik.values.weatherWidget}\n                              isTable name=\"weatherWidget\" title='widget.weather'/>\n                <RadioButtons onChange={formik.handleChange} options={commonRradioOptions} value={formik.values.counterWidget}\n                              isTable name=\"counterWidget\" title='widget.online_counter'/>\n                <RadioButtons onChange={formik.handleChange} options={colorOptions} value={formik.values.colorScheme}\n                              isTable name=\"colorScheme\" title='color_scheme'/>\n\n            </Grid>\n        </form>\n    );\n};\n\n\ninterface IProps {\n    onSubmit: (values: EditProfileFormValues) => void;\n    initialValues: EditProfileFormValues\n}\n\nexport interface EditProfileFormValues {\n    name: string,\n    email: string,\n    city: string,\n    country: string,\n    language: number,\n    weatherWidget: boolean,\n    counterWidget: boolean,\n    colorScheme: THEME,\n}\n","import * as React from 'react';\nimport {useContext} from 'react';\nimport {MyContext} from \"../../state/context\";\nimport {EditProfileFormValues, ProfileEditForm} from \"./ProfileEditForm\";\nimport {Button, Grid} from \"@mui/material\";\nimport {FormattedMessage} from \"react-intl\";\nimport {THEME} from \"../../utils/const\";\n\n\ninterface IProps {\n    toProfile: () => void;\n}\n\nexport const ProfileEdit: React.FC<IProps> = (props) => {\n    const {children, toProfile} = props;\n    const [chat, me, socket,utility, settings] = useContext(MyContext);\n\n    const initialValues:EditProfileFormValues = {\n        city: me.me.location.city,\n        country: me.me.location.country,\n        language: me.me.language,\n        email: me.me.email,\n        name: me.me.name,\n        counterWidget: settings.options.counterWidget,\n        weatherWidget: settings.options.weatherWidget,\n        colorScheme: settings.options.theme,\n    }\n\n\n    const onSubmit = async (values: EditProfileFormValues) => {\n        const {country, language, city, name, email,counterWidget,weatherWidget,colorScheme} = values\n        await settings.setOptions({city, country, language,counterWidget,weatherWidget,colorScheme});\n    };\n\n    return (\n        <Grid container justifyContent={\"center\"} alignItems={\"center\"}\n              direction={'column'} gap={2}>\n            <ProfileEditForm onSubmit={onSubmit} initialValues={initialValues}/>\n            <Button form='edit-profile' type='submit'  color='info' variant='contained'>\n                <FormattedMessage\n                id=\"button.save.data\"/></Button>\n            <Button onClick={toProfile} color='warning' variant='contained'>\n                <FormattedMessage\n                id=\"button.abort\"/></Button>\n        </Grid>\n    );\n};\n\n","import * as React from 'react';\nimport {useCallback, useContext, useState} from 'react';\nimport {BasicJoinForm} from \"../BasicJoinForm/BasicJoinForm\";\nimport {useStyles} from \"./styles\";\nimport {MyContext} from \"../../state/context\";\nimport {observer} from \"mobx-react-lite\";\nimport {IUser} from \"../../service/AuthService\";\nimport {toJS} from \"mobx\";\nimport {Button, Grid} from \"@mui/material\";\nimport {ProfileDataTable} from \"../ProfileData/ProfileDataTable\";\nimport {ProfileData} from \"../ProfileData/ProfileData\";\nimport {FormattedMessage} from \"react-intl\";\nimport {ProfileEdit} from \"../ProfileEdit/ProfileEdit\";\n\n\ninterface IProps {\n\n}\n\nexport const Profile: React.FC<IProps> = observer((props) => {\n    const [chat, me, socket] = useContext ( MyContext );\n    const styles = useStyles();\n    const {children} = props;\n    const [isEdit, setIsEdit] = useState(false)\n    const toEdit = useCallback(()=>setIsEdit(true),[])\n    const toProfile = useCallback(()=>setIsEdit(false),[])\n    return (\n        <div>\n            {!isEdit\n                ? <ProfileData onEdit={toEdit}/>\n               : <>\n                    <ProfileEdit toProfile={toProfile}/>\n                </>}\n        </div>\n    );\n});","import {Button, Grid} from \"@mui/material\";\nimport {NavLink} from \"react-router-dom\";\nimport {ROUTES} from \"../../utils/routes\";\nimport * as React from \"react\";\nimport {useStyles} from \"./styles\";\nimport {FormattedMessage} from \"react-intl\";\n\nexport const JoinOptions: React.FC = () => {\n    const styles = useStyles();\n    return (\n        <Grid className={styles.root} container justifyContent={\"center\"} direction={\"column\"} alignItems={\"center\"}\n              gap={10}>\n            {/*<FanFact text={'test'}/>*/}\n            <Grid item><NavLink to={ROUTES.REGISTRATION_ROUTE}>< Button size={'large'}\n                variant={'contained'} classes={{root: styles.btn}}>\n                <FormattedMessage id={'button.sign.up'}/>\n            </Button>\n            </NavLink></Grid>\n            <Grid item><NavLink to={ROUTES.LOGIN_ROUTE}>< Button size={'large'}\n                variant={'contained'} classes={{root: styles.btn}}>\n                <FormattedMessage id={'button.sign.in'}/>\n            </Button>\n            </NavLink></Grid>\n        </Grid>\n    )\n}","import * as React from 'react';\nimport {useCallback, useContext, useState} from 'react';\nimport {BasicJoinForm, IJoinFormValues} from \"../BasicJoinForm/BasicJoinForm\";\nimport HelpIcon from \"@mui/icons-material/Help\";\nimport {useStyles} from \"./styles\";\nimport {MyContext} from \"../../state/context\";\nimport {FormattedMessage} from \"react-intl\";\nimport {ME_ERROR_ENUM} from \"../../state/const\";\n\n\nexport const Registration: React.FC<Props> = () => {\n    const styles = useStyles();\n    const [showAlert, setShowAlert] = useState(false);\n    const [chat, me, socket] = useContext(MyContext);\n    let timeOutId: NodeJS.Timeout;\n    const onSubmit = (values:IJoinFormValues) => {\n        const {country,language,city,password,name,email} = values\n        me.registration({name,email, password, city, country, language});\n    };\n\n    const onShowAlert = useCallback(() => {\n        setShowAlert(true);\n        timeOutId = setTimeout(() => {\n            setShowAlert(false);\n        }, 4000);\n    }, []);\n    const onCloseAlert = useCallback(() => {\n        setShowAlert(false);\n        clearTimeout(timeOutId);\n    }, []);\n\n    return (\n        <>\n            {<span>{me.error[ME_ERROR_ENUM.AUTH] && me.error[ME_ERROR_ENUM.AUTH]}</span>}\n            <BasicJoinForm\n            onCloseAlert={onCloseAlert}\n            showAlert={showAlert}\n            onSubmit={onSubmit}\n            submitButtonText={<FormattedMessage id={'button.sign.up'}/>}\n            withOptions\n            title={(\n                <div className={styles.children} onClick={showAlert ? onCloseAlert : onShowAlert}>\n                    <div className={styles.title}>\n                        <FormattedMessage id={'button.sign.up'}/>\n                    </div>\n                    <HelpIcon/>\n                </div>\n            )}/>\n        </>\n    );\n};\ntype Props = {};\n","import {makeStyles} from \"@mui/styles\";\n\n\nexport const useStyles = makeStyles({\n    root: {\n        margin: '10px 0',\n        maxWidth: '15vw'\n    },\n    description: {\n        fontSize: '0.8em',\n        color: \"grey\",\n        '&>div>strong': {\n            fontSize: '1.1em',\n        }\n    },\n    iconWrapper: {\n        position: \"relative\"\n    },\n    icon: {\n        position: 'absolute',\n        width: 60,\n        height: 60,\n        top: -24,\n        right:-24\n    }\n\n});","import * as React from 'react';\nimport {useContext, useEffect} from 'react';\nimport {MyContext} from \"../../state/context\";\nimport {Grid, Table, TableCell, TableRow} from \"@mui/material\";\nimport {observer} from \"mobx-react-lite\";\nimport {useStyles} from \"./styles\";\nimport {FormattedMessage} from \"react-intl\";\n\n\ninterface IProps {\n}\n\nexport const Weather: React.FC<IProps> = observer((props) => {\n    const {children} = props;\n    const [chat, me, socket,utility] = useContext ( MyContext );\n    const styles = useStyles();\n    useEffect(()=>{\n        utility.fetchWeather({\n            language:me.me.language,\n            location:me.me.location});\n    },[])\n    return (\n        <Grid container direction={\"column\"} classes={{root:styles.root}}>\n                <Table>\n                    <TableRow >\n                        <TableCell padding={\"checkbox\"}\n                            align={'left'}\n                        >\n                            <span>{utility?.weather?.name}</span>\n                        </TableCell>\n                        <TableCell classes={{root:styles.iconWrapper}} padding={\"checkbox\"}\n                            align={'right'}\n                        >\n                            <img className={styles.icon} src={utility?.weather?.weather?.icon}/>\n                        </TableCell>\n                </TableRow>\n                    <TableRow>\n                        <TableCell padding={\"checkbox\"}\n                            align={'left'}\n                        >\n                            <span>\n                                 <FormattedMessage id={'weather.degree.current'}/>\n                            </span>\n                        </TableCell>\n                        <TableCell padding={\"checkbox\"}\n                            align={'right'}\n                        >\n                            <strong>{\n                                Math.ceil(utility?.weather?.main?.temp)\n                            }</strong>\n                        </TableCell>\n                </TableRow>\n                    <TableRow>\n                        <TableCell padding={\"checkbox\"}\n                            align={'left'}\n                        >\n                            <span>\n                                 <FormattedMessage id={'weather.degree.feel'}/>\n                            </span>\n                        </TableCell>\n                        <TableCell padding={\"checkbox\"}\n                            align={'right'}\n                        >\n                            <strong>{\n                                Math.ceil(utility?.weather?.main?.feels_like)\n                            }</strong>\n                        </TableCell>\n                    </TableRow>\n                </Table>\n        </Grid>\n    );\n});","import * as React from 'react';\nimport {useCallback, useContext, useRef} from 'react';\nimport {AppBar, Box, Button, Grid, Link} from '@mui/material';\nimport {useStyles} from \"./styles\";\nimport {MyContext} from \"../../state/context\";\nimport {observer} from \"mobx-react-lite\";\nimport {Clock} from \"../Clock/Clock\";\nimport {NavLink, useLocation} from 'react-router-dom';\nimport {ROUTES} from \"../../utils/routes\";\nimport {Weather} from \"../Weather/Weather\";\nimport {pageSelector} from \"../../utils/selectors/historySelector\";\nimport {FormattedDate, FormattedNumber, FormattedPlural, FormattedMessage} from 'react-intl'\n\n\ntype Props = {};\nexport const NavBar: React.FC<Props> = observer((props) => {\n    const [chat, me, socket] = useContext(MyContext);\n    const {connectionCounter} = chat;\n    const styles = useStyles();\n    const clockRef = useRef<HTMLDivElement>(null);\n    const isAuthorized = !!me.me.email;\n    const history = useLocation()\n    const {isProfilePage, isChatPage, isLoginPage, isLJoinPage} = pageSelector(history)\n    const toLogout = useCallback(() => me.logout(), []);\n\n    return (\n        <AppBar color={\"transparent\"} variant={\"outlined\"} elevation={0} position=\"static\">\n            <Grid container item alignItems={\"center\"} justifyContent={'space-evenly'} paddingBottom={2}>\n                {isAuthorized && <Weather/>}\n                <div className={styles.title}>\n                    <div><FormattedMessage id={'title.app'}/></div>\n                    {isAuthorized ?\n                        <>\n                            <div className={styles.onlineCounter}>\n                               <FormattedMessage id={'title.online_counter'}/>\n                                {'\\u00A0'} {connectionCounter || 0}  {'\\u00A0'}\n                                <FormattedMessage id={'people'}/>\n                            </div>\n                            <Clock/>\n                        </>\n                        : !isLJoinPage && (isLoginPage\n                            ? <Grid item>\n                                <NavLink to={ROUTES.REGISTRATION_ROUTE}>< Button\n                                    variant={'text'}> <FormattedMessage id={'button.registration'}/></Button>\n                                </NavLink>\n                            </Grid>\n                            : <Grid item><\n                                NavLink to={ROUTES.LOGIN_ROUTE}>< Button\n                                variant={'text'}> <FormattedMessage id={'button.authorization'}/></Button>\n                            </NavLink>\n                            </Grid>\n                    )}\n\n                </div>\n                {isAuthorized && (\n                    <div className={styles.buttonsWrapper}>\n                        <Button onClick={toLogout} variant={'outlined'}>\n                             <FormattedMessage id={'button.logout'}/>\n                        </Button>\n                        {!isProfilePage &&\n                            <Button variant={'outlined'}>\n                                <NavLink to={`${ROUTES.PROFILE_ROUTE}`}>\n                                     <FormattedMessage id={'button.profile'}/>\n                                </NavLink>\n                            </Button>}\n                        {!isChatPage &&\n                            <Button variant={'outlined'}>\n                                <NavLink to={`${ROUTES.CHAT_ROUTE}`}>\n                                     <FormattedMessage id={'button.chat'}/>\n                                </NavLink>\n                            </Button>}\n                    </div>\n                )}\n\n            </Grid>\n        </AppBar>\n    );\n});","import {ROUTES} from \"../routes\";\n\nexport const pageSelector = (history:any) => {\n    return {\n        isLoginPage : history.pathname.includes ( ROUTES.LOGIN_ROUTE ),\n        isLJoinPage : history.pathname.includes ( ROUTES.JOIN_ROUTE ),\n        isProfilePage : history.pathname.includes ( ROUTES.PROFILE_ROUTE ),\n        isChatPage : history.pathname.includes ( ROUTES.CHAT_ROUTE ),\n    }\n }","import axios from \"axios\";\nimport {IUser} from \"../service/AuthService\";\nimport {LS} from \"../utils/const\";\n\n\nlet retryCount = 0\n// const baseURL = 'http://localhost:5000';\nconst baseURL = 'https://ws-simple-chat-api.herokuapp.com/';\n\nconst chatApiInstance = axios.create({\n    withCredentials: true,\n    baseURL\n});\n\n\nchatApiInstance.interceptors.request.use((config)=>{\n    if ( config && config.headers) {\n        config.headers.Authorization = `Bearer ${ localStorage.getItem ( LS.TOKEN ) }`;\n        return config\n    }\n});\n\nchatApiInstance.interceptors.response.use((config) => {\n    return config;\n}, async (error) => {\n    const originalRequest = error.config;\n    if (error.response.status === 401) {\n        originalRequest._isRetry = true;\n        try {\n            if (retryCount > 2) {\n                return ;\n            }\n            retryCount ++\n            const response = await chatApiInstance.get<AuthResponse>(`${baseURL}/auth/refresh`)\n            localStorage.setItem(LS.TOKEN, response.data.accessToken);\n            return await chatApiInstance.request(originalRequest);\n        } catch (e) {\n            return\n        }\n    }\n    throw error;\n});\n\n\nexport default chatApiInstance;\n\nexport interface AuthResponse {\n    accessToken: string;\n    refreshToken: string;\n    user: IUser;\n}","import {AxiosResponse} from \"axios\";\nimport instance from \"../http/chatApiInstance\";\nimport {IJoinFormValues} from \"../components/BasicJoinForm/BasicJoinForm\";\nimport {LANG} from \"../components/App/const\";\n\n\nexport default class AuthService {\n    static async login(email: string, password: string): Promise<AxiosResponse<IAuthResponse>> {\n        return instance.post ( 'auth/login', {email, password} );\n    }\n\n    static async registration(values:IJoinFormValues): Promise<AxiosResponse<IAuthResponse>> {\n        const {password,name,country,language,city,email} = values;\n        return instance.post ( 'auth/registration', {email,password,name,country,language,city} );\n    }\n\n    static async logout(): Promise<void> {\n        return instance.delete ( 'auth/logout' );\n    }\n    static async refresh(): Promise<AxiosResponse<IAuthResponse>> {\n        return instance.get ( 'auth/refresh');\n    }\n}\n\nexport interface IAuthResponse {\n    accessToken: string;\n    refreshToken: string;\n    user: IUser;\n}\n\nexport interface IUser {\n    email: string;\n    name: string;\n    language: LANG | null;\n    location:ILocation\n    id: string;\n    isActivated: boolean;\n\n}\n\nexport interface ILocation {country:string ,city:string}","import {LS} from \"./const\";\n\nexport const getLSData = (key: LS) => {\n    const data = localStorage.getItem(key);\n    if (data) {\n        return data\n    }\n    return ''\n}\n","import {makeAutoObservable} from \"mobx\";\nimport AuthService, {IAuthResponse, IUser} from \"../service/AuthService\";\nimport {AxiosResponse} from \"axios\";\nimport {IJoinFormValues} from \"../components/BasicJoinForm/BasicJoinForm\";\nimport {COUNTRY_CODE_EN, COUNTRY_CODE_RU, CountryCodeType, LANG} from \"../components/App/const\";\nimport {getLSData} from \"../utils/localStorage\";\nimport {LS} from \"../utils/const\";\nimport {ME_ERROR_ENUM} from \"./const\";\n\n\ninterface IMEStore {\n    me: IUser | null;\n    error: { [key in ME_ERROR_ENUM]: string };\n}\n\nclass MeStore implements IMEStore {\n    me = {\n        language: null,\n    } as IUser;\n    error = {\n        [ME_ERROR_ENUM.AUTH]: ''\n    };\n\n\n    constructor() {\n        makeAutoObservable(this, {}, {deep: true});\n    }\n\n    setMe(item: IUser | null) {\n        if (item) {\n            this.me = {\n                ...item,\n                language: item.language?.toLowerCase() as LANG,\n                location: {\n                    ...item.location,\n                    country: item.language === 'ru'\n                        ? COUNTRY_CODE_RU[item.location.country as CountryCodeType]\n                        : COUNTRY_CODE_EN[item.location.country as CountryCodeType]\n                }\n            };\n        } else {\n            this.me = {} as IUser\n        }\n    };\n\n    setAuthData(data: AxiosResponse<IAuthResponse, any>) {\n        localStorage.setItem(LS.TOKEN, data.data.accessToken);\n        data.data.user.language && localStorage.setItem(LS.LANG, data.data.user.language.toLowerCase());\n        this.setMe(data.data.user);\n    }\n\n    setError(path: ME_ERROR_ENUM, error: string) {\n        this.error[path] = error;\n    }\n\n    async login(email: string, password: string) {\n        try {\n            const response = await AuthService.login(email, password);\n            this.setAuthData(response);\n        } catch (e: any) {\n            console.warn(e.response?.data?.message);\n        }\n    };\n\n    async registration(values: IJoinFormValues) {\n        const {password, name, country, language, city, email} = values;\n        try {\n            const response = await AuthService.registration({password, email, name, country, language, city});\n            this.setAuthData(response);\n        } catch (e: any) {\n            this.setError(ME_ERROR_ENUM.AUTH,e)\n        }\n    };\n\n    async refresh() {\n        try {\n            const response = await AuthService.refresh();\n            localStorage.setItem('token', response.data.accessToken);\n            this.setMe(response.data.user);\n        } catch (e: any) {\n            console.warn(e.response?.data?.message);\n        }\n    };\n\n    async logout() {\n        try {\n            const response = await AuthService.logout();\n            this.setMe(null);\n            this.getLang()\n        } catch (e: any) {\n            console.warn(e.response?.data?.message);\n        }\n    };\n\n    saveLang(lang: LANG | string) {\n        this.me.language = lang ? lang as LANG : LANG.EN;\n    };\n\n    getLang() {\n        const lang = getLSData(LS.LANG);\n        this.saveLang(lang)\n    };\n\n}\n\nexport default MeStore;","import {Redirect, Route, Switch} from 'react-router-dom';\nimport * as React from \"react\";\nimport {privateRoutes, publicRoutes, ROUTES} from \"../../utils/routes\";\nimport {useContext} from \"react\";\nimport {MyContext} from \"../../state/context\";\n\n\n\nconst AppRoute:React.FC = () => {\n    const [chat, me, socket] = useContext ( MyContext );\n    const isAuthorized = !!me.me.email;\n\n    return isAuthorized ?\n        <Switch>\n            { privateRoutes.map ( ({path, Component}) => {\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\n            } ) }\n            <Redirect to={ROUTES. CHAT_ROUTE }/>\n        </Switch>\n        :\n        <Switch>\n            { publicRoutes.map ( ({path, Component}) => {\n                return <Route key={ path } path={ path } component={ Component } exact={ true }/>\n            } ) }\n            <Redirect to={ ROUTES.JOIN_ROUTE }/>\n        </Switch>\n}\n\n\nexport default AppRoute;\n","import axios from \"axios\";\n\n\nconst baseURL = 'http://api.fungenerators.com/fact/';\nconst dayFactApiInstance = axios.create({baseURL});\nexport default dayFactApiInstance;\n\n","import {AxiosResponse} from \"axios\";\nimport instance from \"../http/funFactApiInstance\";\n\n\nexport default class DayFactService {\n    static async fetchFact(): Promise<AxiosResponse<IDayFactResponse>> {\n        return instance.get ('random',)\n    }\n\n}\n\ninterface IDayFactResponse {\n    \"success\": {\n        total: number\n    },\n    \"contents\": {\n        fact: string,\n        id: string,\n        category: string,\n        subcategory: string\n    }\n}\n","import {AxiosResponse} from \"axios\";\nimport chatInstance from '../http/chatApiInstance'\nimport {ILocation} from \"./AuthService\";\nimport {LANG} from \"../components/App/const\";\n\n\nexport default class WeatherService {\n    static async fetchWeather(payload:{location: ILocation, lang: LANG}): Promise<AxiosResponse<IWeatherResponse>> {\n        return chatInstance.post(`/utils/weather`, {\n            ...payload\n        })\n    }\n\n}\n\nexport interface IWeatherResponse {\n    \"coord\": {\n        \"lon\": number,\n        \"lat\": number\n    },\n    \"weather\": [\n        {\n            \"id\": number,\n            \"main\": string,\n            \"description\": string,\n            \"icon\": string\n        }\n    ],\n    \"base\": string,\n    \"main\": {\n        \"temp\": number,\n        \"pressure\": number,\n        \"humidity\": number,\n        \"temp_min\": number,\n        \"temp_max\": number\n    },\n    \"visibility\": number,\n    \"wind\": {\n        \"speed\": number,\n        \"deg\": number\n    },\n    \"clouds\": {\n        \"all\": number\n    },\n    \"dt\": number,\n    \"sys\": {\n        \"type\": number,\n        \"id\": number,\n        \"message\": number,\n        \"country\": string,\n        \"sunrise\": number,\n        \"sunset\": number\n    },\n    \"id\": number,\n    \"name\": string,\n    \"cod\": number\n}\n\n","import {makeAutoObservable} from \"mobx\";\nimport DayFactService from \"../service/DayFactService\";\nimport WeatherService, {IWeatherResponse} from \"../service/WeatherService\";\nimport {ILocation} from \"../service/AuthService\";\nimport {LANG} from \"../components/App/const\";\n\n\ninterface IUtilityStore {\n    fact:string\n    weather:IWeatherResponse\n}\n\nclass UtilityStore implements IUtilityStore {\n    fact = '';\n    weather = {} as IWeatherResponse;\n\n\n    constructor() {\n        makeAutoObservable ( this, {}, {deep: true} );\n    }\n\n    setFact(item: string) {\n        if (item) {\n            this.fact = item;\n        } else {\n            this.fact = ''\n        }\n    };\n    setWeather(item: IWeatherResponse) {\n        if (item) {\n            this.weather = item;\n        } else {\n            this.weather = {} as IWeatherResponse\n        }\n    };\n\n    async fetchFact() {\n        try {\n            const response = await DayFactService.fetchFact();\n            this.setFact ( response.data.contents.fact );\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n async fetchWeather(payload: { location: ILocation, lang: LANG }) {\n        try {\n            const response = await WeatherService.fetchWeather(payload);\n            this.setWeather(response.data) ;\n        } catch (e: any) {\n            console.warn ( e.response?.data?.message );\n        }\n    };\n\n\n}\n\nexport default UtilityStore;","import {makeAutoObservable} from \"mobx\";\nimport {LS, THEME} from \"../utils/const\";\nimport {getLSData} from \"../utils/localStorage\";\n\n\nexport interface ISettingsStore {\n    options:IOptions\n}\n\nexport interface IOptions {\n    theme:THEME;\n    weatherWidget: boolean\n    counterWidget: boolean\n}\n\nclass SettingsStore implements ISettingsStore {\n    options = {\n        theme : THEME.LIGHT,\n        weatherWidget : true,\n        counterWidget : true,\n    }\n\n\n    constructor() {\n        makeAutoObservable ( this, {}, {deep: true} );\n    }\n\n    saveOptions(options: any) {\n        const preparedOptions = JSON.stringify(options)\n        localStorage.setItem(LS.OPTIONS,preparedOptions);\n    };\n    setOptions(options:IOptions) {\n        if (options) {\n            this.saveOptions(options)\n            this.options = options;\n        } else {\n            this.options = {\n                theme : THEME.LIGHT,\n                weatherWidget : true,\n                counterWidget : true,\n            }\n        }\n    };\n    async getOption() {\n        try {\n            const options = getLSData(LS.OPTIONS);\n            this.saveOptions(options)\n        }\n       catch (e) {\n           console.log(e)\n       }\n    };\n\n}\n\nexport default SettingsStore;","export const LOCALES = {\n    ENGLISH: 'en',\n    RUSSIAN: 'ru',\n    FRENCH: 'fr',\n    GERMAN: 'de',\n    JAPANESE: 'ja'\n};","import {LOCALES} from \"./locales\";\nimport en from './en.json'\nimport ru from './ru.json'\n\nexport const messages = {\n    [LOCALES.RUSSIAN]: ru,\n    [LOCALES.ENGLISH]: en,\n}","import {createTheme} from \"@mui/material\";\n\n\nexport interface ITheme {\n    palette: {\n        primary: {\n            main: string\n        },\n        secondary: {\n            main: string\n        }\n    },\n    bg: {\n        main: string,\n        light: string\n    },\n    text: {\n        main: string,\n        light: string\n    }\n}\n\nexport default createTheme({\n    palette: {\n        primary: {\n            main: '#3F8AE0'\n        },\n        secondary: {\n            main: '#a24bd3'\n        }\n    },\n    bg: {\n        main: '#fff',\n        light: '#F4F5F7'\n    },\n    text: {\n        main: '#172B4D',\n        light: '#262930'\n    }\n});","import * as React from 'react';\nimport {useEffect, useState} from 'react';\nimport {NavBar} from \"../NavBar/NavBar\";\nimport './App.css';\nimport {Loader} from \"../Loader/Loader\";\nimport {HashRouter} from 'react-router-dom';\nimport ChatStore, {MESSAGE_ENUM} from \"../../state/chatStore\";\nimport {observer} from \"mobx-react-lite\";\nimport {MyContext} from '../../state/context';\nimport MeStore from \"../../state/meStore\";\nimport AppRoute from \"../AppRoute/AppRoute\";\nimport utilityStore from \"../../state/utilityStore\";\nimport SettingsStore from \"../../state/settingsStore\";\nimport {IntlProvider} from \"react-intl\";\nimport {messages} from \"../../i18n/messages\";\nimport {LOCALES} from \"../../i18n/locales\";\nimport {LS} from \"../../utils/const\";\nimport {LANG} from \"./const\";\nimport theme from './theme/theme';\nimport {ThemeProvider} from \"@mui/styles\";\n\n\nconst App: React.FC = observer((props) => {\n    const [chat] = useState(() => new ChatStore());\n    const [me] = useState(() => new MeStore());\n    const [settings] = useState(() => new SettingsStore());\n    const [utility] = useState(() => new utilityStore());\n    const [socket, setSocket] = useState<WebSocket | null>(null);\n    const value = React.useMemo(() => [chat, me, socket, utility, settings], [chat, me, socket, utility, settings]);\n    const isAuthorized = !!me.me.email;\n    const connect = async () => {\n        chat.setLoading(true);\n        setSocket(await new WebSocket('wss://ws-simple-chat-api.herokuapp.com'));\n        // setSocket ( await new WebSocket ( 'ws://localhost:5000' ) );\n    };\n    useEffect(() => {\n        if (!me.me.language) {\n            me.getLang()\n        }\n        if (localStorage.getItem(LS.TOKEN)) {\n            me.refresh();\n        }\n    }, []);\n\n    useEffect(() => {\n        if (!socket && isAuthorized) {\n            connect();\n        }\n    }, [isAuthorized]);\n\n    if (socket) {\n        socket.onmessage = (messageEvent: MessageEvent) => {\n            chat.setMessages(JSON.parse(messageEvent.data));\n        };\n        socket.onopen = () => {\n            chat.setConnected(true);\n            const message = {\n                event: MESSAGE_ENUM.CONNECTION,\n                id: me.me.id,\n                name: me.me.email,\n                body: me.me.email,\n            };\n            socket?.send(JSON.stringify(message));\n            chat.setLoading(false);\n        };\n        socket.onmessage = (event: MessageEvent) => {\n            const messages = JSON.parse(event.data);\n            chat.setMessages(messages);\n        };\n        socket.onclose = () => {\n            chat.setConnected(false);\n            const message = {\n                event: MESSAGE_ENUM.CONNECTION,\n                id: me.me.id,\n                name: me.me.email,\n                body: '',\n            };\n            socket.send(JSON.stringify(message));\n        };\n        socket.onerror = () => {\n            chat.setConnected(false);\n            setTimeout(() => connect(), 1000);\n        };\n    }\n    if (chat.isLoading) return <Loader/>;\n\n\n    return (\n        <IntlProvider messages={messages[me.me.language || LANG.EN]} defaultLocale={LOCALES.ENGLISH}\n                      locale={me.me.language ? me.me.language : LANG.EN}>\n            <HashRouter>\n                <ThemeProvider theme={theme}>\n                    <MyContext.Provider value={value}>\n                        <NavBar/>\n                        <AppRoute/>\n                    </MyContext.Provider>\n                </ThemeProvider>\n            </HashRouter>\n        </IntlProvider>\n    );\n});\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from \"./components/App/App\";\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}